<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.Grid</name>
    </assembly>
    <members>
        <member name="N:Xceed.Editors">
            <summary>The Xceed.Editors namespace regroups all the classes which contain editors that can be used to edit data.</summary>
        </member>
        <member name="T:Xceed.Editors.ColumnSortDirection">
            <summary>Value indicating the direction in which a column is sorted</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnSortDirection.None">
            <summary>The column is not sorted.</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnSortDirection.Ascending">
            <summary>The column is sorted in an ascending direction.</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnSortDirection.Descending">
            <summary>The column is sorted in an descending direction.</summary>
        </member>
        <member name="T:Xceed.Editors.ColumnWidthAdjustment">
            <summary>Value representing the style with which the width of the columns will be adjusted.</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnWidthAdjustment.FitToItems">
            <summary>The width of each column will be adjusted to fit the length of its largest item.</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnWidthAdjustment.ExtendLastColumn">
            <summary>The width of the last column will be adjusted to take up the remaining space.</summary>
        </member>
        <member name="F:Xceed.Editors.ColumnWidthAdjustment.None">
            <summary>The width of the columns will not be adjusted.</summary>
        </member>
        <member name="T:Xceed.Editors.CompareType">
            <summary>Value representing how string representations of items (ComboBoxItem) contained in a WinComboBox control are considered.</summary>
        </member>
        <member name="F:Xceed.Editors.CompareType.ExactMatch">
            <summary>An exact match is required.</summary>
        </member>
        <member name="F:Xceed.Editors.CompareType.CaseInsensitive">
            <summary>The case of characters is ignored.</summary>
        </member>
        <member name="F:Xceed.Editors.CompareType.AccentInsensitive">
            <summary>Accents are ignored.</summary>
        </member>
        <member name="F:Xceed.Editors.CompareType.CaseAndAccentInsensitive">
            <summary>Case and accents are ignored.</summary>
        </member>
        <member name="T:Xceed.Editors.ImagePosition">
            <summary>Value representing the position on an image in an editor.</summary>
        </member>
        <member name="F:Xceed.Editors.ImagePosition.None">
            <summary>No image is displayed.</summary>
        </member>
        <member name="F:Xceed.Editors.ImagePosition.Left">
            <summary>The image is displayed to the left of the text.</summary>
        </member>
        <member name="F:Xceed.Editors.ImagePosition.Right">
            <summary>The image is displayed to the right of the text.</summary>
        </member>
        <member name="T:Xceed.Editors.SearchMode">
            <summary>Value representing the mode to use when searching for items in the WinComboBox control.</summary>
            <remarks>             Items are searched for according to their string         representation which is determined by the WinComboBox         control's DisplayFormat property. For example, let's assume         that the WinComboBox has 3 columns and 3 items with the         following values:          Plante, Martin, 34Drimonakos, Mathieu, 24Ledoux, Pierre-Luc, 25                         If the DisplayFormat property is set to "Column2 Column1         Column3", the string representation of the items will         be:          Martin Plante 34Mathieu Drimonakos 24Pierre-Luc Ledoux 25                Entering "p" in the WinComboBox control will select     "Pierre-Luc Ledoux 25" rather than "Martin Plante 34" because     the string representation of the items is used rather than the     physical order of the values/colums. If the DisplayFormat had     not been modified, "Column1, Column2, Column3", "Plante,     Martin, 34" would have been selected and not "Ledoux,     Pierre-Luc, 25".     The value of the CompareType property can influence the     search behavior. By default, the CompareType property is set to     CompareType.ExactMatch, therefore cases and accents are     respected. Setting the CompareType property to CaseInsensitive,     AccentInsensitive, or both will change the way in which items     are searched for. For example, if the CompareType property is     set to AccentInsensitive, accents contained in the string     representation of an item will be ignored, resulting in "ö" and     "o" being considered as equal values.</remarks>
        </member>
        <member name="F:Xceed.Editors.SearchMode.None">
            <summary>Searching is disabled.</summary>
        </member>
        <member name="F:Xceed.Editors.SearchMode.FirstChar">
            <summary>Search according to the first character of the item's string representation.</summary>
        </member>
        <member name="F:Xceed.Editors.SearchMode.FullText">
            <summary>Search according to the full text of the item's string representation.</summary>
        </member>
        <member name="T:Xceed.Editors.WinComboBox+SearchPattern">
            <summary>Value representing the pattern to use when searching for a string within the WinComboBox's control DropDownControl.</summary>
        </member>
        <member name="F:Xceed.Editors.WinComboBox+SearchPattern.StartsWith">
            <summary>The string to find starts with the specified string.</summary>
        </member>
        <member name="F:Xceed.Editors.WinComboBox+SearchPattern.EndsWith">
            <summary>The string to find ends with the specified string.</summary>
        </member>
        <member name="F:Xceed.Editors.WinComboBox+SearchPattern.Contains">
            <summary>The string to find contains the specified string.</summary>
        </member>
        <member name="F:Xceed.Editors.WinComboBox+SearchPattern.Exact">
            <summary>The string to find is the exact specified string.</summary>
        </member>
        <member name="T:Xceed.Editors.ColumnInfo">
            <summary>Represents a column in the WinComboBox control's dropdown.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor">
            <summary>Initializes a new instance of the ColumnInfo class specifying various characteristics.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the ColumnInfo class specifying its name and data type.</summary>
            <remarks>    If a width is not set, not all columns may appear in the     WinComboBox control's dropdown when it is first opened. The     DropDownControl can be resized to see all the columns.</remarks>
            <param name="columnName">A string representing the name of the column.</param>
            <param name="dataType">The datatype of the items contained in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor(System.String,System.Type,System.Int32)">
            <summary>Initializes a new instance of the ColumnInfo class specifying various characteristics.</summary>
            <remarks>    The data contained in the ColumnInfo object will     not be sorted.</remarks>
            <param name="columnName">A string representing the name of the column.</param>
            <param name="dataType">The datatype of the items contained in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</param>
            <param name="width">A value representing, in pixels, the width of the column.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor(System.String,System.Type,System.Int32,Xceed.Editors.ColumnSortDirection)">
            <summary>Initializes a new instance of the ColumnInfo class specifying various characteristics.</summary>
            <remarks>    If a width is not set, not all columns may appear in the     WinComboBox control's dropdown when it is first opened. The     DropDownControl can be resized to see all the columns.</remarks>
            <param name="columnName">A string representing the name of the column.</param>
            <param name="dataType">The datatype of the items contained in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</param>
            <param name="sortIndex">A value representing the order in which the column was sorted.</param>
            <param name="sortDirection">A ColumnSortDirection value representing the direction in which the column is sorted.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor(System.String,System.Type,System.Int32,System.Int32,Xceed.Editors.ColumnSortDirection)">
            <summary>Initializes a new instance of the ColumnInfo class specifying various characteristics.</summary>
            <param name="columnName">A string representing the name of the column.</param>
            <param name="dataType">The datatype of the items contained in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</param>
            <param name="width">A value representing, in pixels, the width of the column.</param>
            <param name="sortIndex">A value representing the order in which the column was sorted.</param>
            <param name="sortDirection">A ColumnSortDirection value representing the direction in which the column is sorted.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.#ctor(System.String,System.Type,System.Int32,System.Int32,Xceed.Editors.ColumnSortDirection,System.Boolean)">
            <summary>Initializes a new instance of the ColumnInfo class specifying various characteristics.</summary>
            <param name="columnName">A string representing the name of the column.</param>
            <param name="dataType">The datatype of the items contained in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</param>
            <param name="width">A value representing, in pixels, the width of the column.</param>
            <param name="sortIndex">A value representing the order in which the column was sorted.</param>
            <param name="sortDirection">A ColumnSortDirection value representing the direction in which the column is sorted.</param>
            <param name="visible">true if the column is visible; false otherwise.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.GetDesignTimeVisibility">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.InternalGetColumn">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.InternalSetColumn(Xceed.Grid.Column)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfo.SetDesignTimeVisibility(System.Boolean)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.DataType">
            <summary>Gets or sets the data type of the items in the column. The specified datatype will be ignored if the WinComboBox is bound to a datasource.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.Name">
            <summary>Gets or set the name of the column.</summary>
            <remarks>    If the data is retrieved from a dataset, this property     corresponds to the field name.</remarks>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.SortDirection">
            <summary>Gets or sets the direction in which the column is sorted.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.SortIndex">
            <summary>Gets or sets the order in which the column is sorted.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.Visible">
            <summary>Gets or sets a boolean value indicating if the column is visible.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfo.Width">
            <summary>Gets or sets the width of the column in pixels</summary>
        </member>
        <member name="T:Xceed.Editors.ColumnInfoList">
            <summary>Contains a list of ColumnInfo objects.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.Add(Xceed.Editors.ColumnInfo)">
            <summary>Adds a ColumnInfo object to the list.</summary>
            <returns>The index at which the new item was inserted.</returns>
            <param name="columnInfo">The item to add.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.AddRange(Xceed.Editors.ColumnInfo[])">
            <summary>Adds the ColumnInfo objects to the end of the list.</summary>
            <param name="columnInfos">An array of ColumnInfo objects representing the columns to add to the end of the list.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.Clear">
            <summary>Removes all items from the list.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.Contains(Xceed.Editors.ColumnInfo)">
            <summary>Retrieves a boolean value indicating if the item exists in the list.</summary>
            <returns>true if the item is found in the list; false otherwise.</returns>
            <param name="columnInfo">The item to locate.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.GetNames">
            <summary>Retrieves a string arary containing the column names of each ColumnInfo object in the list.</summary>
            <returns>A string array containing the column names of each ColumnInfo object in the list.</returns>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.IndexOf(Xceed.Editors.ColumnInfo)">
            <summary>Searches for the specified item in the list and returns the zero-based index of the first occurrence.</summary>
            <returns>The zero-based index of the first occurrence of columnInfo within the entire list, if found; otherwise, returns -1.</returns>
            <param name="columnInfo">The item to locate.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.Insert(System.Int32,Xceed.Editors.ColumnInfo)">
            <summary>Inserts the item in the list at the specified index.</summary>
            <param name="index">The zero-based index at which columnInfo should be inserted.</param>
            <param name="columnInfo">The item to insert into the list .</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the list.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.OnClearComplete">
            <summary>Performs additional custom processing when clearing the contents of the list.</summary>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processing before inserting a new ColumnInfo into the list.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processing after inserting a new ColumnInfo into the list.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processing after removing a ColumnInfo from the list.</summary>
            <remarks>    If the position of the ColumnInfo is unknown, index is     -1. In that case, the ColumnInfo) method needs to be called     with the value to retrieve the position.</remarks>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.Remove(Xceed.Editors.ColumnInfo)">
            <summary>Removes the first occurrence of columnInfo from the list.</summary>
            <param name="columnInfo">The item to remove from the list.</param>
        </member>
        <member name="M:Xceed.Editors.ColumnInfoList.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the item.</param>
        </member>
        <member name="P:Xceed.Editors.ColumnInfoList.Item">
            <summary>Gets the column that corresponds to columnName.</summary>
        </member>
        <member name="P:Xceed.Editors.ColumnInfoList.Item(System.String)">
            <summary>Gets the column that corresponds to columnName.</summary>
            <param name="columnName">The field name of the column to retrieve.</param>
        </member>
        <member name="P:Xceed.Editors.ColumnInfoList.Item(System.Int32)">
            <summary>Gets the column at the specified index.</summary>
            <param name="index">The zero-based index at which to get the column.</param>
        </member>
        <member name="T:Xceed.Editors.ComboBoxItem">
            <summary>Represents an item in the WinComboBox control's dropdown.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItem.#ctor(System.Object[])">
            <summary>Initializes a new instance of the ComboBoxItem class specifying the values that the item contains.</summary>
            <param name="values">The values contained within the item.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItem.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current ComboBoxItem.</summary>
            <returns>trueif the specified object is equal to the current ComboBoxItem; false otherwise.</returns>
            <param name="obj">The object to compare with the current ComboBoxItem.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItem.GetHashCode">
            <summary>Serves as a hash function for the ComboBoxItem, suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current ComboBoxItem.</returns>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItem.Item">
            <summary>Gets the value at the specified index.</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItem.Item(System.Int32)">
            <summary>Gets the value at the specified index.</summary>
            <param name="index">The index of the value to retrieve.</param>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItem.Item(System.String)">
            <summary>Gets the value at the specified column name.</summary>
            <param name="columnName">The Name of the column.</param>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItem.ValueCount">
            <summary>Gets the number of values contained in the item.</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItem.Values">
            <summary>Gets the values contained within the item.</summary>
        </member>
        <member name="T:Xceed.Editors.ComboBoxItemList">
            <summary>Contains a list of ComboBoxItem objects.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Add">
            <summary>Adds a ComboBoxItem to the list.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Add(Xceed.Editors.ComboBoxItem)">
            <summary>Adds a ComboBoxItem to the list.</summary>
            <returns>The index at which the new item was added.</returns>
            <remarks>    If the combobox contains existing columns, the values     contained within the ComboBoxItemmust match the     datatypes of the existing columns otherwise an exception will     be thrown. If the combobox does not contain existing columns,     columns will be created an ObjectDataType.</remarks>
            <param name="item">The ComboBoxItem to add.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Add(System.Object[])">
            <summary>Adds the specified values to the WinComboBox as a single ComboBoxItem.</summary>
            <remarks>    The number of values must match the number of     columns (ColumnCount) contained in the WinComboBox control     otherwise an exception will be thrown. If the WinComboBox does     not contain columns, then the first "Add" will determine the     number of columns that are created and added to the combobox.     For example, if Add is called with "1", "2", "3", three columns     with an ObjectDataType will be added to the combobox. Any     subsequent calls to the Add method must contain 3 values     otherwise an exception will be thrown.     When using this overload of the Add method, if the     columns are created by the Add method, they will have an     ObjectDataType. To provide the columns with a specific     datatype, "typed" columns need to first be added to the     combobox via the Columns collection.</remarks>
            <param name="values">The values to add to the WinComboBox as a single ComboBoxItem.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.AddRange(System.Collections.ICollection)">
            <summary>Adds the specified values to the end of the list.</summary>
            <param name="valuesCollection">The values to add to the end of the list.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Clear">
            <summary>Removes all items from the list.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Contains">
            <summary>Retrieves a boolean value indicating if the item exists in the list.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Contains(Xceed.Editors.ComboBoxItem)">
            <summary>Retrieves a boolean value indicating if the item exists in the list.</summary>
            <returns>true if the ComboBoxItem is found in the list; false otherwise.</returns>
            <param name="item">The ComboBoxItem to locate.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Contains(System.Object[])">
            <summary>Retrieves a boolean value indicating if the items exists in the list.</summary>
            <returns>true if the items are found in the list; false otherwise.</returns>
            <param name="objects">The items to locate.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.CopyTo(System.Array,System.Int32)">
            <summary>Copies the items of the list to an array, starting at a particular array index.</summary>
            <param name="array">A one-dimensional array of type System.Array to which the items are copied.</param>
            <param name="index">The zero-based index in the array at which copying begins.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.GetEnumerator">
            <summary>Returns an enumerator that can iterate through the list.</summary>
            <returns>An IEnumerator that can be used to iterate through the list.</returns>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.IndexOf(Xceed.Editors.ComboBoxItem)">
            <summary>Searches for the specified ComboBoxItem in the list and returns the zero-based index of the first occurrence.</summary>
            <returns>The zero-based index of the first occurrence of item within the entire list, if found; otherwise, returns -1.</returns>
            <param name="item">The ComboBoxItem to locate.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Insert(System.Int32,Xceed.Editors.ComboBoxItem)">
            <summary>Inserts a ComboBoxItem into the list at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The ComboBoxItem to insert.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.Remove(Xceed.Editors.ComboBoxItem)">
            <summary>Removes the first occurrence of item from the list.</summary>
            <param name="item">The ComboBoxItem to remove from the list.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxItemList.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the item.</param>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItemList.ColumnCount">
            <summary>Gets the number of columns in the parent WinComboBox control's dropdown.</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItemList.Count">
            <summary>Gets the number of items contained in the list.</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItemList.IsSynchronized">
            <summary>Gets a boolean value indicating if access to the list is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItemList.Item(System.Int32)">
            <summary>Gets or sets the ComboBoxItem at the specified index.</summary>
            <param name="index">The ComboBoxItem at the specified index.</param>
        </member>
        <member name="P:Xceed.Editors.ComboBoxItemList.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the list.</summary>
        </member>
        <member name="T:Xceed.Editors.ComboBoxTextBoxArea">
            <summary>Class which represents the inner textbox of the WinComboBox control.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.#ctor">
            <summary>OBSOLETE: The ComboBoxTextBoxArea( WinComboBox ) constructor is obsolete and has been replaced by the ComboBoxTextBoxArea() constructor. Initializes a new instance of the ComboBoxTextBoxArea class specifying the WinComboBox to associate it to.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.#ctor">
            <summary>Initializes a new instance of the ComboBoxTextArea class.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.#ctor(Xceed.Editors.ComboBoxTextBoxArea)">
            <summary>Initializes a new instance of the ComboBoxTextBoxArea class specifying the ComboBoxTextBoxArea control that will be used as a template.</summary>
            <remarks>    If the Clone method is used, all property values will be     cloned however event handlers will not.</remarks>
            <param name="template">The ComboBoxTextBoxArea to use as a template.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.#ctor(Xceed.Editors.WinComboBox)">
            <summary>OBSOLETE: The ComboBoxTextBoxArea( WinComboBox ) constructor is obsolete and has been replaced by the ComboBoxTextBoxArea() constructor. Initializes a new instance of the ComboBoxTextBoxArea class specifying the WinComboBox to associate it to.</summary>
            <param name="winComboBox">The WinComboBox to associate the TextBoxArea to.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.Clone">
            <summary>Creates a shallow copy of the control.</summary>
            <returns>An Object representing the shallow copy of the control.</returns>
            <remarks>    All property values will be cloned however event handlers     will not.</remarks>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseWheel event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.OnRawTextChanged(System.EventArgs)">
            <summary>Raises the RawTextChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.PaintBordersCore(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.PaintImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>Paints the image in the destinationRectangle using the provided graphics.</summary>
            <param name="graphics">The Graphics object used to paint the image.</param>
            <param name="destinationRectangle">The Rectangle in which to paint the image.</param>
            <param name="image">The Image to paint.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.SetMaskCore(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.ValidateTextCore(System.String,System.Boolean)">
            <summary>Validates that the specified text can be parsed into a valid value for the combobox.</summary>
            <remarks>    When overriding ValidateTextCore in a derived class, if     the editText fails the validation process, an exception should     be thrown.</remarks>
            <param name="editText">The text to validate.</param>
            <param name="fullValidation">true if the editText should be validated as a valid combobox value; false otherwise.</param>
        </member>
        <member name="M:Xceed.Editors.ComboBoxTextBoxArea.WndProc(System.Windows.Forms.Message@)">
            <summary>Processes Windows messages.</summary>
            <param name="m">The Message to process.</param>
        </member>
        <member name="P:Xceed.Editors.ComboBoxTextBoxArea.Mask">
            <summary>Gets or sets the mask applied to the textbox's text.</summary>
        </member>
        <member name="P:Xceed.Editors.ComboBoxTextBoxArea.MaskPromptChar">
            <summary>Gets or sets the character used to prompt a user for input.</summary>
        </member>
        <member name="T:Xceed.Editors.QueryImageEventArgs">
            <summary>Provides information about the image to be painted in a WinComboBox.</summary>
        </member>
        <member name="M:Xceed.Editors.QueryImageEventArgs.#ctor(System.Drawing.Image)">
            <summary>Initializes a new instance of the QueryImageEventArgs class specifying the image to be painted in the WinComboBox.</summary>
            <param name="image">A reference to an Image representing the image to be painted in the WinComboBox.</param>
        </member>
        <member name="P:Xceed.Editors.QueryImageEventArgs.Image">
            <summary>Gets or sets the image to be painted in the WinComboBox.</summary>
        </member>
        <member name="T:Xceed.Editors.QueryItemTextEventArgs">
            <summary>Provides the information necessary to format the SelectedItem's text in the WinComboBox.</summary>
        </member>
        <member name="M:Xceed.Editors.QueryItemTextEventArgs.#ctor(Xceed.Editors.ComboBoxItem,System.String)">
            <summary>Initializes a new instance of the QueryItemTextEventArgs class.</summary>
            <param name="item">The ComboBoxItem currently selected in the WinComboBox's dropdown.</param>
            <param name="displayFormat">The format with which the SelectedItem is displayed in the WinComboBox.</param>
        </member>
        <member name="P:Xceed.Editors.QueryItemTextEventArgs.DisplayFormat">
            <summary>Gets the format with which the SelectedItem is displayed in the WinComboBox.</summary>
            <remarks>    The default display format is the names (Name) of each     column separated by a comma (,). For example, if the combobox     contains 3 columns named "LastName", "FirstName", and "Age",     the display format will be "LastName, FirstName, Age". When an     item is selected, the display format will be resolved to the     values of the correspond columns. For example: "Robitaille,     Naomi, 2".</remarks>
        </member>
        <member name="P:Xceed.Editors.QueryItemTextEventArgs.Item">
            <summary>Gets the ComboBoxItem currently selected in the WinComboBox's dropdown.</summary>
        </member>
        <member name="P:Xceed.Editors.QueryItemTextEventArgs.Text">
            <summary>Gets or sets the SelectedItem's text to display in the WinComboBox.</summary>
            <remarks>    By default, the text will be formatted according to the     DisplayFormat.</remarks>
        </member>
        <member name="T:Xceed.Editors.WinComboBox">
            <summary>The WinComboBox class represents an extensible and themable multi-column combobox for Windows Forms.</summary>
            <remarks>    The WinComboBox class represents an extensible and     themable multi-column combobox for Windows Forms. It supports     both the Windows XP and classic Windows themes. The WinComboBox     control can contain any of the Xceed editors as well as any     other .NET control.</remarks>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor">
            <summary>Initializes a new instance of the WinComboBox class.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(Xceed.Editors.EnhancedBorderStyle)">
            <summary>Initializes a new instance of the WinComboBox control specifying its border style.</summary>
            <param name="borderStyle">An EnhancedBorderStyle value representing the border style of the WinComboBox.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Object,System.String,System.String)">
            <summary>Initializes a new instance of the WinComboBox class specifying its data binding information.</summary>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the WinComboBox class specifying its data binding information.</summary>
            <remarks>    Only the column names specified by displayFormat and the     valueMember parameters will be created in the dropdown. For     example, setting displayFormat to "FirstName LastName" will     result in only the "FirstName" and "LastName" columns being     created in the dropdown and, for example, "Naomi Robitaille"     when the item is selected. The column specified by valueMember     will also be created, however it will not visible (Visible     property set to false) unless it is also part of the     displayFormat.</remarks>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
            <param name="displayFormat">The format with which the SelectedItem is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Object,System.String,System.String,System.String,Xceed.Editors.ImagePosition,System.Drawing.Size,System.String)">
            <summary>Initializes a new instance of the ComboBoxEditor class specifying its data binding information.</summary>
            <remarks>    Only the column names specified by displayFormat and the     valueMember parameters will be created in the dropdown. For     example, setting displayFormat to "FirstName LastName" will     result in only the "FirstName" and "LastName" columns being     created in the dropdown and, for example, "Naomi Robitaille"     when the item is selected. The column specified by valueMember     will also be created, however it will not visible (Visible     property set to false) unless it is also part of the     displayFormat.</remarks>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">The field of the dataSource from which to draw the value.</param>
            <param name="imageMember">The field of the dataSource from which to draw the image.</param>
            <param name="imagePosition">The position of the image in the WinComboBox.</param>
            <param name="imageSize">The size of the image.</param>
            <param name="displayFormat">The format with which the SelectedItem is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Type,Xceed.Editors.EnhancedBorderStyle)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Type,Xceed.Editors.EnhancedBorderStyle,System.Object,System.String,System.String)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Type,Xceed.Editors.EnhancedBorderStyle,System.Object,System.String,System.String,System.String)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(System.Type,Xceed.Editors.EnhancedBorderStyle,System.Object,System.String,System.String,System.String,Xceed.Editors.ImagePosition,System.Drawing.Size,System.String)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.#ctor(Xceed.Editors.WinComboBox)">
            <summary>Initializes a new instance of the WinComboBox class specifying the WinComboBox control that will be used as a template.</summary>
            <remarks>    If the Clone method is used, all property values will be     cloned however event handlers will not.</remarks>
            <param name="template">The WinComboBox to use as a template.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.BeginInit">
            <summary>Signals the beginning of a batch modification process.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.CalculatePadding">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Clone">
            <summary>Creates a shallow copy of the control.</summary>
            <returns>An Object representing the shallow copy of the control.</returns>
            <remarks>    All property values will be cloned however event handlers     will not.</remarks>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.CreateDefaultDropDownControl">
            <summary>Creates the default DropDownControl.</summary>
            <returns>A Control representing the default DropDownControl.</returns>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.CreateTextBoxArea">
            <summary>Creates the TextBoxArea to which will be contained by the WinComboBox control.</summary>
            <returns>A reference to a TextBoxArea representing the TextBoxArea contained by the WinComboBox control.</returns>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Dispose">
            <summary>Releases all resources used by the control.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Dispose(System.Boolean)">
            <summary>Releases all resources used by the control.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.EndInit">
            <summary>Signals the end of a batch modification process.</summary>
            <remarks>    When EndInit is called, the data will be loaded into the     combobox (if any data binding occurred during the process), and     items will be sorted (if a sort operation was     requested).     When AllowFreeText is set to false, the Text property can     only be set to the string representation of a ComboBoxItem,     formatted according to the value of the DisplayFormat     property.</remarks>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find">
            <summary>Searches for specific value in a column.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.Object,System.String)">
            <summary>Searches for specific value in a column.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <param name="value">The value to find.</param>
            <param name="columnName">The names of the column in which to search for value.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.Object,System.Int32,System.String)">
            <summary>Searches for specific value in a column at the specified starting index.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <param name="value">The value to find.</param>
            <param name="startIndex">The zero-based index at which to start searching.</param>
            <param name="columnName">The name of the column in which to search for value.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.String,System.Int32,System.String,Xceed.Editors.WinComboBox+SearchPattern,Xceed.Editors.CompareType)">
            <summary>Searches for a string in a column at the specified starting index.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <remarks>The Find method is case-sensitive!</remarks>
            <param name="text">The string to find.</param>
            <param name="startIndex">The zero-based index at which to start searching.</param>
            <param name="columnName">The name of the column in which to search for text.</param>
            <param name="pattern">A SearchPattern representing the pattern to use when searching for text within the column that corresponds to columnName.</param>
            <param name="compareType">Indicates how string representations of items contained in the combobox are considered.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.String)">
            <summary>Returns the index of the comboBoxItem which would be displayed as the passed parameter.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <remarks>If no comboBoxItem matches exactly the passed displayText, the returned index will be -1.</remarks>
            <param name="displayText">A string representing the displayed text.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.String,Xceed.Editors.WinComboBox+SearchPattern)">
            <summary>Returns the index of the comboBoxItem which would be displayed as the passed parameter.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <param name="displayText">A string representing the displayed text.</param>
            <param name="searchPattern">A SearchPattern representing the pattern to use when searching for text within the column that corresponds to columnName.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.Find(System.String,Xceed.Editors.WinComboBox+SearchPattern,Xceed.Editors.CompareType)">
            <summary>Returns the index of the comboBoxItem which would be displayed as the passed parameter.</summary>
            <returns>The zero-based index of the first occurrence of value in columnName. If -1, the value was not found.</returns>
            <param name="displayText">A string representing the displayed text.</param>
            <param name="searchPattern">A SearchPattern representing the pattern to use when searching for text within the column that corresponds to columnName.</param>
            <param name="compareType">Indicates how string representations of items contained in the combobox are considered.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnAllowFreeTextChanged(System.EventArgs)">
            <summary>Raises the AllowFreeTextChanged event.</summary>
            <remarks>When overriding OnAllowFreeTextChanged in a derived class, be sure to call the base class's OnAllowFreeTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnColumnWidthAdjustmentChanged(System.EventArgs)">
            <summary>Raises the ColumnWidthAdjustmentChanged event.</summary>
            <remarks>When overriding OnColumnWidthAdjustmentChanged in a derived class, be sure to call the base class's OnColumnWidthAdjustmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnCompareTypeChanged(System.EventArgs)">
            <summary>Raises the CompareTypeChanged event.</summary>
            <remarks>When overriding OnCompareTypeChanged in a derived class, be sure to call the base class's OnCompareTypeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnDataBindingChanged(System.EventArgs)">
            <summary>Raises the DataBindingChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnDataMemberChanged(System.EventArgs)">
            <summary>Raises the DataMemberChanged event.</summary>
            <remarks>When overriding OnDataMemberChanged in a derived class, be sure to call the base class's OnDataMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnDataSourceChanged(System.EventArgs)">
            <summary>Raises the DataSourceChanged event.</summary>
            <remarks>When overriding OnDataSourceChanged in a derived class, be sure to call the base class's OnDataSourceChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnDisplayFormatChanged(System.EventArgs)">
            <summary>Raises the DisplayFormatChanged event.</summary>
            <remarks>When overriding OnDisplayFormatChanged in a derived class, be sure to call the base class's OnDisplayFormatChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnDroppedDownChanged(System.EventArgs)">
            <summary>Raises the DroppedDownChanged event.</summary>
            <remarks>When overriding OnDroppedDownChanged in a derived class, be sure to call the base class's OnDroppedDownChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the ImageAlignmentChanged event.</summary>
            <remarks>When overriding OnImageAlignmentChanged in a derived class, be sure to call the base class's OnImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImageMemberChanged(System.EventArgs)">
            <summary>Raises the ImageMemberChanged event.</summary>
            <remarks>When overriding OnImageMemberChanged in a derived class, be sure to call the base class's OnImageMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImagePaddingChanged(System.EventArgs)">
            <summary>Raises the ImagePaddingChanged event.</summary>
            <remarks>When overriding OnImagePaddingChanged in a derived class, be sure to call the base class's OnImagePaddingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImagePositionChanged(System.EventArgs)">
            <summary>Raises the ImagePositionChanged event.</summary>
            <remarks>When overriding OnImagePositionChanged in a derived class, be sure to call the base class's OnImagePositionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImageSizeChanged(System.EventArgs)">
            <summary>Raises the ImageSizeChanged event.</summary>
            <remarks>When overriding OnImageSizeChanged in a derived class, be sure to call the base class's OnImageSizeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnImageStyleChanged(System.EventArgs)">
            <summary>Raises the ImageStyleChanged event.</summary>
            <remarks>When overriding OnImageStyleChanged in a derived class, be sure to call the base class's OnImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnIntegralHeightChanged(System.EventArgs)">
            <summary>Raises the IntegralHeightChanged event.</summary>
            <remarks>When overriding OnIntegralHeightChanged in a derived class, be sure to call the base class's OnIntegralHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnItemHeightChanged(System.EventArgs)">
            <summary>Raises the ItemHeightChanged event.</summary>
            <remarks>When overriding OnItemHeightChanged in a derived class, be sure to call the base class's OnItemHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnMaxDropDownItemsChanged(System.EventArgs)">
            <summary>Raises the MaxDropDownItemsChanged event.</summary>
            <remarks>When overriding OnMaxDropDownItemsChanged in a derived class, be sure to call the base class's OnMaxDropDownItemsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnPreserveImageAspectRatioChanged(System.EventArgs)">
            <summary>Raises the PreserveImageAspectRatioChanged event.</summary>
            <remarks>When overriding OnPreserveImageAspectRatioChanged in a derived class, be sure to call the base class's OnPreserveImageAspectRatioChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnQueryImage(Xceed.Editors.QueryImageEventArgs)">
            <summary>Raises the QueryImage event.</summary>
            <remarks>When overriding OnQueryImage in a derived class, be sure to call the base class's OnQueryImage method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryImageEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnQueryItemText(Xceed.Editors.QueryItemTextEventArgs)">
            <summary>Raises the QueryItemText event.</summary>
            <param name="e">A QueryItemTextEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnSearchModeChanged(System.EventArgs)">
            <summary>Raises the SearchModeChanged event.</summary>
            <remarks>When overriding OnSearchModeChanged in a derived class, be sure to call the base class's OnSearchModeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>Raises the SelectedIndexChanged event.</summary>
            <remarks>When overriding OnSelectedIndexChanged in a derived class, be sure to call the base class's OnSelectedIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnSelectedItemChanged(System.EventArgs)">
            <summary>Raises the SelectedItemChanged event.</summary>
            <remarks>When overriding OnSelectedItemChanged in a derived class, be sure to call the base class's OnSelectedItemChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnSelectedValueChanged(System.EventArgs)">
            <summary>Raises the SelectedValueChanged event.</summary>
            <remarks>When overriding OnSelectedValueChanged in a derived class, be sure to call the base class's OnSelectedValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.OnValueMemberChanged(System.EventArgs)">
            <summary>Raises the ValueMemberChanged event.</summary>
            <remarks>When overriding OnValueMemberChanged in a derived class, be sure to call the base class's OnValueMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetAllowFreeText">
            <summary>Resets the value of the AllowFreeText property to its default value, DefaultAllowFreeText.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetColumnWidthAdjustment">
            <summary>Resets the value of the ColumnWidthAdjustment property to its default value, DefaultColumnWidthAdjustment.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetCompareType">
            <summary>Resets the value of the CompareType property to its default value, DefaultCompareType.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetDisplayFormat">
            <summary>Resets the value of the DisplayFormat property to its default value, DefaultDisplayFormat.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImageAlignment">
            <summary>Resets the value of the ImageAlignment property to its default value, DefaultImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImageMember">
            <summary>Resets the value of the ImageMember property to its default value, DefaultImageMember.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImagePadding">
            <summary>Resets the value of the ImagePadding property to its default value, DefaultImagePadding.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImagePosition">
            <summary>Resets the value of the ImagePosition property to its default value, DefaultImagePosition.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImageSize">
            <summary>Resets the value of the ImageSize property to its default value, DefaultImageSize.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetImageStyle">
            <summary>Resets the value of the ImageStyle property to its default value, DefaultImageStyle.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetItemHeight">
            <summary>Resets the value of the ItemHeight property to its default value, DefaultItemHeight.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetMaxDropDownItems">
            <summary>Resets the value of the MaxDropDownItems property to its default value, DefaultMaxDropDownItems.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetPreserveImageAspectRatio">
            <summary>Resets the value of the PreserveImageAspectRatio property to its default value, DefaultPreserveImageAspectRatio.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetSearchMode">
            <summary>Resets the value of the SearchMode property to its default value, DefaultSearchMode.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.ResetValueMember">
            <summary>Resets the value of the ValueMember property to its default value, DefaultValueMember.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.SetDataBinding(System.Object,System.String)">
            <summary>Sets the DataSource and DataMember properties at run time.</summary>
            <remarks>    The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the     WinComboBox, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the WinComboBox.</remarks>
            <param name="dataSource">The data source used to populate the WinComboBox, typed as Object.</param>
            <param name="dataMember">A string that specifies the table to bind to within the object returned by the DataSource property.</param>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.SetDropDownButtonDefaults(Xceed.Editors.WinButton)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Editors.WinComboBox.SetDropDownControlCore(System.Windows.Forms.Control)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.AllowFreeText">
            <summary>Gets or sets a value indicating if text other than combobox values can be entered into the combobox.</summary>
            <remarks>    The dropdown style of the WinCombBox control is     determined by the AllowFreeText property. If AllowFreeText is     set to true (default), any text can be written into the     WinComboBox, however pressing the Enter or TAB key will not     select an item in the dropdown. This is the equivalent of     setting the DropDownStyle property of the Windows Forms     ComboBox control to DropDown.     If AllowFreeText is set to false, only the first     letter of the items located in the dropdown can be entered into     the combobox. For example, pressing "S" will select the first     item in the dropdown that has an uppercase "S" as its first     letter. If no items begin with a uppercase "S", the current     item will remain the selected item. If an item begins with a     lowercase "s", it will not be selected in an uppercase "S" is     entered. This is the equivalent of setting the DropDownStyle     property of the Windows Forms ComboBox control to     DropDownList.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.Columns">
            <summary>Gets a list representing the collection of the columns contained in the WinComboBox.</summary>
            <remarks>    This property enables you to obtain a reference to the     list of columns that are currently stored in the WinComboBox.     With this reference, you can add columns, remove columns, and     obtain a count of the columns in the collection.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ColumnWidthAdjustment">
            <summary>Gets or sets a ColumnWidthAdjustment value defining how the widths of the columns in the combobox's dropdown are adjusted.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.CompareType">
            <summary>Gets or sets a value indicating how string representations of items (ComboBoxItem) contained in the combobox are considered.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DataMember">
            <summary>Gets or sets the table to bind to within the object returned by the DataSource property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DataSource">
            <summary>Gets or sets the data source used to populate the combobox.</summary>
            <remarks>    If the DataSource contains more than one table, you must     set the DataMember property to a string that represents the     name of the table to bind to.     The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and items are     added, removed, or modified in the jagged array from outside of     the combobox, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the combobox.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultAllowFreeText">
            <summary>Gets the default value of the AllowFreeText property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultColumnWidthAdjustment">
            <summary>Gets the default value of the ColumnWidthAdjustment property.</summary>
            <remarks>    When overriding DefaultColumnWidthAdjustment in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultCompareType">
            <summary>Gets the default value of the CompareType property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultDisplayFormat">
            <summary>Gets the default value of the DisplayFormat property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImageAlignment">
            <summary>Gets the default value of the ImageAlignment property.</summary>
            <remarks>    When overriding DefaultImageAlignment in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImageMember">
            <summary>Gets the default value of the ImageMember property.</summary>
            <remarks>    When overriding DefaultImageMember in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImagePadding">
            <summary>Gets the default value of the ImagePadding property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImagePosition">
            <summary>Gets the default value of the ImagePosition property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImageSize">
            <summary>Gets the default value of the ImageSize property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultImageStyle">
            <summary>Gets the default value of the ImageStyle property.</summary>
            <remarks>    When overriding DefaultImageStyle in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultItemHeight">
            <summary>Gets the default value of the ItemHeight property.</summary>
            <remarks>    When overriding DefaultItemHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultMaxDropDownItems">
            <summary>Gets the default value of the MaxDropDownItems property.</summary>
            <remarks>    When overriding DefaultMaxDropDownItems in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultPreserveImageAspectRatio">
            <summary>Gets the default value of the PreserveImageAspectRatio property.</summary>
            <remarks>When overriding DefaultPreserveImageAspectRatio in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultSearchMode">
            <summary>Gets the default value of the SearchMode property.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DefaultValueMember">
            <summary>Gets the default value of the ValueMember property.</summary>
            <remarks>    When overriding DefaultValueMember in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DisplayFormat">
            <summary>Gets or sets the format with which the SelectedItem is displayed in the combobox.</summary>
            <remarks>    The default display format is the names (Name) of each     column separated by a comma (,). For example, if the combobox     contains 3 columns named "LastName", "FirstName", and "Age",     the display format will be "LastName, FirstName, Age". When an     item is selected, the display format will be resolved to the     values of the correspond columns. For example: "Robitaille,     Naomi, 2".</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.DropDownControl">
            <summary>Gets the Xceed.Grid.GridControl used as the WinComboBox control's dropdown.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImageAlignment">
            <summary>Gets or sets the alignment of the WinComboBox's image.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImageMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the image.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImagePadding">
            <summary>Gets or sets the padding surrounding the image.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImagePosition">
            <summary>Gets or sets the position of the image in the WinComboBox.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImageSize">
            <summary>Gets or sets the size of the image.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ImageStyle">
            <summary>Gets or sets the style with which the image is displayed.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.IntegralHeight">
            <summary>Gets or sets a boolean value indicating if the height of the control should be adjusted to completely display the last visible item in the dropdown.</summary>
            <remarks>    The IntegralHeight property can also be considered as a     "vertical resizing step ratio". For example, if set to true,     when the dropdown is vertically resized, the step will be the     height of the individual child items resulting in the last     visible item always being completely displayed. If set to     false, the height of the dropdown will be adjusted pixel by     pixel thus allow for the last visible item to be partially     displayed.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ItemHeight">
            <summary>Gets or sets the height, in pixels, of each item in the combobox.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.Items">
            <summary>Gets a list representing the collection of the items contained in the WinComboBox.</summary>
            <remarks>    This property enables you to obtain a reference to the     list of items that are currently stored in the WinComboBox.     With this reference, you can add items, remove items, and     obtain a count of the items in the collection.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.MaxDropDownItems">
            <summary>Gets or sets the maximum number of items that can be shown in the combobox's dropdown.</summary>
            <remarks>    Even if set to -1, the space available to display the     items will be limited by the screen.     The value of this property is only taken into     consideration if the IntegralHeight property is set to     true.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.SearchMode">
            <summary>Gets or sets a value indicating the mode to use when searching for items in the combobox.</summary>
            <remarks>    To enable search mode, the AllowFreeText property must be     set to false.     Items are searched for according to their string     representation which is determined by the WinComboBox control's     DisplayFormat property. For example, let's assume that the     WinComboBox has 3 columns and 3 items with the following     values:                Plante, Martin, 34 Drimonakos, Mathieu, 24 Ledoux, Pierre-Luc, 25                    If the DisplayFormat property is set to "Column2         Column1 Column3", the string representation of the items         will be:                        Martin Plante 34 Mathieu Drimonakos 24 Pierre-Luc Ledoux 25                            Entering "p" in the WinComboBox control will             select "Pierre-Luc Ledoux 25" rather than "Martin             Plante 34" because the string representation of the             items is used rather than the physical order of the             values/colums. If the DisplayFormat had not been             modified, "Column1, Column2, Column3", "Plante, Martin,             34" would have been selected and not "Ledoux,             Pierre-Luc, 25".             The value of the CompareType property can             influence the search behavior. By default, the             CompareType property is set to CompareType.ExactMatch,             therefore cases and accents are respected. Setting the             CompareType property to CaseInsensitive,             AccentInsensitive, or both will change the way in which             items are searched for. For example, if the CompareType             property is set to AccentInsensitive, accents contained             in the string representation of an item will be             ignored, resulting in "ö" and "o" being considered as             equal values.              </remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.SelectedIndex">
            <summary>Gets the zero-based index of the SelectedItem in the Items collection.</summary>
            <remarks>If -1, an item is not selected.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.SelectedItem">
            <summary>Gets or sets the ComboBoxItem currently selected in the combobox's dropdown.</summary>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.SelectedValue">
            <summary>Gets or sets the value that is currently selected in the SelectedItem.</summary>
            <remarks>    The ValueMember property must be set to the field of the     data source from which to draw the value.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.TextBoxArea">
            <summary>Gets the ComboBoxTextBoxArea responsible for the text area of the WinComboBox control.</summary>
            <remarks>    The TextBoxArea must be used to handle events such as the     mouse, keyboard and validation events.</remarks>
        </member>
        <member name="P:Xceed.Editors.WinComboBox.ValueMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the value.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.AllowFreeTextChanged">
            <summary>Raised when the value of the AllowFreeText property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ColumnWidthAdjustmentChanged">
            <summary>Raised when the value of the ColumnWidthAdjustment property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.CompareTypeChanged">
            <summary>Raised when the value of the CompareType property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.DataBindingChanged">
            <summary>Raised when the values of the DataSource or DataMember properties are changed, or when the String) method is called.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.DataMemberChanged">
            <summary>Raised when the value of the DataMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.DataSourceChanged">
            <summary>Raised when the value of the DataSource property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.DisplayFormatChanged">
            <summary>Raised when the value of the DisplayFormat property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImageMemberChanged">
            <summary>Raised when the value of the ImageMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImagePositionChanged">
            <summary>Raised when the value of the ImagePosition property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.IntegralHeightChanged">
            <summary>Raised when the value of the IntegralHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ItemHeightChanged">
            <summary>Raised when the value of the ItemHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.MaxDropDownItemsChanged">
            <summary>Raised when the value of the MaxDropDownItems property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.QueryImage">
            <summary>Raised when the ImagePosition property is set to ImagePosition.Left or ImagePosition.Right and allows the image that is to be painted to be changed or modified.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.QueryItemText">
            <summary>Raised when the value of the QueryItemText property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.SearchModeChanged">
            <summary>Raised when the value of the SearchMode property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.SelectedIndexChanged">
            <summary>Raised when the value of the SelectedIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.SelectedItemChanged">
            <summary>Raised when the value of the SelectedItem property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.SelectedValueChanged">
            <summary>Raised when the value of the SelectedValue property is changed.</summary>
        </member>
        <member name="E:Xceed.Editors.WinComboBox.ValueMemberChanged">
            <summary>Raised when the value of the ValueMember property is changed.</summary>
        </member>
        <member name="T:Xceed.Editors.QueryImageEventHandler">
            <summary>Represents the method that will handle the QueryImage event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryImageEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Editors.QueryItemTextEventHandler">
            <summary>Represents the method that will handle the QueryItemText event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An QueryItemTextEventArgs that contains the event data.</param>
        </member>
        <member name="N:Xceed.Grid">
            <summary>The Xceed.Grid namespace regroups all the classes which make up Xceed Grid for .NET.</summary>
        </member>
        <member name="T:Xceed.Grid.ICellEditor">
            <summary>OBSOLETE: The ICellEditor interface is obsolete and has been replaced by the CellEditorManager class. Provides the functionality for a control to be used as a cell editor.</summary>
            <remarks>    Any class that derives from Control or a derived class     and implements the ICellEditor interface can be used as a cell     editor.The same instance of a class that implements the     ICellEditor interface should not be used on two     different grids!</remarks>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.ActivateControl(Xceed.Grid.Cell)">
            <summary>Activates the control that will be used to edit the content of a cell.</summary>
            <remarks>    ActivateControl is called beforeIFormatProvider)     and before the control is visible.</remarks>
            <param name="cell">A reference to a Cell object representing the cell to be edited.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.GetControlValue">
            <summary>Retrieves the value assigned to the control.</summary>
            <returns>A reference to the value assigned to the control.</returns>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.GetFittedHeight(Xceed.Grid.AutoHeightMode)">
            <summary>Retrieves a value representing the fitted height of the cell editor in pixels.</summary>
            <returns>A value representing the fitted height of the cell editor in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="mode">A value indicating in regards to what factors the fitted height of the row will be calculated.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.GetFittedWidth">
            <summary>Retrieves a value representing the fitted width of the cell editor in pixels.</summary>
            <returns>A value representing the fitted width of the cell editor in pixels. If -1, then no fitted width is required or desired.</returns>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.IsActivationChar(System.Char)">
            <summary>Retrieves a boolean value indicating if the control is activated by the char.</summary>
            <returns>true if the control is activated by the char; false otherwise.</returns>
            <remarks>    If true, the control is activated and will immediately     receive a KeyDown event for that char.</remarks>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.IsActivationKey(System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the control is activated by the key.</summary>
            <returns>true if the control is activated by the key; false otherwise.</returns>
            <remarks>    If true, the control is activated and will immediately     receive a KeyDown event for that key.</remarks>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the control recognizes.</summary>
            <returns>true if the character should be sent directly to the control and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.ICellEditor.SetControlValue(System.Object,System.IFormatProvider)">
            <summary>Assigns a value to the control.</summary>
            <remarks>SetControlValue is called after Cell).</remarks>
            <param name="value">A reference to the value being assigned to the control.</param>
            <param name="customFormatProvider">A reference to an object that implements the IFormatProvider interface. This object will be used to format value before it is assigned to the control. For example, a DateTimeFormatInfo could be used to format the date in short date mode prior to assigning it.</param>
        </member>
        <member name="P:Xceed.Grid.ICellEditor.Control">
            <summary>Gets the control used to edit cells.</summary>
        </member>
        <member name="P:Xceed.Grid.ICellEditor.HandleActivationClick">
            <summary>Gets or sets a boolean value indicating if the control should handle the mouse click once it is activated.</summary>
            <remarks>Only in the case where the cell editor is InPlace does it make sense to return true.</remarks>
        </member>
        <member name="P:Xceed.Grid.ICellEditor.InPlace">
            <summary>Gets a boolean value indicating if the rectangle of the cell editor should be painted with the same size as the cell's client rectangle.</summary>
        </member>
        <member name="T:Xceed.Grid.ICellViewer">
            <summary>OBSOLETE: The ICellViewer interface is obsolete and has been replaced by the CellViewerManager class. Provides the functionality for a control to be used to view to content of cells.</summary>
            <remarks>    Any class that derives from Control or a derived class     and implements the ICellViewer interface can be used as a cell     viewer.</remarks>
        </member>
        <member name="M:Xceed.Grid.ICellViewer.GetFittedHeight(Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode)">
            <summary>Retrieves a value representing the fitted height of the cell viewer in pixels.</summary>
            <returns>A value representing the fitted height of the cell viewer in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="cell">A reference to the Cell object whose content will be viewed using the cell viewer.</param>
            <param name="mode">A value indicating in regards to what factors the fitted height of the row will be calculated.</param>
        </member>
        <member name="M:Xceed.Grid.ICellViewer.GetFittedWidth(Xceed.Grid.Cell)">
            <summary>Retrieves a value representing the fitted width of the cell viewer in pixels.</summary>
            <returns>A value representing the fitted width of the cell viewer in pixels. If -1, then no fitted width is required or desired.</returns>
            <param name="cell">A reference to the Cell object whose content will be viewed using the cell viewer.</param>
        </member>
        <member name="M:Xceed.Grid.ICellViewer.PaintCellValue(Xceed.Grid.GridPaintEventArgs,Xceed.Grid.Cell)">
            <summary>Paints the value of cell.</summary>
            <returns>true if the viewer painted the cell's content; false if the viewer was not able to paint the cell's content and wants the cell to paint itself.</returns>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
            <param name="cell">A reference to the Cell object whose value is to be painted.</param>
        </member>
        <member name="T:Xceed.Grid.AutoHeightMode">
            <summary>A value indicating what the default height of the row will be in the case where its Height property is not explicitly set.</summary>
        </member>
        <member name="F:Xceed.Grid.AutoHeightMode.None">
            <summary>The height of the row will be 17 pixels.</summary>
        </member>
        <member name="F:Xceed.Grid.AutoHeightMode.Minimum">
            <summary>The height required to display one line of text depending on the value of the Font property.</summary>
        </member>
        <member name="F:Xceed.Grid.AutoHeightMode.AllContent">
            <summary>The height required to display the entire content of a row.</summary>
        </member>
        <member name="T:Xceed.Grid.AutoWidthMode">
            <summary>This enumeration is reserved for future use.</summary>
        </member>
        <member name="F:Xceed.Grid.AutoWidthMode.None">
            <summary>This value is reserved for future use.</summary>
        </member>
        <member name="T:Xceed.Grid.CellEditorDisplayConditions">
            <summary>Value representing under what conditions cell editors are displayed.</summary>
            <remarks>    When a cell editor is displayed, it is not necessarily     activated. A cell editor is activated when it is editing the     contents of its associated cell.     CellEditorDisplayConditions.Always,     CellEditorDisplayConditions.MouseOverCell, and     CellEditorDisplayConditions.MouseOverRow will only function in     the case where CreateControlMode is set to     CreateControlMode.ClonedInstance.</remarks>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.None">
            <summary>A cell's editor is only displayed when the cell is being edited.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.MouseOverCell">
            <summary>A cell's editor is displayed when the mouse passes over a cell. MouseOverCell will only function in the case where CreateControlMode is set to CreateControlMode.ClonedInstance.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.MouseOverRow">
            <summary>The cell editors of each cell in a row are displayed when the mouse passes over a row. MouseOverRow will only function in the case where CreateControlMode is set to CreateControlMode.ClonedInstance.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.RowIsBeingEdited">
            <summary>The cell editors of each cell in a row are displayed when one of the cells in the row is being edited.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.RowIsCurrent">
            <summary>The cell editors of each cell in the CurrentRow are displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.CellIsCurrent">
            <summary>The editor of the current cell is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.CellEditorDisplayConditions.Always">
            <summary>    The cell editors of each cell in the grid are always     displayed. Always will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting the CellEditorDisplayConditions property to     Always will have a significant negative impact on     performance.</summary>
        </member>
        <member name="T:Xceed.Grid.ColumnTypes">
            <summary>Value representing the column types which will be cleared from the grid's list of columns. This enumeration is used only by the Clear method.</summary>
        </member>
        <member name="F:Xceed.Grid.ColumnTypes.DataBound">
            <summary>Only data bound columns.</summary>
        </member>
        <member name="F:Xceed.Grid.ColumnTypes.Unbound">
            <summary>Only unbound columns.</summary>
        </member>
        <member name="T:Xceed.Grid.CreateControlMode">
            <summary>Value representing how a CellEditorManager creates the control used to edit the contents of a cell.</summary>
        </member>
        <member name="F:Xceed.Grid.CreateControlMode.SingleInstance">
            <summary>The same instance of the control is always reused.</summary>
        </member>
        <member name="F:Xceed.Grid.CreateControlMode.ClonedInstance">
            <summary>A new instance of the control is created.</summary>
        </member>
        <member name="T:Xceed.Grid.ErrorBehaviors">
            <summary>Value representing the behaviors displayed by the grid when an error occurs.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.None">
            <summary>No error behavior.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowSelectorBlink">
            <summary>The row selector of the row that contains an error will blink.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowSelectorIcon">
            <summary>An icon will be displayed in the row selector of the row that contains an error.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowSelectorToolTip">
            <summary>A tooltip will be displayed for the row selector of the row that contains an error.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowBlink">
            <summary>The row that contains an error will blink.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowColor">
            <summary>The background and foreground colors of the row that contains an error will change.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.RowToolTip">
            <summary>A tooltip will be displayed for the row that contains an error.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.CellBlink">
            <summary>The cell that contains an error will blink.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.CellColor">
            <summary>The background and foreground colors of the cell that contains an error will change.</summary>
        </member>
        <member name="F:Xceed.Grid.ErrorBehaviors.CellToolTip">
            <summary>A tooltip will be displayed for the cell that contains an error.</summary>
        </member>
        <member name="T:Xceed.Grid.GridScrollBars">
            <summary>Specifies the type of scroll bars to display in a grid.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.Both">
            <summary>Display both a horizontal and a vertical scroll bar when needed.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.Horizontal">
            <summary>Display a horizontal scroll bar only when needed.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.Vertical">
            <summary>Display a vertical scroll bar only when needed.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.ForcedBoth">
            <summary>Always display both a horizontal and a vertical scroll bar.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.ForcedHorizontal">
            <summary>Always display a horizontal scroll bar.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.ForcedVertical">
            <summary>Always display a vertical scroll bar.</summary>
        </member>
        <member name="F:Xceed.Grid.GridScrollBars.None">
            <summary>No scroll bars are displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridSection">
            <summary>Value representing various sections of the grid in which a row can be located.</summary>
        </member>
        <member name="F:Xceed.Grid.GridSection.Current">
            <summary>The section in which the row is currently located.</summary>
        </member>
        <member name="F:Xceed.Grid.GridSection.FixedHeader">
            <summary>The grid's FixedHeaderRows section.</summary>
        </member>
        <member name="F:Xceed.Grid.GridSection.Body">
            <summary>The grid's body section. This section includes the grid's scrollable header and footer sections.</summary>
        </member>
        <member name="F:Xceed.Grid.GridSection.FixedFooter">
            <summary>The grid's FixedFooterRows section.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupByCellLayout">
            <summary>Value representing the layout of the cells in a GroupByRow.</summary>
        </member>
        <member name="F:Xceed.Grid.GroupByCellLayout.Flat">
            <summary>The cells are aligned in a straight row.</summary>
        </member>
        <member name="F:Xceed.Grid.GroupByCellLayout.Hierarchical">
            <summary>The cells are aligned in a hierarchical manner.</summary>
        </member>
        <member name="T:Xceed.Grid.HorizontalAlignment">
            <summary>Value indicating the horizontal alignment of a grid element's content.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalAlignment.Left">
            <summary>Content is horizontally aligned on the left.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalAlignment.Center">
            <summary>Content is horizontally aligned at the center</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalAlignment.Right">
            <summary>Content is horizontally aligned on the right.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalAlignment.Default">
            <summary>Default horizontal alignment. If grid element contains a numeric datatype, content is aligned on the right; otherwise content is aligned on the left.</summary>
        </member>
        <member name="T:Xceed.Grid.HorizontalDirection">
            <summary>Value indicating the direction in which the CurrentCell and CurrentColumn can be moved.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.Leftmost">
            <summary>Moves the current cell or column so that it is leftmost cell or column in the grid.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.Rightmost">
            <summary>Moves the current cell or column so that it is rightmost cell or column in the grid.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.Left">
            <summary>Moves the current cell or column one over to the left.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.Right">
            <summary>Moves the current cell or column one over to the right.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.PageLeft">
            <summary>Moves the current cell or column one page left.</summary>
        </member>
        <member name="F:Xceed.Grid.HorizontalDirection.PageRight">
            <summary>Moves the current cell or column one page right.</summary>
        </member>
        <member name="T:Xceed.Grid.ImageArea">
            <summary>Value representing the area where a CellViewerManager's image is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageArea.None">
            <summary>No image is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageArea.Left">
            <summary>The image is displayed to the left of the text.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageArea.Right">
            <summary>The image is displayed to the right of the text.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageArea.AllContent">
            <summary>The image is displayed across the entire CellViewerManager and no text is displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.ImageStyle">
            <summary>Value indicating the style in which an image is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageStyle.Stretch">
            <summary>The image is stretched to fit the available area.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageStyle.Tile">
            <summary>The image is repeated until the entire available area is filled.</summary>
        </member>
        <member name="F:Xceed.Grid.ImageStyle.Align">
            <summary>The image is aligned according to the value of the element's BackgroundImageAlignment or the grid's BackgroundImageAlignment property.</summary>
        </member>
        <member name="T:Xceed.Grid.RowLocation">
            <summary>Value indicating the section of the grid or group in which a row is located.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.FixedHeader">
            <summary>The row is located in the grid's FixedHeaderRows section.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.Header">
            <summary>The row is located in either the grid's HeaderRows section or the parent group's HeaderRows section. To determine if the row is located in the grid's or the parent group's header section, the row's ParentGroup property can be consulted. If it is $$NULL$$ then it is located in the grid's header section; otherwise, it is located in the parent group's header section.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.Data">
            <summary>The row is located in either the grid's DataRows section or in the parent group's DataRows (Boolean)). To determine if the row is located in the grid's or the parent group's DataRows section, the row's ParentGroup property can be consulted. If it is $$NULL$$ then it is located in the grid's DataRows section; otherwise, it is located in the parent group's DataRows section.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.Footer">
            <summary>The row is located in either the grid's FooterRows section or the parent group's FooterRows section. To determine if the row is located in the grid's or the parent group's footer section, the row's ParentGroup property can be consulted. If it is $$NULL$$ then it is located in the grid's footer section; otherwise, it is located in the parent group's footer section.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.FixedFooter">
            <summary>The row is located in the grid's FixedFooterRows section.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.None">
            <summary>The row is not associated with a parent group or grid.</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.DataRowTemplate">
            <summary>The row is the DataRowTemplate of the parent DetailGrid (ParentGrid).</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.BottomMargin">
            <summary>The row is the BottomMargin of the parent DetailGrid (ParentGrid).</summary>
        </member>
        <member name="F:Xceed.Grid.RowLocation.TopMargin">
            <summary>The row is the TopMargin of the parent DetailGrid (ParentGrid).</summary>
        </member>
        <member name="T:Xceed.Grid.ScrollDirection">
            <summary>Value indicating the direction in which to scroll the grid.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.LeftmostPage">
            <summary>Scrolls the grid to bring the leftmost page into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.RightmostPage">
            <summary>Scrolls the grid to bring the rightmost page into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.Right">
            <summary>Scrolls the grid to bring the first non-visible column on the right into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.Left">
            <summary>Scrolls the grid to bring the first non-visible column on the left into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.PageRight">
            <summary>Scrolls the grid to bring the next non-visible page on the right into view. A page, in the case, represents a series of columns. For example, if a grid contains 16 columns and only the first 4 are visible, scrolling page right will bring the next 4 columns into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.PageLeft">
            <summary>Scrolls the grid to bring the next non-visible page on the left into view. A page, in this case, represents a series of columns. For example, if a grid contains 16 columns and only the last 4 are visible, scrolling page left will bring the previous 4 columns into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.TopPage">
            <summary>Scrolls the grid to bring the first top page into view. A page, in this case, represents a series of rows. For example, if a grid contains 1000 rows and only the last 100 are visible, scrolling to the top page will bring the first 100 rows into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.BottomPage">
            <summary>Scrolls the grid to bring the last bottom page into view. A page, in this case, represents a series of rows. For example, if a grid contains 1000 rows and only the first 100 are visible, scrolling to the bottom page will bring the last 100 rows into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.Down">
            <summary>Scrolls the grid to bring the first non-visible row at the bottom into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.Up">
            <summary>Scrolls the grid to bring the first non-visible row at the top into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.PageDown">
            <summary>Scrolls the grid to bring the next non-visible page at the bottom into view. A page, in this case, represents a series of rows. For example, if a grid contains 1000 rows and only the first 100 are visible, scrolling page down will bring the next 100 rows into view.</summary>
        </member>
        <member name="F:Xceed.Grid.ScrollDirection.PageUp">
            <summary>Scrolls the grid to bring the next non-visible page at the top into view. A page, in this case, represents a series of rows. For example, if a grid contains 1000 rows and only the last 100 are visible, scrolling page up will bring the previous 100 rows into view.</summary>
        </member>
        <member name="T:Xceed.Grid.ShowFixedColumnSplitter">
            <summary>Value representing when the FixedColumnSplitter or FixedColumnSplitter is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.ShowFixedColumnSplitter.Always">
            <summary>The fixed column splitter is always displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.ShowFixedColumnSplitter.WhenFixedColumnsExist">
            <summary>The fixed column splitter is only displayed when fixed columns exist.</summary>
        </member>
        <member name="T:Xceed.Grid.ShowPlusMinus">
            <summary>Value indicating whether plus-sign (+) and minus-sign (-) buttons are displayed next to DataRows.</summary>
        </member>
        <member name="F:Xceed.Grid.ShowPlusMinus.WhenDetailGridPresent">
            <summary>The plus-sign (+) and minus-sign (-) buttons are only present when the DataRow contains one or more child DetailGrids.</summary>
        </member>
        <member name="F:Xceed.Grid.ShowPlusMinus.Never">
            <summary>The plus-sign (+) and minus-sign (-) buttons are never displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.SortDirection">
            <summary>Value indicating the direction in which an element is sorted.</summary>
        </member>
        <member name="F:Xceed.Grid.SortDirection.None">
            <summary>The element is not sorted.</summary>
        </member>
        <member name="F:Xceed.Grid.SortDirection.Ascending">
            <summary>The element is sorted in an ascending direction.</summary>
        </member>
        <member name="F:Xceed.Grid.SortDirection.Descending">
            <summary>The element is sorted in an descending direction.</summary>
        </member>
        <member name="T:Xceed.Grid.StatFunction">
            <summary>Value representing the statistical function used by a SummaryCell to calculate its value.</summary>
            <remarks>    If the SummaryCell's StatFunction property is set to     StatFunction.None, the cell will, by default, not be visible.     $$NULL$$ and dbNull value are not considered     in the statistical functions.     In statistics, a statistical population is a set of     entities concerning which statistical inferences are to be     drawn, often based on a random sample taken from the     population. For example, if we were interested in     generalizations about crows, then we would describe the set of     crows that is of interest. Notice that if we choose a     population like all crows, we will be limited to observing     crows that exist now or will exist in the future. Probably,     geography will also constitute a limitation in that our     resources for studying crows are also limited.     "Population" is also used to refer to a set of     measurements or values. Suppose, for example, we are interested     in the set of all adult crows now alive in the county of Kent,     and we want to know the mean weight of these birds. For each     bird in the population of crows there is a weight, and the set     of these weights is called the "population of weights".     A sample is that part of a population which is actually     observed. In normal scientific practice, we demand that it be     selected in such a way as to avoid presenting a biased view of     the population. If statistical inference is to be used, there     must be a way of assigning known probabilities of selection to     each sample. If the probabilities of different samples are all     equal, for example, the method is called simple random     sampling.     Information taken from Wikipedia</remarks>
        </member>
        <member name="F:Xceed.Grid.StatFunction.None">
            <summary>No statistical function is used.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Minimum">
            <summary>    The value of the item with the lowest value among a set     of items.     If a object that implements the IComparable interface is     assigned to the DataComparer property of the column represented     by StatFieldName, it will be used to calculate the minimum     value.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Maximum">
            <summary>    The value of the item with the highest value among a set     of items.     If a object that implements the IComparable interface is     assigned to the DataComparer property of the column represented     by StatFieldName, it will be used to calculate the maximum     value.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Count">
            <summary>The result of a tally that reveals the number of items in a set.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Sum">
            <summary>The result of the addition of the values of a set of items.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Average">
            <summary>The measure of central tendancy of a set of values computed by dividing the sum of the values by their number; commonly called the arithmetic mean or the average.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Variance">
            <summary>The variance of a random sample variable is a non-negative number which gives an idea of how widely spread the values of the random variable are likely to be; the larger the variance, the more scattered the observations on average.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.VariancePopulation">
            <summary>The variance of a random population variable is a non-negative number which gives an idea of how widely spread the values of the random variable are likely to be; the larger the variance, the more scattered the observations on average.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.StandardDeviation">
            <summary>A measure of the degree of dispersion of sample data from the mean value.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.StandardDeviationPopulation">
            <summary>A measure of the degree of dispersion of population data from the mean value.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Median">
            <summary>The middle number in a set of ordered data. If the set contains an even number of items, the arithmetic mean of the 2 middle values will be returned.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.Mode">
            <summary>    The value that has the largest number of observations,     namely the most frequent value or values. The mode is not     necessarily unique, unlike the arithmetic mean.     The mode can be calculated for any type of data. In the     case of a multimodal set of values, only one of the mode will     be returned. Ex. : [1, 2, 2, 6, 6] is bimodal (2 and 6) and the     function will return either 2 or 6.     Nothing will be returned if all the items in the set are     unique.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.HarmonicMean">
            <summary>    The number of elements to be averaged divided by the sum     of the reciprocals of the elements.     The harmonic mean can only be calculated on elements     whose values are greater than 0. If the set contains an element     whose value is less than or equal to 0, then OverflowErrorText     will be displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.GeometricMean">
            <summary>    The geometric mean of a set of positive data is defined     as the product of all the members of the set, raised to a power     equal to the reciprocal of the number of members.     The geometric mean can only be calculated on elements     whose values are greater than 0. If the set contains an element     whose value is less than or equal to 0, then OverflowErrorText     will be displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.StatFunction.RootMeanSquare">
            <summary>The square root of the arithmetical average of a set of squared instantaneous values. The root mean square is also known as the quadratic mean.</summary>
        </member>
        <member name="T:Xceed.Grid.TitlePosition">
            <summary>Value representing the position of a SummaryCell's Title.</summary>
            <remarks>    A SummaryCell's Title is displayed to the left or right     of the cell in the space reserved for the immediate adjoining     left or right sibling SummaryCell. If the adjoining     SummaryCells are visible (by default, they are not), the cell's     Title will not be drawn.     By default, a SummaryCell's Title is aligned to the right     if it is drawn in the adjoining left sibling cell, or to the     left if it is drawn in the adjoining right sibling cell.     If the titles of two SummaryCells are to be written in     the same space, the space will be divided into two equal     halves.</remarks>
        </member>
        <member name="F:Xceed.Grid.TitlePosition.AlwaysLeft">
            <summary>Always position the SummaryCell's Title in the space reserved for the immediate adjoining left cell. If the cell to the immediate left is visible, the title will not be displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.TitlePosition.AlwaysRight">
            <summary>Always position the SummaryCell's Title in the space reserved for the immediate adjoining right cell. If the cell to the immediate right is visible, the title will not be displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.TitlePosition.PreferablyLeft">
            <summary>Preferably position the SummaryCell's Title in the space reserved for the immediate adjoining left cell. If the cell to the immediate left is visible, the title will be displayed in the space reserved for the immediate adjoining right cell if it is not visible, otherwise the title will not be displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.TitlePosition.PreferablyRight">
            <summary>Preferably position the SummaryCell's Title in the space reserved for the immediate adjoining rightcell. If the cell to the immediate right is visible, the title will be displayed in the space reserved for the immediate adjoining left cell if it is not visible, otherwise the title will not be displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.UIVirtualizationMode">
            <summary>Value representing the UI virtualization mode used by the grid.</summary>
        </member>
        <member name="F:Xceed.Grid.UIVirtualizationMode.None">
            <summary>No UI virutalization is used.</summary>
        </member>
        <member name="F:Xceed.Grid.UIVirtualizationMode.Cells">
            <summary>Cells are virtualized.</summary>
        </member>
        <member name="T:Xceed.Grid.VerticalAlignment">
            <summary>Value indicating the vertical alignment of a grid element's content.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalAlignment.Top">
            <summary>Content is vertically aligned at the top.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalAlignment.Center">
            <summary>Content is vertically aligned at the center.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalAlignment.Bottom">
            <summary>Content is vertically aligned at the bottom.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalAlignment.Default">
            <summary>Default vertical alignment: Content is aligned at the top.</summary>
        </member>
        <member name="T:Xceed.Grid.VerticalDirection">
            <summary>Value indicating the direction in which the CurrentRow can be moved.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.Top">
            <summary>Moves the current row to the top of a GridSection section.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.Bottom">
            <summary>Moves the current row to the bottom of a GridSection section.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.Up">
            <summary>Moves the current row one row up.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.Down">
            <summary>Moves the current row one row down.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.PageUp">
            <summary>Moves the current row one page up.</summary>
        </member>
        <member name="F:Xceed.Grid.VerticalDirection.PageDown">
            <summary>Moves the current row one page down.</summary>
        </member>
        <member name="T:Xceed.Grid.VisualGridElementState">
            <summary>    A value representing the current state of a     VisualGridElement.</summary>
        </member>
        <member name="F:Xceed.Grid.VisualGridElementState.Idle">
            <summary>The default state of the visual grid element.</summary>
        </member>
        <member name="F:Xceed.Grid.VisualGridElementState.Selection">
            <summary>The visual grid element is selected.</summary>
        </member>
        <member name="F:Xceed.Grid.VisualGridElementState.InactiveSelection">
            <summary>The visual grid element is selected but inactive.</summary>
        </member>
        <member name="F:Xceed.Grid.VisualGridElementState.Error">
            <summary>The visual grid element is in an error state.</summary>
        </member>
        <member name="F:Xceed.Grid.VisualGridElementState.Hot">
            <summary>The visual grid element is hot.</summary>
        </member>
        <member name="T:Xceed.Grid.Borders">
            <summary>A structure representing the borders of a visual grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.Borders.#ctor">
            <summary>Initializes a new Borders stucture representing, in pixels, the thickness of the left, top, right and bottom borders of a visual grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.Borders.#ctor(System.Int32)">
            <summary>Initializes a new Borders structure with the left, top, right and bottom borders all having the same thickness.</summary>
            <param name="all">A value representing the thickness, in pixels, of the left, top, right and bottom borders of a visual grid element.</param>
        </member>
        <member name="M:Xceed.Grid.Borders.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new Borders stucture representing, in pixels, the thickness of the left, top, right and bottom borders of a visual grid element.</summary>
            <param name="left">The thickness, in pixels, of the left border.</param>
            <param name="top">The thickness, in pixels, of the top border.</param>
            <param name="right">The thickness, in pixels, of the right border.</param>
            <param name="bottom">The thickness, in pixels, of the bottom border.</param>
        </member>
        <member name="P:Xceed.Grid.Borders.Bottom">
            <summary>Gets or sets a value representing the thickness, in pixels, of the bottom border.</summary>
        </member>
        <member name="P:Xceed.Grid.Borders.Left">
            <summary>Gets or sets a value representing the thickness, in pixels, of the left border.</summary>
        </member>
        <member name="P:Xceed.Grid.Borders.Right">
            <summary>Gets or sets a value representing the thickness, in pixels, of the right border.</summary>
        </member>
        <member name="P:Xceed.Grid.Borders.Top">
            <summary>Gets or sets a value representing the thickness, in pixels, of the top border.</summary>
        </member>
        <member name="F:Xceed.Grid.Borders.Empty">
            <summary>Represents an empty Borders structure.</summary>
            <remarks>    The structure created is the equivalent of Borders( 0, 0,     0, 0 );</remarks>
        </member>
        <member name="T:Xceed.Grid.AddingDataRowEventArgs">
            <summary>Provides information on the current DataRow object being built.</summary>
            <remarks>    When bound to a data source, the DetailGrid's     AddingDataRow event and the grid's AddingDataRow event are     raised for each row found in the data source. When in unbound     mode (providing data manually), it is raised once for each     DataRow added using the AddNew method afterEndEdit is     called in order to provide data to each cell in the row.</remarks>
        </member>
        <member name="M:Xceed.Grid.AddingDataRowEventArgs.#ctor(Xceed.Grid.DataRow)">
            <summary>Provides information on the current DataRow object being built.</summary>
            <param name="dataRow">A reference to the DataRow object being built.</param>
        </member>
        <member name="P:Xceed.Grid.AddingDataRowEventArgs.DataRow">
            <summary>Gets a reference to the DataRow object being built.</summary>
        </member>
        <member name="T:Xceed.Grid.ApplyToDesignerAttribute">
            <summary>Specifies whether the property this attribute is bound to must also be represented in the Grid Designer. If this attribute is not set, false is assumed.</summary>
        </member>
        <member name="M:Xceed.Grid.ApplyToDesignerAttribute.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the ApplyToDesignerAttribute class specifying if the attribute should be applied.</summary>
            <param name="apply">true if the attribute must be applied; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.ApplyToDesignerAttribute.ApplyToDesigner">
            <summary>Gets a boolean value indicating if the property should be represented in the Grid Designer.</summary>
        </member>
        <member name="F:Xceed.Grid.ApplyToDesignerAttribute.No">
            <summary>Specifies that a property will not be represented at design time in the Grid Designer. This static field is read-only.</summary>
            <remarks>By default, properties are not represented at design time in the Grid Designer.</remarks>
        </member>
        <member name="F:Xceed.Grid.ApplyToDesignerAttribute.Yes">
            <summary>Specifies that a property will be represented at design time in the Grid Designer. This static field is read-only.</summary>
        </member>
        <member name="T:Xceed.Grid.Cell">
            <summary>Represents any type of cell in the grid. The DataCell, InsertionCell, ValueCell, SummaryCell, and ColumnManagerCell all derive from this class.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.BringIntoView">
            <summary>Brings the cell into the visible area of the grid.</summary>
            <remarks>    The cell will always be brought into view, no matter its     state or its parent state. For example, if the cell is in a     collapsed group, the group will be expanded.</remarks>
        </member>
        <member name="M:Xceed.Grid.Cell.CreateInstance">
            <summary>Must create a new Cell object that is a copy of the current instance.</summary>
            <returns>Should return a reference to the newly create Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.Cell.EnterEdit">
            <summary>Enter edit mode.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.EnterEdit">
            <summary>Enter edit mode.</summary>
            <remarks>    If the cell is not the current cell, then it will be made     current and brought into view.     The appropriate cell editor will be initialized depending     on the datatype of the cell's content.     If the cell's, or its ambient parent's, ReadOnly property     is set to true, then an exception will be thrown when calling     EnterEdit.</remarks>
        </member>
        <member name="M:Xceed.Grid.Cell.EnterEdit(System.Windows.Forms.MouseButtons,System.Drawing.Point)">
            <summary>Enter edit mode and raise the cell editor's MouseDown event.</summary>
            <remarks>    If the cell is not the current cell, then it will be made     current and brought into view.     The appropriate cell editor will be initialized depending     on the datatype of the cell's content.     If the cell's, or its ambient parent's, ReadOnly property     is set to true, then an exception will be thrown when calling     EnterEdit.</remarks>
            <param name="mouseButton">A MouseButtons value that will be used in the cell editor's MouseDown event. The cell editor's HandleActivationClick property must be set to true.</param>
            <param name="mousePosition">A Point representing the position of the mouse. The cell editor's HandleActivationClick property must be set to true.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.GetDisplayBackColor">
            <summary>OBSOLETE: The GetDisplayBackColor method is obsolete and has been replaced by the VisualGridElementState) method. Retrieves the color that will be used as the cell's background color depending on its state</summary>
            <returns>A Color structure representing the background color of the cell depending on its state. Unless overridden, if the cell is selected and the grid has focus, SelectionBackColor is returned. If the grid does not have focus, InactiveSelectionBackColor is returned. Otherwise BackColor.</returns>
        </member>
        <member name="M:Xceed.Grid.Cell.GetDisplayForeColor">
            <summary>OBSOLETE: The GetDisplayForeColor method is obsolete and has been repaced by the VisualGridElementState) method. Retrieves the color that will be used as the cell's foreground color depending on its state</summary>
            <returns>A Color structure representing the foreground color of the cell depending on its state. Unless overridden, if the cell is selected and the grid has focus, SelectionForeColor is returned. If the grid does not have focus, InactiveSelectionForeColor is returned. Otherwise ForeColor.</returns>
        </member>
        <member name="M:Xceed.Grid.Cell.GetDisplayText">
            <summary>Retrieves the formatted text displayed by the cell.</summary>
            <returns>A string representing the formatted text (Value).</returns>
            <remarks>    The text (Value) will be formatted according to the     FormatProvider and FormatSpecifier properties.     If a CellViewerManager is assigned to the cell's     CellViewerManager property, GetDisplayText will return the text     as it is displayed/formatted by the CellViewerManager.     If the CellViewerManager does not display text, for     example, the ImageViewer, GetDisplayText will return     string.Empty.</remarks>
        </member>
        <member name="M:Xceed.Grid.Cell.GetDisplayTextCore">
            <summary>Retrieves the formatted text displayed by the cell.</summary>
            <returns>A string representing the formatted text (Value).</returns>
            <remarks>    The text (Value) will be formatted according to the     FormatProvider and FormatSpecifier properties.</remarks>
        </member>
        <member name="M:Xceed.Grid.Cell.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the cell in pixels.</summary>
            <returns>The fitted height of the cell in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the cell will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">The Graphics object used to paint the cell.</param>
            <param name="printing">true if the cell is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.GetFittedDisplayWidth(Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted width of the cell in pixels.</summary>
            <returns>A value containing the fitted width of the cell, including its Borders, in pixels.</returns>
            <remarks>    The fitted width of the cell represents the width     necessary to display the cell's data on one line, regardless of     the value of the WordWrap property.</remarks>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint the cell.</param>
            <param name="printing">true if the cell is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.GetFittedHeight(Xceed.Grid.AutoHeightMode)">
            <summary>Retrieves the fitted height of the cell in pixels.</summary>
            <returns>A value containing the fitted height of the cell, including its Borders, in pixels. If mode is set to AllContent and the value of the cell is $$NULL$$, DBNull or Empty, then the equivalent of calling GetFittedHeight with Minimum is returned.</returns>
            <remarks>    The fitted height of the cell is calculated in regards to     the current width of its parent column, taking into     consideration the WordWrap property only if mode is set to     AllContent.     If the WordWrap property is set to true, then the fitted     height of the cell will represent the height needed to display     all cell's content appropriately. If the WordWrap     property is set to false, then the fitted height of the cell     will represent the height needed to display only one     line of data in the cell.     If the parent row's FitHeightToEditors is true, then the     height of the cell's editor will be consulted and if its height     is greater than the height of the viewer, then the fitted     height of the editor will be used.</remarks>
            <param name="mode">A value indicating in regards to what factors the fitted height of the cell will be calculated.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.GetFittedWidth">
            <summary>Retrieves the fitted width of the cell in pixels.</summary>
            <returns>A value containing the fitted width of the cell, including its Borders, in pixels.</returns>
            <remarks>    The fitted width of the cell represents the width     necessary to display the cell's data on one line, regardless of     the value of the WordWrap property.     The GetFittedWidth method must be called outside of the     calls to BeginInit and EndInit methods because the data is not     loaded into the grid until EndInit is called therefore, the     fitted width cannot be calculated until that moment.</remarks>
        </member>
        <member name="M:Xceed.Grid.Cell.GetTextToPaint">
            <summary>OBSOLETE: The GetTextToPaint method is obsolete. If the GetTextToPaint method was overridden, then the GetDisplayTextCore method should be used. If the GetTextToPaint method was used directly, then the GetDisplayText method should be used. Retrieves the formatted text to paint in the cell. This does not necessarily correspond to Value.</summary>
            <returns>The formatted text to paint in the cell. The text is formatted according to the FormatProvider and FormatSpecifier properties. In the case where no FormatProvider or FormatSpecifier is specified, neither on the cell nor parent column, Cell.Value.ToString() is returned. If the cell Value is NullValue, NullText is returned.</returns>
        </member>
        <member name="M:Xceed.Grid.Cell.GetValidationExpression">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.GetValue">
            <summary>Retrieves the value assigned to the cell.</summary>
            <returns>The value assigned to the cell.</returns>
        </member>
        <member name="M:Xceed.Grid.Cell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.InputValidatorValidateAndSetErrorParameters(System.Delegate,System.Boolean,System.Boolean,System.Object[],System.Drawing.Icon,System.Int32,System.Windows.Forms.ErrorBlinkStyle)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Cell.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the cell recognizes.</summary>
            <returns>true if the character should be sent directly to the grid and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Returns a boolean value indicating if the key(s) pressed is an input key for the cell.</summary>
            <returns>true if the key(s) pressed in an input key; false otherwise.</returns>
            <param name="keyData">A Keys value specifying the key code and modifier of the key(s) that was pressed.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.LeaveEdit(System.Boolean)">
            <summary>Stops the edition of the cell.</summary>
            <param name="commit">true ( default ) if the modifications should be applied. false if the modifications made to the cell should be canceled.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCanBeCurrentChanged(System.EventArgs)">
            <summary>Raises the CanBeCurrentChanged event.</summary>
            <remarks>When overriding OnCanBeCurrentChanged in a derived class, be sure to call the base class's OnCanBeCurrentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCellEditorChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnCellEditorChanged method is obsolete and has been replaced by the EventArgs) method. Raises the CellEditorChanged event.</summary>
            <remarks>When overriding OnCellEditorChanged in a derived class, be sure to call the base class's OnCellEditorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCellEditorDisplayConditionsChanged(System.EventArgs)">
            <summary>Raises the CellEditorDisplayConditionsChanged event.</summary>
            <remarks>When overriding OnCellEditorDisplayConditionsChanged in a derived class, be sure to call the base class's OnCellEditorDisplayConditionsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCellEditorManagerChanged(System.EventArgs)">
            <summary>Raises the CellEditorManagerChanged event.</summary>
            <remarks>When overriding OnCellEditorManagerChanged in a derived class, be sure to call the base class's OnCellEditorManagerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCellViewerChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnCellViewerChanged method is obsolete and has been replaced by the EventArgs) method. Raises the CellViewerChanged event.</summary>
            <remarks>When overriding OnCellViewerChanged in a derived class, be sure to call the base class's OnCellViewerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnCellViewerManagerChanged(System.EventArgs)">
            <summary>Raises the CellViewerManagerChanged event.</summary>
            <remarks>When overriding OnCellViewerManagerChanged in a derived class, be sure to call the base class's OnCellViewerManagerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnEditEntered(System.EventArgs)">
            <summary>Raises the EditEntered event.</summary>
            <remarks>When overriding OnEditEntered in a derived class, be sure to call the base class's OnEditEntered method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnEditLeft(Xceed.Grid.EditLeftEventArgs)">
            <summary>Raises the EditLeft event.</summary>
            <remarks>When overriding OnEditLeft in a derived class, be sure to call the base class's OnEditLeft method so that registered delegates receive the event.</remarks>
            <param name="e">An EditLeftEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnEnteringEdit(Xceed.Grid.EnteringEditEventArgs)">
            <summary>Raises the EnteringEdit event.</summary>
            <remarks>When overriding OnEnteringEdit in a derived class, be sure to call the base class's OnEnteringEdit method so that registered delegates receive the event.</remarks>
            <param name="e">An EnteringEditEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnErrorDescriptionChanged(System.EventArgs)">
            <summary>Raises the ErrorDescriptionChanged event.</summary>
            <remarks>When overriding OnErrorDescriptionChanged in a derived class, be sure to call the base class's OnErrorDescriptionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnFormatProviderChanged(System.EventArgs)">
            <summary>Raises the FormatProviderChanged event.</summary>
            <remarks>When overriding OnFormatProviderChanged in a derived class, be sure to call the base class's OnFormatProviderChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnFormatSpecifierChanged(System.EventArgs)">
            <summary>Raises the FormatSpecifierChanged event.</summary>
            <remarks>When overriding OnFormatSpecifierChanged in a derived class, be sure to call the base class's OnFormatSpecifierChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnLeavingEdit(Xceed.Grid.LeavingEditEventArgs)">
            <summary>Raises the LeavingEdit event.</summary>
            <remarks>When overriding OnLeavingEdit in a derived class, be sure to call the base class's OnLeavingEdit method so that registered delegates receive the event.</remarks>
            <param name="e">A LeavingEditEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnNullTextChanged(System.EventArgs)">
            <summary>Raises the NullTextChanged event.</summary>
            <remarks>When overriding OnNullTextChanged in a derived class, be sure to call the base class's OnNullTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnNullValueChanged(System.EventArgs)">
            <summary>Raises the NullValueChanged event.</summary>
            <remarks>When overriding OnNullValueChanged in a derived class, be sure to call the base class's OnNullValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnQueryAccessibilityHelp(System.Windows.Forms.QueryAccessibilityHelpEventArgs)">
            <summary>Raises the QueryAccessibilityHelp event.</summary>
            <remarks>When overriding OnQueryAccessibilityHelp in a derived class, be sure to call the base class's OnQueryAccessibilityHelp method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryAccessibilityHelpEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnSiblingValueChanged(System.EventArgs)">
            <summary>Raises the SiblingValueChanged event.</summary>
            <remarks>When overriding OnSiblingValueChanged in a derived class, be sure to call the base class's OnSiblingValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnValidationError(Xceed.Grid.CellValidationErrorEventArgs)">
            <summary>Raises the ValidationError event.</summary>
            <remarks>When overriding OnValidationError in a derived class, be sure to call the base class's OnValidationError method so that registered delegates receive the event.</remarks>
            <param name="e">A CellValidationErrorEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnValueChanged(System.EventArgs)">
            <summary>Raises the ValueChanged event.</summary>
            <remarks>    Does not raise the ValueChanged event if the     underlying data source changes.When overriding     OnValueChanged in a derived class, be sure to call the base     class's OnValueChanged method so that registered delegates     receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.OnValueChanging(Xceed.Grid.ValueChangingEventArgs)">
            <summary>Raises the ValueChanging event.</summary>
            <remarks>When overriding OnValueChanging in a derived class, be sure to call the base class's OnValueChanging method so that registered delegates receive the event.</remarks>
            <param name="e">A ValueChangingEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.PaintBorders(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the borders of the Cell.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the Cell.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetAccessibleDefaultActionDescription">
            <summary>Resets the value of the AccessibleDefaultActionDescription property to its default value, DefaultAccessibleDefaultActionDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetAccessibleDescription">
            <summary>Resets the value of the AccessibleDescription property to its default value, DefaultAccessibleDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetAccessibleName">
            <summary>Resets the value of the AccessibleName property to its default value, DefaultAccessibleName.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCanBeCurrent">
            <summary>Resets the value of the CanBeCurrent property to its default value, DefaultCanBeCurrent.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCellEditor">
            <summary>OBSOLETE: The ResetCellEditor method is obsolete and has been replaced by the ResetCellEditorManager method. Resets the value of the CellEditor property to its default value, DefaultCellEditor.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCellEditorDisplayConditions">
            <summary>Resets the value of the CellEditorDisplayConditions property to its default value, DefaultCellEditorDisplayConditions.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCellEditorManager">
            <summary>Resets the value of the CellEditorManager property to its default value, DefaultCellEditorManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCellViewer">
            <summary>OBSOLETE: The ResetCellViewer method is obsolete and has been replaced by the ResetCellViewerManager method. Resets the value of the CellViewer property to its default value, DefaultCellViewer.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetCellViewerManager">
            <summary>Resets the value of the CellViewerManager property to its default value, DefaultCellViewerManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetErrorDescription">
            <summary>Resets the value of the ErrorDescription property to its default value, string.Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetFormatProvider">
            <summary>Resets the value of the FormatProvider property to its default value, DefaultFormatProvider.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetFormatSpecifier">
            <summary>Resets the value of the FormatSpecifier property to its default value, DefaultFormatSpecifier.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetNullText">
            <summary>Resets the value of the NullText property to its default value, DefaultNullText.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ResetNullValue">
            <summary>Resets the value of the NullValue property to its default value, DefaultNullValue.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.SetValidationExpression(System.Object)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.SetValue(System.Object)">
            <summary>Assigns the value to the cell.</summary>
            <remarks>To change the value of a cell, the Value property must be used instead of the SetValue method.</remarks>
            <param name="value">A reference to the value being assigned to the cell.</param>
        </member>
        <member name="M:Xceed.Grid.Cell.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Cell.ToString">
            <summary>Returns a string representing the Value of the cell.</summary>
            <returns>A string representing the Value of the cell.</returns>
        </member>
        <member name="P:Xceed.Grid.Cell.AccessibleDefaultActionDescription">
            <summary>Gets or sets the default action description of the element for use by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDefaultActionDescription property     describes the object's primary method of manipulation from the     user's viewpoint. This property should be a verb or a short     verb phrase.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AccessibleDescription">
            <summary>Gets or sets the description of the element used by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDescription property provides a     textual description about an object's visual appearance. The     description is primarily used to provide greater context for     low-vision or blind users, but can also be used for context     searching or other applications</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AccessibleName">
            <summary>Gets or sets the name of the element used by accessibility client applications.</summary>
            <remarks>    The AccessibleName property is a label that briefly     describes and identifies the object within its     container.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientBackColor">
            <summary>Gets the ambient value of the cell's BackColor property.</summary>
            <remarks>    The ambient background color is the background color     inherited from the Cell's parent in the case where its own     BackColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientCellEditor">
            <summary>OBSOLETE: The AmbientCellEditor property is obsolete and has been replaced by the AmbientCellEditorManager property. Gets the ambient value of the cell's CellEditor property.</summary>
            <remarks>    The ambient editor is the editor inherited from the     cell's parent column in the case where its own CellEditor     property is not explicitly set.     If the value of the IsCellEditorAmbient property is true     then both the AmbientCellEditor and CellEditor properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientCellEditorDisplayConditions">
            <summary>Gets the ambient value of the cell's CellEditorDisplayConditions property.</summary>
            <remarks>    The ambient value is inherited from the cell's parent in     the case where its own CellEditorDisplayConditions property is     not explicitly set.     If the value of the IsCellEditorDisplayConditionsAmbient     property is true then both the     AmbientCellEditorDisplayConditions and     CellEditorDisplayConditions properties will return the same     value.     If the grid element does not have an ambient parent, then     the value of the DefaultCellEditorDisplayConditions property     will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientCellEditorManager">
            <summary>Gets the ambient value of the cell's CellEditorManager property.</summary>
            <remarks>    The ambient CellEditorManager is the CellEditorManager     inherited from the cell's parent column in the case where its     own CellEditorManager property is not explicitly set.     If the value of the IsCellEditorManagerAmbient property     is true then both the AmbientCellEditorManager and     CellEditorManager properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientCellViewer">
            <summary>OBSOLETE: The AmbientCellViewer property is obsolete and has been replaced by the AmbientCellViewerManager property. Gets the ambient value of the cell's CellViewer property.</summary>
            <remarks>    The ambient viewer is the viewer inherited from the     cell's parent column in the case where its own CellViewer     property is not explicitly set.     If the value of the IsCellViewerAmbient property is true     then both the AmbientCellViewer and CellViewer properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientCellViewerManager">
            <summary>Gets the ambient value of the cell's CellViewerManager property.</summary>
            <remarks>    The ambient CellViewerManager is the CellViewerManager     inherited from the cell's parent column in the case where its     own CellViewerManager property is not explicitly set.     If the value of the IsCellViewerManagerAmbient property     is true then both the AmbientCellViewerManager and     CellViewerManager properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientClipPartialLine">
            <summary>Gets the ambient value of the cell's ClipPartialLine property.</summary>
            <remarks>    The ambient value is inherited from the Cell's parent in     the case where its own ClipPartialLine property is not     explicitly set.     If the value of the IsClipPartialLineAmbient property is     true then both the AmbientClipPartialLine and ClipPartialLine     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientFont">
            <summary>Gets the ambient value of the cell's Font property.</summary>
            <remarks>    The ambient font is the font inherited from the Cell's     parent in the case where its own Font property is not     explicitly set.     If the value of the IsFontAmbient property is true then     both the AmbientFont and Font properties will return the same     value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientForeColor">
            <summary>Gets the ambient value of the cell's ForeColor property.</summary>
            <remarks>    The ambient foreground color is the foreground color     inherited from the Cell's parent in the case where its own     ForeColor property is not explicitly set.     If the value of the IsForeColorAmbient property is true     then both the AmbientForeColor and ForeColor properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientFormatProvider">
            <summary>Gets the ambient value of the cell's FormatProvider property.</summary>
            <remarks>    The ambient format provider is the format provider     inherited from the cell's parent column in the case where its     own FormatProvider property is not explicitly set.     If the value of the IsFormatProviderAmbient property is     true then both the AmbientFormatProvider and FormatProvider     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientFormatSpecifier">
            <summary>Gets the ambient value of the cell's FormatSpecifier property.</summary>
            <remarks>    The ambient format specifier is the format specifier     inherited from the cell's parent column in the case where its     own FormatSpecifier property is not explicitly set.     If the value of the IsFormatSpecifierAmbient property is     true then both the AmbientFormatSpecifier and FormatSpecifier     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientHorizontalAlignment">
            <summary>Gets the ambient value of the cell's HorizontalAlignment property.</summary>
            <remarks>    The ambient horizontal alignment is the alignment     inherited from the cell's parent in the case where its own     HorizontalAlignment property is not explicitly set.     If the value of the IsHorizontalAlignmentAmbient property     is true then both the AmbientHorizontalAlignment and     HorizontalAlignment properties will return the same     value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientNullText">
            <summary>Gets the ambient value of the cell's NullText property.</summary>
            <remarks>    The ambient null text is the text inherited from the     cell's parent in the case where its own NullText property is     not explicitly set.     If the value of the IsNullTextAmbient property is true     then both the AmbientNullText and NullText properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientNullValue">
            <summary>Gets the ambient value of the cell's NullValue property.</summary>
            <remarks>    The ambient value is inherited from the Cell's parent in     the case where its own NullValue property is not explicitly     set.     If the value of the IsNullValueAmbient property is true     then both the AmbientNullValue and NullValue properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientOverrideUIStyle">
            <summary>Gets the ambient value of the cell's OverrideUIStyle property.</summary>
            <remarks>    The ambient value is inherited from the Cell's parent in     the case where its own OverrideUIStyle property is not     explicitly set.     If the value of the IsOverrideUIStyleAmbient property is     true, both the AmbientOverrideUIStyle and OverrideUIStyle     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientParent">
            <summary>Gets the ambient parent of the cell.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the cell's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientReadOnly">
            <summary>Gets the ambient value of the cell's ReadOnly property.</summary>
            <remarks>    The ambient value is inherited from the Cell's parent in     the case where its own ReadOnly property is not explicitly     set.     If the value of the IsReadOnlyAmbient property is true     then both the AmbientReadOnly and ReadOnly properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientTrimming">
            <summary>Gets the ambient value of the cell's Trimming property.</summary>
            <remarks>    The ambient trimming is the trimming inherited from the     Cell's parent in the case where its own Trimming property is     not explicitly set.     If the value of the IsTrimmingAmbient property is true     then both the AmbientTrimming and Trimming properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientVerticalAlignment">
            <summary>Gets the ambient value of the cell's VerticalAlignment property.</summary>
            <remarks>    The ambient vertical alignment is the alignment inherited     from the cell's parent in the case where its own     VerticalAlignment property is not explicitly set.     If the value of the IsVerticalAlignmentAmbient property     is true then both the AmbientVerticalAlignment and     VerticalAlignment properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.AmbientWordWrap">
            <summary>Gets the ambient value of the cell's WordWrap property.</summary>
            <remarks>    The ambient value is inherited from the Cell's parent in     the case where its own WordWrap property is not explicitly     set.     If the value of the IsWordWrapAmbient property is true     then both the AmbientWordWrap and WordWrap properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.Borders">
            <summary>Gets the borders of the Cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.CanBeCurrent">
            <summary>Gets or sets a boolean value indicating if the cell can be the current cell.</summary>
            <remarks>    If AllowCellNavigation is set to false,     then this property will not allow the cell to be current even     if it is set true.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CellEditor">
            <summary>OBSOLETE: The CellEditor property is obsolete and has been replaced by the CellEditorManager property. Gets or sets the control that will be used to edit the content of the cell. The control must implement the ICellEditor interface or be wrapped within the CustomEditor class.</summary>
            <remarks>    If the IsCellEditorAmbient property returns true, then     the value of the CellEditor property is inherited from its     parent.     To reset the value of the CellEditor property to its     default value, DefaultCellEditor, the ResetCellEditor method     must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CellEditorControl">
            <summary>Gets the control that is currently displayed by the cell (according to the CellEditorDisplayConditions) property, or the control that is currently editing the content of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.CellEditorDisplayConditions">
            <summary>Gets or sets a value representing under what conditions a cell's editor is displayed.</summary>
            <remarks>    When a cell editor is displayed, it is not necessarily     activated. A cell editor is activated when it is editing the     contents of its associated cell.     CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CellEditorManager">
            <summary>Gets or sets the CellEditorManager that will be used to edit the content of the cell.</summary>
            <remarks>             If the CellEditorManager property has not been explicitly         set, the parent column's CellEditorManager will be used. If         the parent column's CellEditorManager property has not been         explicitly set, the default CellEditorManager for the         cell's datatype will be used.                                       Cell/Column Datatype                 Default                 CellEditorManager                                           String                 TextEditor                                           Boolean                 CheckBoxEditor                                           DateTime                 DateEditor                                           Image                 None                                           Numeric                 NumericEditor                           </remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CellViewer">
            <summary>OBSOLETE: The CellViewer property is obsolete and has been replaced by the CellViewerManager property. Gets or sets the object that will be used to view the content of the cell. The object must implement the ICellViewer interface or be wrapped within the ControlViewer.</summary>
            <remarks>    If the IsCellViewerAmbient property returns true, then     the value of the CellViewer property is inherited from its     parent.     To reset the value of the CellViewer property to its     default value, DefaultCellViewer, the ResetCellViewer method     must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CellViewerManager">
            <summary>Gets or sets the CellViewerManager that will be used to view the content of the cell.</summary>
            <remarks>    If the CellViewerManager property has not been explicitly     set, the parent column's CellViewerManager will be used. If the     parent column's CellViewerManager property has not been     explicitly set, the default CellViewerManager for the cell's     datatype will be used.                           Cell/Column Datatype             Default CellViewerManager                               String             None                               Boolean             CheckBoxViewer                               DateTime             DateViewer                               Image             ImageViewer                               Numeric             NumericViewer              </remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.CurrentEditor">
            <summary>OBSOLETE: The CurrentEditor property is obsolete and has been replaced by the CellEditorControl property. Gets a reference to the ICellEditor currently being used to edit the cell.</summary>
            <remarks>    The appropriate cell editor will be initialized depending     on the datatype of the cell's content.     The value of the CurrentEditor property can be consulted     to determine if the cell is being edited. If the value of the     CellEditor property is not$$NULL$$, then the cell is     currently being edited.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultAccessibleDefaultActionDescription">
            <summary>Gets the default value of the AccessibleDefaultActionDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDefaultActionDescription     in a derived class, the value returned by your implementation     of DefaultAccessibleDefaultActionDescription should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultAccessibleDescription">
            <summary>Gets the default value of the AccessibleDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDescription in a derived     class, the value returned by your implementation of     DefaultAccessibleDescription should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultAccessibleName">
            <summary>Gets the default value of the AccessibleName property.</summary>
            <remarks>    When overriding DefaultAccessibleName in a derived class,     the value returned by your implementation of     DefaultAccessibleName should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
            <remarks>    When overriding DefaultCanBeCurrent in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCellEditor">
            <summary>OBSOLETE: The DefaultCellEditor property is obsolete and has been replaced by the DefaultCellEditorManager property. Gets the default value of the CellEditor property.</summary>
            <remarks>    When overriding DefaultCellEditor in a derived class,     IsCellEditorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultCellEditor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCellEditorDisplayConditions">
            <summary>Gets the default value of the CellEditorDisplayConditions property.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     When overriding DefaultCellEditorDisplayConditions in a     derived class, IsCellEditorDisplayConditionsAmbient should also     be overridden to return false.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCellEditorManager">
            <summary>Gets the default value of the CellEditorManager property.</summary>
            <remarks>    When overriding DefaultCellEditorManager in a derived     class, IsCellEditorManagerAmbient should also be overridden to     return false.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCellViewer">
            <summary>OBSOLETE: The DefaultCellViewer property is obsolete and has been replaced by the DefaultCellViewerManager property. Gets the default value of the CellViewer property.</summary>
            <remarks>    When overriding DefaultCellViewer in a derived class,     IsCellViewerAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultCellViewer should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultCellViewerManager">
            <summary>Gets the default value of the CellViewerManager property.</summary>
            <remarks>    When overriding DefaultCellViewerManager in a derived     class, IsCellViewerManagerAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultCellViewerManager should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultFormatProvider">
            <summary>Gets the default value of the FormatProvider property.</summary>
            <remarks>    When overriding DefaultFormatProvider in a derived class,     IsFormatProviderAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultFormatProvider should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultFormatSpecifier">
            <summary>Gets the default value of the FormatSpecifier property.</summary>
            <remarks>    When overriding DefaultFormatSpecifier in a derived     class, IsFormatSpecifierAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultFormatSpecifier should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultNullText">
            <summary>Gets the default value of the NullText property.</summary>
            <remarks>    When overriding DefaultNullText in a derived class,     IsNullTextAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultNullText should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.DefaultNullValue">
            <summary>Gets the default value of the NullValue property.</summary>
            <remarks>    When overriding DefaultNullValue in a derived class,     IsNullValueAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultNullValue should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.ErrorDescription">
            <summary>Gets or sets the description of the error that will be displayed in the tooltip when the mouse passes over the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.FieldName">
            <summary>Gets the field name of the cell's parent column.</summary>
            <remarks>    The value of the FieldName property always matches the     value of its parent column FieldName property: If the data is     retrieved from a dataset, this property corresponds to the     field name. If the column is unbound, it represents the     user-provided name.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.FormatProvider">
            <summary>Gets or sets the custom Format Provider that will be used to format the cell's data.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the "Format Specifiers     and Format Providers" topic of the .NET Framework.     If the IsFormatProviderAmbient property returns true,     then the value of the FormatProvider property is inherited from     its parent.     To reset the value of the FormatProvider property to its     default value, DefaultFormatProvider, the ResetFormatProvider     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.FormatSpecifier">
            <summary>Gets or sets the format that will be used to display the cell's content.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the "Format Specifiers     and Format Providers" topic of the .NET Framework.     If the IsFormatSpecifierAmbient property returns true,     then the value of the FormatSpecifier property is inherited     from its parent.     To reset the value of the FormatSpecifier property to its     default value, DefaultFormatSpecifier, the ResetFormatSpecifier     method must be called or the FormatSpecifier property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.IsBeingEdited">
            <summary>Gets a boolean value indicating if the cell has an active cell editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCellEditorAmbient">
            <summary>OBSOLETE: The IsCellEditorAmbient property is obsolete and has been replaced by the IsCellEditorManagerAmbient property. Gets a boolean value indicating if the CellEditor property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCellEditorDisplayConditionsAmbient">
            <summary>Gets a boolean value indicating if the CellEditorDisplayConditions property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCellEditorManagerAmbient">
            <summary>Gets a boolean value indicating if the CellEditorManager property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCellViewerAmbient">
            <summary>OBSOLETE: The IsCellViewerAmbient property is obsolete and has been replaced by the IsCellViewerManagerAmbient property." Gets a boolean value indicating if the CellViewer property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCellViewerManagerAmbient">
            <summary>Gets a boolean value indicating if the CellViewerManager property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsCurrent">
            <summary>Gets a boolean value indicating if the cell is the current cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsFormatProviderAmbient">
            <summary>Gets a boolean value indicating if the FormatProvider property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsFormatSpecifierAmbient">
            <summary>Gets a boolean value indicating if the FormatSpecifier property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsNullTextAmbient">
            <summary>Gets a boolean value indicating if the NullText property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.IsNullValueAmbient">
            <summary>Gets a boolean value indicating if the NullValue property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.NullText">
            <summary>Gets or sets the text that is displayed when the cell contains $$NULL$$.</summary>
            <remarks>    If the IsNullTextAmbient property returns true, then the     value of the NullText property is inherited from its     parent.     To reset the value of the NullText property to its     default value, DefaultNullText, the ResetNullText method must     be called or the NullText property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.NullValue">
            <summary>Gets or sets the $$NULL$$ value of the cell.</summary>
            <remarks>    If NullValue is assigned to the Value property, NullText     will be displayed in the cell when it loses focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.Cell.ParentColumn">
            <summary>Gets the parent column of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.ParentGrid">
            <summary>Gets the parent grid of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.ParentRow">
            <summary>Gets the parent row of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Cell.Value">
            <summary>Gets or sets the content of the cell.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CanBeCurrentChanged">
            <summary>Raised when the value of the CanBeCurrent property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CellEditorChanged">
            <summary>OBSOLETE: The CellEditorChanged event is obsolete and has been replaced by the CellEditorManagerChanged event. Raised when the value of the CellEditor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CellEditorDisplayConditionsChanged">
            <summary>Raised when the value of the CellEditorDisplayConditions property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CellEditorManagerChanged">
            <summary>Raised when the value of the CellEditorManager property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CellViewerChanged">
            <summary>OBSOLETE: The CellViewerChanged event is obsolete and has been replaced by the CellViewerManagerChanged event. Raised when the value of the CellViewer property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.CellViewerManagerChanged">
            <summary>Raised when the value of the CellViewerManager property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.EditEntered">
            <summary>Raised when the cell has entered edit mode.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.EditLeft">
            <summary>Raised when the cell has exited edit mode.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.EnteringEdit">
            <summary>Raised before editing a cell.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.ErrorDescriptionChanged">
            <summary>Raised when the value of the ErrorDescription property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.FormatProviderChanged">
            <summary>Raised when the value of the FormatProvider property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.FormatSpecifierChanged">
            <summary>Raised when the value of the FormatSpecifier property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.LeavingEdit">
            <summary>Raised after a cell has been edited to validate the content of the cell.</summary>
            <remarks>    Custom validation can be provided in the LeavingEdit     event. In this event, if the validation process fails, setting     e.Cancel to true will cause the ValidationError event to be     raised.     Setting e.CancelEdit to false in the ValidationError     event will prevent the cell from leaving edit mode in the case     where the its value fails the validation process.</remarks>
        </member>
        <member name="E:Xceed.Grid.Cell.NullTextChanged">
            <summary>Raised when the value of the NullText property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.NullValueChanged">
            <summary>Raised when the value of the NullValue property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.QueryAccessibilityHelp">
            <summary>Raised when an Accessibility client invokes help for that element.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.SiblingValueChanged">
            <summary>Raised when the value of the Value property of one of the cell's siblings is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Cell.ValidationError">
            <summary>Raised when the value of the cell does not pass the validation process.</summary>
            <remarks>    Setting e.CancelEdit to false in the ValidationError     event will prevent the cell from leaving edit mode in the case     where the its value fails the validation process.     Custom validation can be provided in the LeavingEdit     event. In this event, if the validation process fails, setting     e.Cancel to true will cause the ValidationError event to be     raised.     The cell's ValidationError event will be raised when     e.Cancel is set to true in the LeavingEdit event, when an     exception is thrown in the LeavingEdit event and/or when a     validation exception is thrown by the underlying     datasource.</remarks>
        </member>
        <member name="E:Xceed.Grid.Cell.ValueChanged">
            <summary>Raised when a cell's value has been changed.</summary>
            <remarks>    This event is not raised when the underlying data     source changes.</remarks>
        </member>
        <member name="E:Xceed.Grid.Cell.ValueChanging">
            <summary>Raised when a cell's value is being changed.</summary>
        </member>
        <member name="T:Xceed.Grid.CellImageFormatInfo">
            <summary>Provides a CellViewerManager with image formatting information.</summary>
        </member>
        <member name="M:Xceed.Grid.CellImageFormatInfo.CreateFromCell(Xceed.Grid.Cell)">
            <summary>Creates a new CellImageFormatInfo instance which retrieves its values from the specified Cell.</summary>
            <returns>A new CellImageFormatInfo instance whose values have been set from the values retrieved from cell.</returns>
            <param name="cell">A reference to the Cell from which the returned CellImageFormatInfo instance retrieves its values.</param>
        </member>
        <member name="M:Xceed.Grid.CellImageFormatInfo.CreateFromColumn(Xceed.Grid.Column)">
            <summary>Creates a new CellImageFormatInfo instance which retrieves its values from the specified Column.</summary>
            <returns>A new CellImageFormatInfo instance whose values have been set from the values retrieved from column.</returns>
            <param name="column">A reference to the Column from which the returned CellImageFormatInfo instance retrieves its values.</param>
        </member>
        <member name="P:Xceed.Grid.CellImageFormatInfo.BackColor">
            <summary>Gets the background color that will be used to display the image in the CellViewerManager.</summary>
        </member>
        <member name="P:Xceed.Grid.CellImageFormatInfo.ForeColor">
            <summary>Gets the foreground color that will be used to display the image in the CellViewerManager.</summary>
        </member>
        <member name="P:Xceed.Grid.CellImageFormatInfo.Theme">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="F:Xceed.Grid.CellImageFormatInfo.Empty">
            <summary>Gets an empty CellImageFormatInfo.</summary>
        </member>
        <member name="T:Xceed.Grid.CellRow">
            <summary>Represents a row that contains a cell for each column in the grid.</summary>
            <remarks>    Every row that contains cells will contain a cell for     each column in the grid. Each of these cells will always have     the same index, name and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid, and the SummaryRow class which represents a row used     to display the results of statistical functions.     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides various cell-less row classes: the TextRow class which     is used to display text, the GroupManagerRow class which is     used to manage groups, the GroupByRow class which represents a     row in which ColumnManagerCell objects can be drag and dropped     in order to group a grid's data rows and the SpacerRow class     which represents a row that is used to provide spacing between     rows and detail grids in the grid. All of these rows derive     directly from the Row class.</remarks>
        </member>
        <member name="M:Xceed.Grid.CellRow.BeginEdit">
            <summary>Places the row in edition mode and keeps a copy of the row's current data.</summary>
            <remarks>During a transaction (between calls to the BeginEdit and EndEdit methods ), columns should not be added or removed from the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.CellRow.BeginEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.CancelEdit">
            <summary>Cancels any modifications made to the row and restores the original data.</summary>
            <remarks>    The data that is restored is the data that was copied by     BeginEdit.During a transaction (between calls to the     BeginEdit and EndEdit methods ), columns should not be added or     removed from the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.CellRow.CancelEditCore(System.Collections.ArrayList)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the CellRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">A reference to the Column object for which to create a cell in the row.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.EndEdit">
            <summary>Commits the modifications made to the row's data and exits edition mode.</summary>
            <remarks>    The CellValueChanged event will always be raised by     EndEdit.During a transaction (between calls to the     BeginEdit and EndEdit methods ), columns should not be added or     removed from the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.CellRow.EndEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <remarks>    The fitted height of the row is calculated in regards to     the current width of the columns, taking into consideration the     WordWrap property only if mode is set to AllContent.     If the WordWrap property is set to true, then the fitted     height of the row will represent the height needed to display     all data in the row appropriately. If the WordWrap     property is set to false, then the fitted height of the row     will represent the height needed to display only one     line of data in the row.     If FitHeightToEditors is true, then the height of all the     cell editors in the row will be consulted and if one of them is     greater than the height of the cell viewers in the row, then     the fitted height of the largest editor will be used.</remarks>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.InputValidatorValidateAndSetErrorParameters(System.Delegate,System.Boolean,System.Boolean,System.Object[],System.Drawing.Icon,System.Int32,System.Windows.Forms.ErrorBlinkStyle)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnAllowCellNavigationChanged(System.EventArgs)">
            <summary>Raises the AllowCellNavigationChanged event.</summary>
            <remarks>When overriding OnAllowCellNavigationChanged in a derived class, be sure to call the base class's OnAllowCellNavigationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnBeginningEdit(System.ComponentModel.CancelEventArgs)">
            <summary>Raises the BeginningEdit event.</summary>
            <param name="e">A CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnCellEditorDisplayConditionsChanged(System.EventArgs)">
            <summary>Raises the CellEditorDisplayConditionsChanged event.</summary>
            <remarks>When overriding OnCellEditorDisplayConditionsChanged in a derived class, be sure to call the base class's OnCellEditorDisplayConditionsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnCellValueChanged(System.EventArgs)">
            <summary>Raises the CellValueChanged event.</summary>
            <remarks>When overriding OnCellValueChanged in a derived class, be sure to call the base class's OnCellValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnEditBegun(System.EventArgs)">
            <summary>Raises the EditBegun event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnEditCanceled(System.EventArgs)">
            <summary>Raises the EditCanceled event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnEditEnded(System.EventArgs)">
            <summary>Raises the EditEnded event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnEndingEdit(System.ComponentModel.CancelEventArgs)">
            <summary>Raises the EndingEdit event.</summary>
            <remarks>When overriding OnEndingEdit in a derived class, be sure to call the base class's OnEndingEdit method so that registered delegates receive the event.</remarks>
            <param name="e">A CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnErrorDescriptionChanged(System.EventArgs)">
            <summary>Raises the ErrorDescriptionChanged event.</summary>
            <remarks>When overriding OnErrorDescriptionChanged in a derived class, be sure to call the base class's OnErrorDescriptionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnFitHeightToEditorsChanged(System.EventArgs)">
            <summary>Raises the FitHeightToEditorsChanged event.</summary>
            <remarks>When overriding OnFitHeightToEditorsChanged in a derived class, be sure to call the base class's OnFitHeightToEditorsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnShowFixedColumnSplitterChanged(System.EventArgs)">
            <summary>Raises the ShowFixedColumnSplitterChanged event.</summary>
            <remarks>When overriding OnShowFixedColumnSplitterChanged in a derived class, be sure to call the base class's OnShowFixedColumnSplitterChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.OnValidationError(Xceed.Grid.RowValidationErrorEventArgs)">
            <summary>Raises the ValidationError event.</summary>
            <remarks>When overriding OnValidationError in a derived class, be sure to call the base class's OnValidationError method so that registered delegates receive the event.</remarks>
            <param name="e">A RowValidationErrorEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.PaintErrorState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the CellRow in an error state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.PaintSelectedState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the CellRow in a selected state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.CellRow.ResetAllowCellNavigation">
            <summary>Resets the value of the AllowCellNavigation property to its default value, DefaultAllowCellNavigation.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.ResetCellEditorDisplayConditions">
            <summary>Resets the value of the CellEditorDisplayConditions property to its default value, DefaultCellEditorDisplayConditions.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.ResetErrorDescription">
            <summary>Resets the value of the ErrorDescription property to its default value, DefaultErrorDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.ResetFitHeightToEditors">
            <summary>Resets the value of the FitHeightToEditors property to its default value, DefaultFitHeightToEditors.</summary>
        </member>
        <member name="M:Xceed.Grid.CellRow.ResetShowFixedColumnSplitter">
            <summary>Resets the value of the ShowFixedColumnSplitter property to its default value, DefaultShowFixedColumnSplitter.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.AllowCellNavigation">
            <summary>Gets or sets a boolean value indicating if it is possible to navigate from cell to cell in the row.</summary>
            <remarks>    If false, the CurrentCell cannot be one of the row's     cells.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.AmbientAllowCellNavigation">
            <summary>Gets the ambient value of the row's AllowCellNavigation property.</summary>
            <remarks>    The ambient value is inherited from the row's parent in     the case where its own AllowCellNavigation property is not     explicitly set.     If the value of the IsAllowCellNavigationAmbient property     is true then both the AmbientAllowCellNavigation and     AllowCellNavigation properties will return the same     value.     If the row does not have an ambient parent, then the     value of the DefaultAllowCellNavigation property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.AmbientCellEditorDisplayConditions">
            <summary>Gets the ambient value of the grid element's CellEditorDisplayConditions property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own CellEditorDisplayConditions     property is not explicitly set.     If the value of the IsCellEditorDisplayConditionsAmbient     property is true then both the     AmbientCellEditorDisplayConditions and     CellEditorDisplayConditions properties will return the same     value.     If the grid element does not have an ambient parent, then     the value of the DefaultCellEditorDisplayConditions property     will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.CellEditorDisplayConditions">
            <summary>Gets or sets a value representing under what conditions cell editors are displayed.</summary>
            <remarks>    When a cell editor is displayed, it is not necessarily     activated. A cell editor is activated when it is editing the     contents of its associated cell.     CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.Cells">
            <summary>Gets a list of all the cells contained within the row.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.CellType">
            <summary>Gets the Type of the cells contained in the row.</summary>
            <remarks>    The type of the cells should be directly related to the     row type. For example, a DataRow should only contain     DataCell.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.DefaultAllowCellNavigation">
            <summary>Gets the default value of the AllowCellNavigation property.</summary>
            <remarks>    When overriding DefaultAllowCellNavigation in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.DefaultCellEditorDisplayConditions">
            <summary>Gets the default value of the CellEditorDisplayConditions property.</summary>
            <remarks>    When a cell editor is displayed, it is not necessarily     activated. A cell editor is activated when it is editing the     contents of its associated cell.     CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     When overriding DefaultCellEditorDisplayConditions in a     derived class, IsCellEditorDisplayConditionsAmbient should also     be overridden to return false.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.DefaultErrorDescription">
            <summary>Gets the default value of the ErrorDescription property.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.DefaultFitHeightToEditors">
            <summary>Gets the default value of the FitHeightToEditors property.</summary>
            <remarks>    When overriding DefaultFitHeightToEditors in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.DefaultShowFixedColumnSplitter">
            <summary>Gets the default value of the ShowFixedColumnSplitter property.</summary>
            <remarks>    When overriding DefaultShowFixedColumnSplitter in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellRow.EnforceCellDataTypes">
            <summary>Gets a boolean value indicating if the data types of the cells should match the data type of their respective parent columns.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.ErrorDescription">
            <summary>Gets or sets the description of the error that will be displayed in the tooltip when the mouse passes over the row or the row's row selector.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.FitHeightToEditors">
            <summary>Gets or sets a boolean value indicating if the height of the row should be adjusted to fit the editors of the row's cells.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.IsAllowCellNavigationAmbient">
            <summary>Gets a boolean value indicating if the AllowCellNavigation property gets its value from its parent grid.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.IsBeingEdited">
            <summary>Gets a boolean value indicating if the row is being edited.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.IsCellEditorDisplayConditionsAmbient">
            <summary>Gets a boolean value indicating if the CellEditorDisplayConditions property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.CellRow.ShowFixedColumnSplitter">
            <summary>Gets or sets a value indicating when the FixedColumnSplitter or FixedColumnSplitter is displayed.</summary>
            <remarks>    If set to Always the fixed column splitter will     always be displayed. In the case where there are no fixed     columns, the splitter will be located on the far left of the     grid. If set to WhenFixedColumnsExist , the fixed column     splitter will appear immediately after the fixed     columns.</remarks>
        </member>
        <member name="E:Xceed.Grid.CellRow.AllowCellNavigationChanged">
            <summary>Raised when the value of the AllowCellNavigation property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.BeginningEdit">
            <summary>Raised when the BeginEdit method is called to signal that the row is about to be edited.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.CellEditorDisplayConditionsChanged">
            <summary>Raised when the value of the CellEditorDisplayConditions property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.CellValueChanged">
            <summary>Raised when the value of one of the cells in the row is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.EditBegun">
            <summary>Raised after the BeginningEdit event to signal that the row is being edited.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.EditCanceled">
            <summary>Raised when the CancelEdit method has been called to cancel the modifications made to the row.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.EditEnded">
            <summary>Raised when the row has finished being edited.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.EndingEdit">
            <summary>Raised when the EndEdit method is called to signal that the row has finished being edited and that the changes are about to be committed.</summary>
            <remarks>    Custom validation can be provided in the EndingEdit     event. In this event, if the validation process fails, setting     e.Cancel to true will cause the ValidationError event to be     raised.     Setting e.CancelEdit to false in the ValidationError     event will prevent the row from leaving edit mode in the case     where the values of one of its cells fails the validation     process.</remarks>
        </member>
        <member name="E:Xceed.Grid.CellRow.ErrorDescriptionChanged">
            <summary>Raised when the value of the ErrorDescription property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.FitHeightToEditorsChanged">
            <summary>Raised when the value of the FitHeightToEditors property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.ShowFixedColumnSplitterChanged">
            <summary>Raised when the value of the ShowFixedColumnSplitter property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.CellRow.ValidationError">
            <summary>Raised by the AddNew or EndEdit methods when the values of one of the cells in the DataRow does not pass the validation process.</summary>
            <remarks>    Setting e.CancelEdit to false in the ValidationError     event will prevent the row from leaving edit mode in the case     where the values of one of its cells fails the validation     process.     Custom validation can be provided in the EndingEdit     event. In this event, if the validation process fails, setting     e.Cancel to true will cause the ValidationError event to be     raised.     The row's ValidationError event will be raised if     e.Cancel is set to true in the EndingEdit event and/or if an     exception is thrown in the EndingEdit event.</remarks>
        </member>
        <member name="T:Xceed.Grid.CellTextFormatInfo">
            <summary>Provides a CellViewerManager with text formatting information.</summary>
        </member>
        <member name="M:Xceed.Grid.CellTextFormatInfo.CreateFromCell(Xceed.Grid.Cell)">
            <summary>Creates a new CellTextFormatInfo instance which retrieves its values from the specified Cell.</summary>
            <returns>A new CellTextFormatInfo instance whose values have been set from the values retrieved from cell.</returns>
            <param name="cell">A reference to the Cell from which the returned CellTextFormatInfo instance retrieves its values.</param>
        </member>
        <member name="M:Xceed.Grid.CellTextFormatInfo.CreateFromColumn(Xceed.Grid.Column)">
            <summary>Creates a new CellTextFormatInfo instance which retrieves its values from the specified Column.</summary>
            <returns>A new CellTextFormatInfo instance whose values have been set from the values retrieved from column.</returns>
            <param name="column">A reference to the Column from which the returned CellTextFormatInfo instance retrieves its values.</param>
        </member>
        <member name="P:Xceed.Grid.CellTextFormatInfo.FormatProvider">
            <summary>Gets the custom Format Provider that will be used to format the text displayed in the CellViewerManager.</summary>
        </member>
        <member name="P:Xceed.Grid.CellTextFormatInfo.FormatSpecifier">
            <summary>Gets the format that will be used to display the text in the CellViewerManager.</summary>
        </member>
        <member name="P:Xceed.Grid.CellTextFormatInfo.NullText">
            <summary>Gets the text that is displayed when the text to display in the CellViewerManager is equal to NullValue.</summary>
        </member>
        <member name="P:Xceed.Grid.CellTextFormatInfo.NullValue">
            <summary>Gets the $$NULL$$ value of the cell or column from which the CellTextFormatInfo was created.</summary>
            <remarks>    If the text to display by the CellViewerManager is equal     to NullValue, NullText will be displayed in the     CellViewerManager.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellTextFormatInfo.StringFormat">
            <summary>Gets the StringFormat that is to be used to paint the text that is to be displayed by the CellViewerManager.</summary>
        </member>
        <member name="F:Xceed.Grid.CellTextFormatInfo.Empty">
            <summary>Gets an empty CellTextFormatInfo.</summary>
        </member>
        <member name="T:Xceed.Grid.CellValidationErrorEventArgs">
            <summary>Provides information on the cell whose value failed the validation process.</summary>
        </member>
        <member name="M:Xceed.Grid.CellValidationErrorEventArgs.#ctor(System.Object,System.Exception)">
            <summary>Provides information on the cell whose value failed the validation process.</summary>
            <param name="value">The value which failed the validation process.</param>
            <param name="exception">The Exception that was thrown.</param>
        </member>
        <member name="P:Xceed.Grid.CellValidationErrorEventArgs.CancelEdit">
            <summary>Gets or sets a boolean value indicating if the cell whould exit edit mode.</summary>
            <remarks>    Setting CancelEdit to true has the same result as calling     Boolean) with "commit" set to false.</remarks>
        </member>
        <member name="P:Xceed.Grid.CellValidationErrorEventArgs.Exception">
            <summary>Gets the exception that was thrown.</summary>
        </member>
        <member name="P:Xceed.Grid.CellValidationErrorEventArgs.Value">
            <summary>Gets the value that failed the validation process.</summary>
        </member>
        <member name="T:Xceed.Grid.Column">
            <summary>Represents any type of column in the grid and can be instantiated to contain unbound data. The DataBoundColumn derives from this class.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the Column class specifying the Column that will be used as a template to create the columns.</summary>
            <param name="template">A reference to a Column object that will be used as a template to create the columns.</param>
        </member>
        <member name="M:Xceed.Grid.Column.#ctor(System.String)">
            <summary>Initializes a new instance of the Column class specifying the name of the column.</summary>
            <remarks>    The name of the column must correspond to the name     of the fields in the data source.</remarks>
            <param name="fieldName">The name of the column. Cannot be $$NULL$$ or Empty.</param>
        </member>
        <member name="M:Xceed.Grid.Column.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the Column class specifying the name of the column and its data type.</summary>
            <param name="fieldName">The name of the column. Cannot be $$NULL$$ or Empty.</param>
            <param name="dataType">The column's data type.</param>
        </member>
        <member name="M:Xceed.Grid.Column.BringIntoView">
            <summary>Brings the column into the visible area of the grid.</summary>
            <remarks>    The column will always be brought into view, no matter     its state. For example, if the column is not visible, its     Visible property will be set to true.</remarks>
        </member>
        <member name="M:Xceed.Grid.Column.CreateInstance">
            <summary>Creates a new Column object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Column object.</returns>
        </member>
        <member name="M:Xceed.Grid.Column.GetFittedWidth">
            <summary>Retrieves the fitted width of the column in pixels.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.GetFittedWidth">
            <summary>Retrieves the fitted width of the column in pixels.</summary>
            <returns>A value containing the fitted width of the column in pixels.</returns>
            <remarks>    The fitted width of the column represents the width     necessary to display the column's cells' data on one line,     regardless of the value of the WordWrap property.     The GetFittedWidth method must be called outside of the     calls to BeginInit and EndInit methods because the data is not     loaded into the grid until EndInit is called therefore, the     fitted width cannot be calculated until that moment.</remarks>
        </member>
        <member name="M:Xceed.Grid.Column.GetFittedWidth(Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted width of the column in pixels.</summary>
            <returns>A value containing the fitted width of the column, including its Borders, in pixels.</returns>
            <remarks>    The fitted width of the column represents the width     necessary to display the column's cells' data on one line,     regardless of the value of the WordWrap property.     The GetFittedWidth method must be called outside of the     calls to BeginInit and EndInit methods because the data is not     loaded into the grid until EndInit is called therefore, the     fitted width cannot be calculated until that moment.</remarks>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint the column.</param>
            <param name="printing">true if the column is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Column.Initialize(System.String,System.Type)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.OnCanBeGroupedChanged(System.EventArgs)">
            <summary>Raises the CanBeGroupedChanged event.</summary>
            <remarks>When overriding OnCanBeGroupedChanged in a derived class, be sure to call the base class's OnCanBeGroupedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCanBeSortedChanged(System.EventArgs)">
            <summary>Raises the CanBeSortedChanged event.</summary>
            <remarks>When overriding OnCanBeSortedChanged in a derived class, be sure to call the base class's OnCanBeSortedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCellEditorChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnCellEditorChanged method is obsolete and has been replaced by the EventArgs) method. Raises the CellEditorChanged event.</summary>
            <remarks>When overriding OnCellEditorChanged in a derived class, be sure to call the base class's OnCellEditorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCellEditorDisplayConditionsChanged(System.EventArgs)">
            <summary>Raises the CellEditorDisplayConditionsChanged event.</summary>
            <remarks>When overriding OnCellEditorDisplayConditionsChanged in a derived class, be sure to call the base class's OnCellEditorDisplayConditionsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCellEditorManagerChanged(System.EventArgs)">
            <summary>Raises the CellEditorManagerChanged event.</summary>
            <remarks>When overriding OnCellEditorManagerChanged in a derived class, be sure to call the base class's OnCellEditorManagerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCellViewerChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnCellViewerChanged method is obsolete and has been replaced by the EventArgs) method. Raises the CellViewerChanged event.</summary>
            <remarks>When overriding OnCellViewerChanged in a derived class, be sure to call the base class's OnCellViewerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnCellViewerManagerChanged(System.EventArgs)">
            <summary>Raises the CellViewerManagerChanged event.</summary>
            <remarks>When overriding OnCellViewerManagerChanged in a derived class, be sure to call the base class's OnCellViewerManagerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnDataComparerChanged(System.EventArgs)">
            <summary>Raises the DataComparerChanged event.</summary>
            <remarks>When overriding OnDataComparerChanged in a derived class, be sure to call the base class's OnDataComparerChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnFixedChanged(System.EventArgs)">
            <summary>Raises the FixedChanged event.</summary>
            <remarks>When overriding OnFixedChanged in a derived class, be sure to call the base class's OnFixedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnFormatProviderChanged(System.EventArgs)">
            <summary>Raises the FormatProviderChanged event.</summary>
            <remarks>When overriding OnFormatProviderChanged in a derived class, be sure to call the base class's OnFormatProviderChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnFormatSpecifierChanged(System.EventArgs)">
            <summary>Raises the FormatSpecifierChanged event.</summary>
            <remarks>When overriding OnFormatSpecifierChanged in a derived class, be sure to call the base class's OnFormatSpecifierChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnMaxWidthChanged(System.EventArgs)">
            <summary>Raises the MaxWidthChanged event.</summary>
            <remarks>When overriding OnMaxWidthChanged in a derived class, be sure to call the base class's OnMaxWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnMinWidthChanged(System.EventArgs)">
            <summary>Raises the MinWidthChanged event.</summary>
            <remarks>When overriding OnMinWidthChanged in a derived class, be sure to call the base class's OnMinWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnNullTextChanged(System.EventArgs)">
            <summary>Raises the NullTextChanged event.</summary>
            <remarks>When overriding OnNullTextChanged in a derived class, be sure to call the base class's OnNullTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnNullValueChanged(System.EventArgs)">
            <summary>Raises the NullValueChanged event.</summary>
            <remarks>When overriding OnNullValueChanged in a derived class, be sure to call the base class's OnNullValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnSortDirectionChanged(System.EventArgs)">
            <summary>Raises the SortDirectionChanged event.</summary>
            <remarks>When overriding OnSortDirectionChanged in a derived class, be sure to call the base class's OnSortDirectionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnTitleChanged(System.EventArgs)">
            <summary>Raises the TitleChanged event.</summary>
            <remarks>When overriding OnTitleChanged in a derived class, be sure to call the base class's OnTitleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnVisibleIndexChanged(System.EventArgs)">
            <summary>Raises the VisibleIndexChanged event.</summary>
            <remarks>When overriding OnVisibleIndexChanged in a derived class, be sure to call the base class's OnVisibleIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.OnWidthChanged(System.EventArgs)">
            <summary>Raises the WidthChanged event.</summary>
            <remarks>When overriding OnWidthChanged in a derived class, be sure to call the base class's OnWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCanBeGrouped">
            <summary>Resets the value of the CanBeGrouped property to its default value, DefaultCanBeGrouped.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCanBeSorted">
            <summary>Resets the value of the CanBeSorted property to its default value, DefaultCanBeSorted.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCellEditor">
            <summary>OBSOLETE: The ResetCellEditor method is obsolete and has been replaced by the ResetCellEditorManager method. Resets the value of the CellEditor property to its default value, DefaultCellEditor.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCellEditorDisplayConditions">
            <summary>Resets the value of the CellEditorDisplayConditions property to its default value, DefaultCellEditorDisplayConditions.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCellEditorManager">
            <summary>Resets the value of the CellEditorManager property to its default value, DefaultCellEditorManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCellViewer">
            <summary>OBSOLETE: The ResetCellViewer method is obsolete and has been replaced by the ResetCellViewerManager method. Resets the value of the CellViewer property to its default value, DefaultCellViewer.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetCellViewerManager">
            <summary>Resets the value of the CellViewerManager property to its default value, DefaultCellViewerManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetDataComparer">
            <summary>Resets the value of the DataComparer property to its default value, DefaultDataComparer.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetFixed">
            <summary>Resets the value of the Fixed property to its default value, DefaultFixed.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetFormatProvider">
            <summary>Resets the value of the FormatProvider property to its default value, DefaultFormatProvider.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetFormatSpecifier">
            <summary>Resets the value of the FormatSpecifier property to its default value, DefaultFormatSpecifier.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetMaxWidth">
            <summary>Resets the value of the MaxWidth property to its default value, DefaultMaxWidth.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetMinWidth">
            <summary>Resets the value of the MinWidth property to its default value, DefaultMinWidth.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetNullText">
            <summary>Resets the value of the NullText property to its default value, DefaultNullText.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetNullValue">
            <summary>Resets the value of the NullValue property to its default value, DefaultNullValue.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetSortDirection">
            <summary>Resets the value of the SortDirection property to its default value, DefaultSortDirection.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetTitle">
            <summary>Resets the value of the Title property to its default value, DefaultTitle.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.ResetWidth">
            <summary>Resets the value of the Width property to its default value, DefaultWidth.</summary>
        </member>
        <member name="M:Xceed.Grid.Column.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.AmbientParent">
            <summary>Gets the ambient parent of the column.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the column's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.CanBeGrouped">
            <summary>Gets or sets a boolean value indicating if the column can be used to group the data rows.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.CanBeSorted">
            <summary>Gets or sets a boolean value indicating if the column can be sorted.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.CellEditor">
            <summary>OBSOLETE: The CellEditor property is obsolete and has been replaced by the CellEditorManager property. Gets or sets the editor that will be used to edit the content of each cell in the column. The editor must implement the ICellEditor interface.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.CellEditorDisplayConditions">
            <summary>Gets or sets a value representing under what conditions cell editors are displayed.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.CellEditorManager">
            <summary>Gets or sets the CellEditorManager that will be used to edit the content of the column's cells.</summary>
            <remarks>             If the CellEditorManager property has not been explicitly         set, the default CellEditorManager for the column's         datatype will be used.                                       Column Datatype                 Default                 CellEditorManager                                           String                 TextEditor                                           Boolean                 CheckBoxEditor                                           DateTime                 DateEditor                                           Image                 None                                           Numeric                 NumericViewer                           </remarks>
        </member>
        <member name="P:Xceed.Grid.Column.CellViewer">
            <summary>OBSOLETE: The CellViewer property is obsolete and has been replaced by the CellViewerManager property. Gets or sets the viewer that will be used to view the content of each cell in the column. The viewer must implement the ICellViewer interface.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.CellViewerManager">
            <summary>Gets or sets the CellViewerManager that will be used to view the content of the column's cells.</summary>
            <remarks>                          Cell/Column Datatype             Default CellViewerManager                               String             None                               Boolean             CheckBoxViewer                               DateTime             DateViewer                               Image             ImageViewer                               Numeric             NumericViewer              </remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DataComparer">
            <summary>Gets or sets an instance of a class which implements the IComparer interface in order to compare the column's data during grouping and sorting.</summary>
            <remarks>    To reset the value of the DataComparer property to its     default value, DefaultDataComparer, the ResetDataComparer     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DataType">
            <summary>Gets the data type of the column.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCanBeGrouped">
            <summary>Gets the default value of the CanBeGrouped property.</summary>
            <remarks>    When overriding DefaultCanBeGrouped in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCanBeSorted">
            <summary>Gets the default value of the CanBeSorted property.</summary>
            <remarks>    When overriding DefaultCanBeSorted in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCellEditor">
            <summary>OBSOLETE: The DefaultCellEditor property is obsolete and has been replaced by the DefaultCellEditorManager property. Gets the default value of the CellEditor property.</summary>
            <remarks>When overriding DefaultCellEditor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCellEditorDisplayConditions">
            <summary>Gets the default value of the CellEditorDisplayConditions property.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCellEditorManager">
            <summary>Gets the default value of the CellEditorManager property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCellViewer">
            <summary>OBSOLETE: The DefaultCellViewer property is obsolete and has been replaced by the DefaultCellViewerManager property. Gets the default value of the CellViewer property.</summary>
            <remarks>When overriding DefaultCellViewer in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultCellViewerManager">
            <summary>Gets the default value of the CellViewerManager property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultDataComparer">
            <summary>Gets the default value of the DataComparer property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultFixed">
            <summary>Gets the default value of the Fixed property.</summary>
            <remarks>    When overriding DefaultFixed in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultFormatProvider">
            <summary>Gets the default value of the FormatProvider property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultFormatSpecifier">
            <summary>Gets the default value of the FormatSpecifier property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultMaxWidth">
            <summary>Gets the default value of the MaxWidth property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultMinWidth">
            <summary>Gets the default value of the MinWidth property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultNullText">
            <summary>Gets the default value of the NullText property.</summary>
            <remarks>When overriding DefaultNullText in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultNullValue">
            <summary>Gets the default value of the NullValue property.</summary>
            <remarks>When overriding DefaultNullValue in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultReadOnly">
            <summary>Gets the default value of the ReadOnly property.</summary>
            <remarks>    When overriding DefaultReadOnly in a derived class,     IsReadOnlyAmbient should also be overridden to return     false.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultSortDirection">
            <summary>Gets the default value of the SortDirection property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultTitle">
            <summary>Gets the default value of the Title property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DefaultWidth">
            <summary>Gets the default value of the Width property.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.DisplayableIndex">
            <summary>Gets the displayable index of the column.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.FieldName">
            <summary>Gets the field name of the column.</summary>
            <remarks>    If the data is retrieved from a dataset, this property     corresponds to the field name. If the column is unbound, it     represents the user-provided name.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.Fixed">
            <summary>Gets or sets a boolean value indicating if the column is fixed.</summary>
            <remarks>    Programmatically, when a column is fixed by setting its     Fixed property to true, it will be appended to the right of the     currently fixed columns. Its VisibleIndex property will not be     modified allowing for the column to return to its previous     visible index when its Fixed property is set to false.     If a column is fixed through user interaction (dragging a     column to the left of the fixed column splitter), its     VisibleIndex will be modified to reflect its new position. If     the column is then "un-fixed" programmatically by setting the     Fixed property to false it may or may not end up in its     previous position (since the VisibleIndex property was     modified).</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.FormatProvider">
            <summary>Gets or sets the custom Format Provider that will be used to format the data in the column's cells.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the "Format Specifiers     and Format Providers" topic of the .NET Framework.     To reset the value of the FormatProvider property to its     default value, DefaultFormatProvider, the ResetFormatProvider     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.FormatSpecifier">
            <summary>Gets or sets the format that will be used to display data, in the column's cells.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the "Format Specifiers     and Format Providers" topic of the .NET Framework.     To reset the value of the FormatSpecifier property to its     default value, DefaultFormatSpecifier, the ResetFormatSpecifier     method must be called or the FormatSpecifier property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.Index">
            <summary>Gets the index of the column in the grid's collection of columns.</summary>
            <remarks>    This value might or might not correspond to the value of     the VisibleIndex property.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.IsFirstDisplayable">
            <summary>Gets a boolean value indicating whether the first column is displayable.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.IsLastDisplayable">
            <summary>Gets a boolean value indicating whether the last column is displayable.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.IsReadOnlyAmbient">
            <summary>Gets a boolean value indicating if the ReadOnly property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.MaxWidth">
            <summary>Gets or sets the maximum width of the column, in pixels.</summary>
            <remarks>    To reset the value of the MaxWidth property to its     default value, DefaultMaxWidth, the ResetMaxWidth method must     be called.If the value of the MaxWidth property becomes     smaller than the value of the MinWidth property, then MinWidth     will become equal to MaxWidth. If the value of the Width     property becomes larger than MaxWidth, then Width will become     equal to MaxWidth.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.MinWidth">
            <summary>Gets or sets the minimum width of the column, in pixels.</summary>
            <remarks>    To reset the value of the MinWidth     property to its default value, DefaultMinWidth, the     ResetMinWidth method must be called.If the value of the     MinWidth property becomes larger than the     value of the MaxWidth property, then MaxWidth     will become equal to MinWidth. If the value of the Width     property becomes smaller than MinWidth, then     Width will become equal to     MinWidth.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.NullText">
            <summary>Gets or sets the text that is displayed when one of the column's cells contains $$NULL$$.</summary>
            <remarks>    By default, this property is set to Empty.     To reset the value of the NullText property to its     default value, DefaultNullText, the ResetNullText method must     be called or the NullText property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.NullValue">
            <summary>Gets or sets the $$NULL$$ value of the column.</summary>
            <remarks>    If NullValue is assigned to the Value property of one of     the column's cells, NullText will be displayed in the cell when     it loses focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.ParentGrid">
            <summary>Gets the parent grid of the column.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.ReportStyle">
            <summary>Gets the report style of the column.</summary>
            <remarks>    The report style of a column will affect all the     cells contained in the column.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a ColumnReportStyle from being created in the case     where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.SortDirection">
            <summary>Gets or sets a value indicating the direction in which the column is sorted.</summary>
            <remarks>    Setting the SortDirection to Ascending or Descending will     add the column to the grid's SortedColumns property. Setting     the SortDirection to none will remove the column from the     collection.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.SortIndex">
            <summary>Gets the index of the column within the SortedColumns list.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.Title">
            <summary>Gets or sets the title of the column displayed in the corresponding cell in the ColumnManagerRow.</summary>
            <remarks>    The title of the column might or might not correspond to     the FieldName property.     To reset the value of the Title property to its default     value, DefaultTitle, the ResetTitle method must be called or     the Title property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.VisibleIndex">
            <summary>Gets or sets the visible position of the column.</summary>
            <remarks>    The visible position of the column does not     necessarily correspond to its position in the data     source.     The value used to change the visual positions of the     columns can be higher than the number of columns. For example,     if a grid contains 4 columns and the visual position of the     first column is changed to 42, its new visible position, once     the visible positions of the columns has been resequenced would     be 3 (the 4th visible column).     If the visible indexes of the columns are changed between     calls to BeginInit and EndInit, the visible positions of the     columns will only be resequenced once EndInit is called. The     physical Index of the column will determine its visible     position if 2 or more columns end up with the same visual     index.</remarks>
        </member>
        <member name="P:Xceed.Grid.Column.VisibleNonAmbient">
            <summary>This method is reserved for internal use and is not intended to be used from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Column.Width">
            <summary>Gets or sets the width of the column in pixels.</summary>
            <remarks>    In order for a column to have a fixed size, the MinWidth     and MaxWidth properties must be set to the same value.     To prevent the column from being resized at run-time, the     AllowColumnResize property must be set to false.     To reset the value of the Width property to its default     value, DefaultWidth, the ResetWidth method must be     called.</remarks>
        </member>
        <member name="E:Xceed.Grid.Column.CanBeGroupedChanged">
            <summary>Raised when the value of the CanBeGrouped property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CanBeSortedChanged">
            <summary>Raised when the value of the CanBeSorted property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CellEditorChanged">
            <summary>OBSOLETE: The CellEditorChanged event is obsolete and has been replaced by the CellEditorManagerChanged event. Raised when the value of the CellEditor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CellEditorDisplayConditionsChanged">
            <summary>Raised when the value of the CellEditorDisplayConditions property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CellEditorManagerChanged">
            <summary>Raised when the value of the CellEditorManager property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CellViewerChanged">
            <summary>OBSOLETE: The CellViewerChanged event is obsolete and has been replaced by the CellViewerManagerChanged event. Raised when the value of the CellViewer property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.CellViewerManagerChanged">
            <summary>Raised when the value of the CellViewerManager property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.DataComparerChanged">
            <summary>Raised when the value of the DataComparer property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.FixedChanged">
            <summary>Raised when the value of the Fixed property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.FormatProviderChanged">
            <summary>Raised when the value of the FormatProvider property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.FormatSpecifierChanged">
            <summary>Raised when the value of the FormatSpecifier property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.MaxWidthChanged">
            <summary>Raised when the value of the MaxWidth property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.MinWidthChanged">
            <summary>Raised when the value of the MinWidth property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.NullTextChanged">
            <summary>Raised when the value of the NullText property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.NullValueChanged">
            <summary>Raised when the value of the NullValue property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.SortDirectionChanged">
            <summary>Raised when the value of the SortDirection property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.TitleChanged">
            <summary>Raised when the value of the Title property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.VisibleIndexChanged">
            <summary>Raised when the value of the VisibleIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Column.WidthChanged">
            <summary>Raised when the value of the Width property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.ColumnAddedEventArgs">
            <summary>Provides information on the column that has been added to the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnAddedEventArgs.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the ColumnAddedEventArgs class specifying the control that has been added to the grid.</summary>
            <param name="column">A reference to the Column that has been added to the grid.</param>
        </member>
        <member name="P:Xceed.Grid.ColumnAddedEventArgs.Column">
            <summary>Gets the Column that has been added to the grid.</summary>
        </member>
        <member name="T:Xceed.Grid.ColumnManagerCell">
            <summary>Specialization of the Cell class which represents a cell that is used to manage the columns in the grid.</summary>
            <remarks>    Each column in the grid can be resized, sorted and moved     using its corresponding ColumnManagerCell.</remarks>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the ColumnManagerCell class specifying its parent column.</summary>
            <remarks>    The parent row of a ColumnManagerCell will always be a     ColumnManagerRow.</remarks>
            <param name="parentColumn">A reference to the parent Column of the cell.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.#ctor(Xceed.Grid.ColumnManagerCell)">
            <summary>Initializes a new instance of the ColumnManagerCell class specifying the template that will be used to create the ColumnManagerCells that will be contained within the ColumnManagerRow.</summary>
            <param name="template">A reference to a ColumnManagerCell object that will be used to create the ColumnManagerCells that will be contained within the ColumnManagerRow.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.#ctor(System.String)">
            <summary>Initializes a new instance of the ColumnManagerCell class specifying its field name.</summary>
            <param name="name">The field name of the ColumnManagerCell.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.CreateInstance">
            <summary>Creates a new Cell object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.GetDisplayTextCore">
            <summary>Retrieves the formatted text to paint in the cell. This does not necessarily correspond to Title.</summary>
            <returns>The formatted text to paint in the cell. The value.ToString() is returned. If the cell Value is $$NULL$$, string.empty is returned.</returns>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the cell in pixels.</summary>
            <returns>The fitted height of the cell in pixels. If mode is set to AutoHeightMode.AllContent and the value of the cell is $$NULL$$, DBNull or Empty, then the equivalent of calling GetFittedHeight with AutoHeightMode.Minimum is returned.</returns>
            <remarks>    The fitted height of the cell is calculated in regards to     the current width of its parent column, taking into     consideration the WordWrap property only if mode is set to     AllContent.     If the WordWrap property is set to true, then the fitted     height of the cell will represent the height needed to display     all cell's content appropriately. If the WordWrap     property is set to false, then the fitted height of the cell     will represent the height needed to display only one     line of data in the cell.     If the parent row's FitHeightToEditors is true, then the     height of the cell's editor will be consulted and if its height     is greater than the height of the viewer, then the fitted     height of the editor will be used.</remarks>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the cell will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">The Graphics object used to paint the cell.</param>
            <param name="printing">true if the cell is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.GetFittedDisplayWidth(Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted width of the cell in pixels.</summary>
            <returns>A value containing the fitted width of the cell, including its Borders, in pixels.</returns>
            <remarks>    The fitted width of the cell represents the width     necessary to display the cell's data on one line, regardless of     the value of the WordWrap property.</remarks>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint the cell.</param>
            <param name="printing">true if the cell is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.GetValue">
            <summary>Retrieves the value assigned to the ColumnManagerCell.</summary>
            <returns>The value assigned to the ColumnManagerCell.</returns>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnClick(System.EventArgs)">
            <summary>Raises the Click event.</summary>
            <remarks>When overriding OnClick in a derived class, be sure to call the base class's OnClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <remarks>When overriding OnDoubleClick in a derived class, be sure to call the base class's OnDoubleClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <remarks>When overriding OnMouseEnter in a derived class, be sure to call the base class's OnMouseEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the grid element.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the ColumnManagerCell.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the column manager cell in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.ResetHotTracking">
            <summary>Resets the value of the HotTracking property to its default value, DefaultHotTracking.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerCell.SetValue(System.Object)">
            <summary>Assigns the value to the ColumnManagerCell.</summary>
            <param name="value">A reference to the value being assigned to the ColumnManagerCell.</param>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.AmbientBackColor">
            <summary>Gets the ambient value of the column manager cell's BackColor property.</summary>
            <remarks>    The ambient background color is the background color     inherited from the ColumnManagerCell's parent in the case where     its own ForeColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.AmbientHotTracking">
            <summary>Gets the ambient value of the grid element's HotTracking property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own HotTracking property is not     explicitly set.     If the value of the IsHotTrackingAmbient property is true     then both the AmbientHotTracking and HotTracking properties     will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.Borders">
            <summary>Gets the borders of the Cell.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.DefaultAccessibleDefaultActionDescription">
            <summary>Gets the default value of the AccessibleDefaultActionDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDefaultActionDescription     in a derived class, the value returned by your implementation     of DefaultAccessibleDefaultActionDescription should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.DefaultAccessibleDescription">
            <summary>Gets the default value of the AccessibleDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDescription in a derived     class, the value returned by your implementation of     DefaultAccessibleDescription should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.DefaultCellViewer">
            <summary>OBSOLETE: The DefaultCellViewer property is obsolete and has been replaced by the DefaultCellViewerManager property. Gets the default value of the CellViewer property.</summary>
            <remarks>    When overriding DefaultCellViewer in a derived class,     IsCellViewerAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultCellViewer should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.DefaultHotTracking">
            <summary>Gets the default value of the HotTracking property</summary>
            <remarks>    When overriding DefaultHotTracking in a derived class,     IsHotTrackingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultHotTracking should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.DefaultVerticalAlignment">
            <summary>Gets the default value of the VerticalAlignment property.</summary>
            <remarks>    When overriding DefaultVerticalAlignment in a derived     class, IsVerticalAlignmentAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultVerticalAlignment should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.HotTracking">
            <summary>Gets or sets a boolean value indicating if hot tracking is enabled for the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.IsCellViewerAmbient">
            <summary>OBSOLETE: The IsCellViewerAmbient property is obsolete and has been replaced by the IsCellViewerManagerAmbient property." Gets a boolean value indicating if the CellViewer property gets its value from its parent column.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.IsHotTrackingAmbient">
            <summary>Gets a boolean value indicating if the HotTracking property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.IsVerticalAlignmentAmbient">
            <summary>Gets a boolean value indicating if the VerticalAlignment property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerCell.MouseState">
            <summary>Value indicating if the mouse events will be handled by the ColumnManagerCell.</summary>
            <remarks>This property is typically consulted to determine if the base implementation of the OnMouseXyz methods should be called.</remarks>
        </member>
        <member name="T:Xceed.Grid.ColumnManagerRow">
            <summary>Specialization of the CellRow class which represents a row that contains ColumnManagerCell which are used to manage the columns in the grid.</summary>
            <remarks>    ColumnManagerCells can be used to resize, sort and move     each column in the grid.     Every row that contains cells will contain a cell for     each column in the grid. Each of these cells will always have     the same index, name and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.     Any value assigned to the BackColor or BackgroundImage     will only be reflected in the ColumnManagerRow when the     GridControl's UIStyle property is set to     UIStyle.WindowsClassic.</remarks>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.#ctor">
            <summary>Initializes a new instance of the ColumnManagerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.#ctor">
            <summary>Initializes a new instance of the ColumnManagerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.#ctor(Xceed.Grid.ColumnManagerRow)">
            <summary>Initializes a new instance of the ColumnManagerRow class specifying the template that will be used to create the ColumnManagerRows contained within the grid.</summary>
            <remarks>    Although it is more common to have only one     ColumnManagerRow in the fixed headers of a grid, a     ColumnManagerRow can also be added to any other header or     footer section of the grid or any group.</remarks>
            <param name="template">A reference to a ColumnManagerRow object that will be used to create the ColumnManagerRows contained within the grid.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the ColumnManagerRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the ColumnManagerRow's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the ColumnManagerRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">The Column for which to create the new Cell.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.CreateInstance">
            <summary>Creates a new Row object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.OnAllowColumnReorderChanged(System.EventArgs)">
            <summary>Raises the AllowColumnReorderChanged event.</summary>
            <remarks>When overriding OnAllowColumnReorderChanged in a derived class, be sure to call the base class's OnAllowColumnReorderChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.OnAllowColumnResizeChanged(System.EventArgs)">
            <summary>Raises the AllowColumnResizeChanged event.</summary>
            <remarks>When overriding OnAllowColumnResizeChanged in a derived class, be sure to call the base class's OnAllowColumnResizeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.OnAllowSortChanged(System.EventArgs)">
            <summary>Raises the AllowSortChanged event.</summary>
            <remarks>When overriding OnAllowSortChanged in a derived class, be sure to call the base class's OnAllowSortChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the ColumnManagerRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.PaintBorders(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the borders of the ColumnManagerRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the column manager row in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.ResetAllowColumnReorder">
            <summary>Resets the value of the AllowColumnReorder property to its default value, DefaultAllowColumnReorder.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.ResetAllowColumnResize">
            <summary>Resets the value of the AllowColumnResize property to its default value, DefaultAllowColumnResize.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.ResetAllowSort">
            <summary>Resets the value of the AllowSort property to its default value, DefaultAllowSort.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnManagerRow.ResetHotTracking">
            <summary>Resets the value of the HotTracking property to its default value, DefaultHotTracking.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.AllowColumnReorder">
            <summary>Gets or sets a boolean value indicating if the columns can be reordered.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.AllowColumnResize">
            <summary>Gets or sets a boolean value indicating if the columns can be resized using the ColumnManagerRow.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.AllowSort">
            <summary>Gets or sets a boolean value indicating if the columns can sorted.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.AmbientHotTracking">
            <summary>Gets the ambient value of the grid element's HotTracking property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own HotTracking property is not     explicitly set.     If the value of the IsHotTrackingAmbient property is true     then both the AmbientHotTracking and HotTracking properties     will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.Borders">
            <summary>Gets the borders of the ColumnManagerRow.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.CellType">
            <summary>Gets the Type of the cells contained in the ColumnManagerRow.</summary>
            <remarks>typeof( ColumnManagerCell ) is always returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultAllowColumnReorder">
            <summary>Gets the default value of the AllowColumnReorder property.</summary>
            <remarks>When overriding DefaultAllowColumnReorder in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultAllowColumnResize">
            <summary>Gets the default value of the AllowColumnResize property.</summary>
            <remarks>When overriding DefaultAllowColumnResize in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultAllowSort">
            <summary>Gets the default value of the AllowSort property.</summary>
            <remarks>When overriding DefaultAllowSort in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
            <remarks>When overriding DefaultCanBeCurrent in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultHotTracking">
            <summary>Gets the default value of the HotTracking property</summary>
            <remarks>    When overriding DefaultHotTracking in a derived class,     IsHotTrackingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultHotTracking should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultShowFixedColumnSplitter">
            <summary>Gets the default value of the ShowFixedColumnSplitter property.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.DefaultShowTreeLine">
            <summary>Gets the default value of the ShowTreeLine property.</summary>
            <remarks>    When overriding DefaultShowTreeLine in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.HotTracking">
            <summary>Gets or sets a boolean value indicating if hot tracking is enabled for the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnManagerRow.IsHotTrackingAmbient">
            <summary>Gets a boolean value indicating if the HotTracking property gets its value from its parent.</summary>
        </member>
        <member name="E:Xceed.Grid.ColumnManagerRow.AllowColumnReorderChanged">
            <summary>Raised when the value of the AllowColumnReorder property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.ColumnManagerRow.AllowColumnResizeChanged">
            <summary>Raised when the value of the AllowColumnResize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.ColumnManagerRow.AllowSortChanged">
            <summary>Raised when the value of the AllowSort property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.ColumnRemovedEventArgs">
            <summary>Provides information on the column that was removed from the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.ColumnRemovedEventArgs.#ctor(Xceed.Grid.Column,System.Int32)">
            <summary>Initializes a new instance of the ColumnRemovedEventArgs class.</summary>
            <param name="column">A reference to the Column that was removed from the grid.</param>
            <param name="index">The zero-based index at which the column was removed.</param>
        </member>
        <member name="P:Xceed.Grid.ColumnRemovedEventArgs.Column">
            <summary>Gets the Column that was removed from the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.ColumnRemovedEventArgs.Index">
            <summary>Gets the zero-based index at which the Column was removed.</summary>
        </member>
        <member name="T:Xceed.Grid.DataBoundColumn">
            <summary>Represents a column that is bound to a data source.</summary>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.#ctor(Xceed.Grid.DataBoundColumn)">
            <summary>Initializes a new instance of the DataBoundColumn class specifying the DataBoundColumn that will be used as a template to create the DataBoundColumns.</summary>
            <param name="template">A reference to a DataBoundColumn object that will be used as a template to create the DataBoundColumns.</param>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.#ctor(System.String)">
            <summary>Initializes a new instance of the DataBoundColumn class specifying its name.</summary>
            <param name="name">The name of the column.Cannot be $$NULL$$ or Empty.</param>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.CreateInstance">
            <summary>Creates a new Column object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Column object.</returns>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.Initialize">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataBoundColumn.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.DataBoundColumn.Linked">
            <summary>Gets a boolean value indicating if the column is linked to a field in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.DataBoundColumn.ReadOnlyDataSource">
            <summary>Gets a boolean value indicating if the field in the data source to which the column is Linked is read only.</summary>
        </member>
        <member name="T:Xceed.Grid.DataCell">
            <summary>Specialization of the Cell class which represents a cell that contains databound data.</summary>
        </member>
        <member name="M:Xceed.Grid.DataCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataCell.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the DataCell class specifying its parent column.</summary>
            <param name="parentColumn">The parent Column of the cell.</param>
        </member>
        <member name="M:Xceed.Grid.DataCell.#ctor(Xceed.Grid.DataCell)">
            <summary>Initializes a new instance of the DataCell class specifying the DataCell that will be used as a template to create other DataCell objects.</summary>
            <param name="template">A reference to a DataCell object that will be used as a template to create other DataCell objects.</param>
        </member>
        <member name="M:Xceed.Grid.DataCell.#ctor(System.String)">
            <summary>Initializes a new instance of the DataCell class specifying its field name.</summary>
            <remarks>    The name of the cell must correspond to the field     name of the FieldName property of one of the grid's     columns.</remarks>
            <param name="fieldName">The field name of the cell. Cannot be $$NULL$$ or Empty.</param>
        </member>
        <member name="M:Xceed.Grid.DataCell.CreateInstance">
            <summary>Creates a new DataCell object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.DataCell.GetValue">
            <summary>Retrieves the value assigned to the data cell.</summary>
            <returns>The value assigned to the data cell.</returns>
        </member>
        <member name="M:Xceed.Grid.DataCell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataCell.SetValue(System.Object)">
            <summary>Assigns the value to the data cell.</summary>
            <param name="value">A reference to the value being assigned to the data cell.</param>
        </member>
        <member name="T:Xceed.Grid.DataRow">
            <summary>Specialization of the CellRow class which represents a row that is bound to a data source or user provided data.</summary>
            <remarks>    Every row that contains cells will contain a cell for     each column in the grid. Each of these cells will always have     the same index, name and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.</remarks>
        </member>
        <member name="M:Xceed.Grid.DataRow.#ctor">
            <summary>Initializes a new instance of the DataRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.#ctor">
            <summary>Initializes a new instance of the DataRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.#ctor(Xceed.Grid.DataRow)">
            <summary>Initializes a new instance of the DataRow class specifying the template that will be used to create the data rows contained within the grid.</summary>
            <param name="template">A reference to a DataRow object that will be used to create the data rows contained within the grid.</param>
        </member>
        <member name="M:Xceed.Grid.DataRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the DataRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the row's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.DataRow.BeginEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.CancelEditCore(System.Collections.ArrayList)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the DataRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">The Column object for which to create the new Cell.</param>
        </member>
        <member name="M:Xceed.Grid.DataRow.CreateInstance">
            <summary>Creates a new Row object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.DataRow.EndEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.GetStyle">
            <summary>Retrieves a reference to the VisualGridElementStyle that is applied to the row.</summary>
            <returns>A reference to the VisualGridElementStyle that is applied to the row.</returns>
        </member>
        <member name="M:Xceed.Grid.DataRow.GetStyleIndex">
            <summary>Retrieves the index of the GridElementStyle that is applied to the row.</summary>
            <returns>A zero-based index representing the GridElementStyle that is applied to the row.</returns>
        </member>
        <member name="M:Xceed.Grid.DataRow.OnShowPlusMinusChanged(System.EventArgs)">
            <summary>Raises the ShowPlusMinusChanged event.</summary>
            <remarks>When overriding OnShowPlusMinusChanged in a derived class, be sure to call the base class's OnShowPlusMinusChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DataRow.Remove">
            <summary>Removes the data row from the grid as well as from the data source.</summary>
        </member>
        <member name="M:Xceed.Grid.DataRow.ResetShowPlusMinus">
            <summary>Resets the value of the ShowPlusMinus property to its default value, DefaultShowPlusMinus.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientBackColor">
            <summary>Gets the ambient value of the datarow's BackColor property.</summary>
            <remarks>    The ambient background color is the background color     inherited from the DataRow's parent in the case where its own     BackColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.When overriding AmbientBackColor     in a derived class, if the base implementation of     AmbientBackColor is not returned the alternation of datarow     styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientClipPartialLine">
            <summary>Gets the ambient value of the datarow's ClipPartialLine property.</summary>
            <remarks>    The ambient value is inherited from the DataRow's parent     in the case where its own ClipPartialLine property is not     explicitly set.     If the value of the IsClipPartialLineAmbient property is     true then both the AmbientClipPartialLine and ClipPartialLine     properties will return the same value.When overriding     AmbientClipPartialLine in a derived class, if the base     implementation of AmbientClipPartialLine is not returned the     alternation of datarow styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientFont">
            <summary>Gets the ambient value of the datarow's Font property.</summary>
            <remarks>    The ambient font is the font inherited from the DataRow's     parent in the case where its own Font property is not     explicitly set.     If the value of the IsFontAmbient property is true then     both the AmbientFont and Font properties will return the same     value.When overriding AmbientFont in a derived class, if     the base implementation of AmbientFont is not returned the     alternation of datarow styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientForeColor">
            <summary>Gets the ambient value of the datarow's ForeColor property.</summary>
            <remarks>    The ambient foreground color is the foreground color     inherited from the DataRow's parent in the case where its own     ForeColor property is not explicitly set.     If the value of the IsForeColorAmbient property is true     then both the AmbientForeColor and ForeColor properties will     return the same value.When overriding AmbientForeColor     in a derived class, if the base implementation of     AmbientForeColor is not returned the alternation of datarow     styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientHorizontalAlignment">
            <summary>Gets the ambient value of the datarow's HorizontalAlignment property.</summary>
            <remarks>    The ambient horizontal alignment is the alignment     inherited from the DataRow's parent in the case where its own     HorizontalAlignment property is not explicitly set.     If the value of the IsHorizontalAlignmentAmbient property     is true then both the AmbientHorizontalAlignment and     HorizontalAlignment properties will return the same     value.When overriding AmbientHorizontalAlignment in a     derived class, if the base implementation of     AmbientHorizontalAlignment is not returned the alternation of     datarow styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientTrimming">
            <summary>Gets the ambient value of the datarow's Trimming property.</summary>
            <remarks>    The ambient trimming is the trimming inherited from the     DataRow's parent in the case where its own Trimming property is     not explicitly set.     If the value of the IsTrimmingAmbient property is true     then both the AmbientTrimming and Trimming properties will     return the same value.When overriding AmbientTrimming in     a derived class, if the base implementation of AmbientTrimming     is not returned the alternation of datarow styles will no     longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientVerticalAlignment">
            <summary>Gets the ambient value of the datarow's VerticalAlignment property.</summary>
            <remarks>    The ambient vertical alignment is the alignment inherited     from the DataRow's parent in the case where its own     VerticalAlignment property is not explicitly set.     If the value of the IsVerticalAlignmentAmbient property     is true then both the AmbientVerticalAlignment and     VerticalAlignment properties will return the same     value.When overriding AmbientVerticalAlignment in a     derived class, if the base implementation of     AmbientVerticalAlignment is not returned the alternation of     datarow styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.AmbientWordWrap">
            <summary>Gets the ambient value of the datarow's WordWrap property.</summary>
            <remarks>    The ambient value is inherited from the DataRow's parent     in the case where its own WordWrap property is not explicitly     set.     If the value of the IsWordWrapAmbient property is true     then both the AmbientWordWrap and WordWrap properties will     return the same value.When overriding AmbientWordWrap in     a derived class, if the base implementation of AmbientWordWrap     is not returned the alternation of datarow styles will no     longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.CellType">
            <summary>Gets the Type of the cells contained in the data row.</summary>
            <remarks>typeof( DataCell ) is always returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultBackgroundImage">
            <summary>Gets the default value of the BackgroundImage property.</summary>
            <remarks>    When overriding DefaultBackgroundImage in a derived     class, the value returned by your implementation should     not be dynamic.     If the base implementation of DefaultBackgroundImage is     not returned in the override, the alternation of datarow styles     will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultBackgroundImageAlignment">
            <summary>Gets the default value of the BackgroundImageAlignment property.</summary>
            <remarks>    When overriding DefaultBackgroundImageAlignment in a     derived class, the value returned by your implementation should     not be dynamic.     If the base implementation of     DefaultBackgroundImageAlignment is not returned in the     override, the alternation of datarow styles will no longer     function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultBackgroundImageStyle">
            <summary>Gets the default value of the BackgroundImageStyle property.</summary>
            <remarks>    When overriding DefaultBackgroundImageStyle in a derived     class, the value returned by your implementation should     not be dynamic.     If the base implementation of DefaultBackgroundImageStyle     is not returned in the override, the alternation of datarow     styles will no longer function.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultCanBeSelected">
            <summary>Gets the default value of the CanBeSelected property.</summary>
            <remarks>When overriding DefaultCanBeSelected in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultHotVisualStyle">
            <summary>Gets the default visual style of a DataRow that is in a hot state.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultShowPlusMinus">
            <summary>Gets the default value of the ShowPlusMinus property.</summary>
            <remarks>    When overriding DefaultShowPlusMinus in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DataRow.DefaultVisibleWhenCollapsed">
            <summary>Gets the default value of the VisibleWhenCollapsed property.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.DetailGrids">
            <summary>Gets the list of detail grids associated with the DataRow.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.EnforceCellDataTypes">
            <summary>Gets a boolean value indicating if the data types of the cells should match the data type of their respective parent columns.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.Index">
            <summary>Gets the index of the row in the grid's collection of DataRows.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.ShowPlusMinus">
            <summary>Gets or sets a value indicating whether plus-sign (+) and minus-sign (-) buttons are displayed next to DataRows that contain child DetailGrids.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.SourceObject">
            <summary>Gets the object from which the row is getting is value.</summary>
        </member>
        <member name="P:Xceed.Grid.DataRow.VisibleWhenCollapsed">
            <summary>Gets a boolean value indicating if the row is visible when its parent group is collapsed.</summary>
            <remarks>    This property cannot be set since a DataRow can never be     visible when its parent group is collpased.</remarks>
        </member>
        <member name="E:Xceed.Grid.DataRow.ShowPlusMinusChanged">
            <summary>Raised when the value of the ShowPlusMinus property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.DetailGrid">
            <summary>Represents a grid that is used to display detail data in a hierarchical master/detail grid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.#ctor">
            <summary>Initializes a new instance of the DetailGrid class.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.#ctor">
            <summary>Initializes a new instance of the DetailGrid class.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.#ctor(Xceed.Grid.DetailGrid,Xceed.Grid.DetailGrid)">
            <summary>Initializes a new instance of the DetailGrid class specifying the template that will be used to create other detail grids.</summary>
            <remarks>    If the SynchronizeDetailGrids property is set to false,     then there is no synchronization root.</remarks>
            <param name="template">A reference to a DetailGrid object that will be used to create other detail grids.</param>
            <param name="synchronizationRoot">The DetailGrid which will be used as the synchronization root. The DetailGrid that is used as the synchronization root will not appear in the grid but will be consulted whenever an operation such as sorting or grouping is performed on any of the detail grids of the same level (all the detail grids built from the same template).</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.#ctor(Xceed.Grid.GroupMargin,Xceed.Grid.SpacerRow,Xceed.Grid.SpacerRow)">
            <summary>Initializes a new instance of the DetailGrid class specifying its margins.</summary>
            <param name="sideMargin">A reference to a GroupMargin object representing the side margin of the detail grid. Cannot be $$NULL$$.</param>
            <param name="topMargin">A reference to a SpacerRow object representing the top margin of the detail grid. Cannot be $$NULL$$.</param>
            <param name="bottomMargin">A reference to a SpacerRow object representing the bottom margin of the detail grid. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.#ctor(Xceed.Grid.GroupMargin,Xceed.Grid.SpacerRow,Xceed.Grid.SpacerRow,Xceed.Grid.FixedColumnSplitter)">
            <summary>Initializes a new instance of the DetailGrid class specifying its margins.</summary>
            <param name="sideMargin">A reference to a GroupMargin object representing the side margin of the detail grid. Cannot be $$NULL$$.</param>
            <param name="topMargin">A reference to a SpacerRow object representing the top margin of the detail grid. Cannot be $$NULL$$.</param>
            <param name="bottomMargin">A reference to a SpacerRow object representing the bottom margin of the detail grid. Cannot be $$NULL$$.</param>
            <param name="fixedColumnSplitter">A reference to a FixedColumnSplitter object. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ApplyStyleSheet(Xceed.Grid.StyleSheet)">
            <summary>Applies the specified stylesheet to the grid.</summary>
            <param name="styleSheet">A reference to the StyleSheet that will be applied to the grid.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.BeginInit">
            <summary>Signals the beginning of a batch modification process.</summary>
            <remarks>    During a batch modification process, data will not be     loaded into the detail grid, sorting operations will not be     done and the visible positions of columns will not be     resequenced. All of these operations will be accomplished once     EndInit is called.     When overriding BeginInit in a derived class, the base     implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.BringIntoView">
            <summary>Brings the detail grid into the visible area of the GridControl.</summary>
            <remarks>    The detail grid will always be brought into view, no     matter its state or its parent state. For example, if the     detail grid is in a collapsed group, the group will be     expanded.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.Clear">
            <summary>Clears the entire content of the grid including the data binding and styles and collections.</summary>
            <remarks>    Any GridElement that was added to the grid and any style     that was applied to the grid will be removed. The DataMember     and DataSource properties will be set to $$NULL$$.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.CreateInstance(Xceed.Grid.DetailGrid)">
            <summary>Creates a new DetailGrid object that is a copy of the current instance indicating if the new instance should be synchronized with the original detail grid.</summary>
            <returns>A reference to newly create DetailGrid object.</returns>
            <remarks>    If the SynchronizeDetailGrids property is set to false,     then there is no synchronization root.</remarks>
            <param name="synchronizationRoot">The DetailGrid which will be used as the synchronization root. The DetailGrid that is used as the synchronization root will not appear in the grid but will be consulted whenever an operation such as sorting or grouping is performed on any of the detail grids of the same level (all the detail grids built from the same template).</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.EndInit">
            <summary>Signals the end of a batch modification process.</summary>
            <remarks>    When EndInit is called, the data will be loaded into the     detail grid (if any data binding occurred during the process),     data rows will be sorted (if a sort operation was requested)     and the visible positions of columns will be resequenced (if     the VisibleIndex properties of columns were modified).     When overriding EndInit in a derived class, the base     implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.Initialize">
            <summary>Initializes the content of the detail grid.</summary>
            <remarks>    The InitializingDetailGrid event can also be used to     initialize the content of the detail grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.Invalidate">
            <summary>Invalidates the rectangle of the detail grid and causes a paint message to be sent to the GridControl.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnAddingDataRow(Xceed.Grid.AddingDataRowEventArgs)">
            <summary>Raises the AddingDataRow event.</summary>
            <remarks>When overriding OnAddingDataRow in a derived class, be sure to call the base class's OnAddingDataRow method so that registered delegates receive the event.</remarks>
            <param name="e">An AddingDataRowEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnAllowCellNavigationChanged(System.EventArgs)">
            <summary>Raises the AllowCellNavigationChanged event.</summary>
            <remarks>When overriding OnAllowCellNavigationChanged in a derived class, be sure to call the base class's OnAllowCellNavigationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnAutoCreateColumnsChanged(System.EventArgs)">
            <summary>Raises the AutoCreateColumnsChanged event.</summary>
            <remarks>When overriding OnAutoCreateColumnsChanged in a derived class, be sure to call the base class's OnAutoCreateColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnColumnAdded(Xceed.Grid.ColumnAddedEventArgs)">
            <summary>Raises the ColumnAdded event.</summary>
            <param name="e">A ColumnAddedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnColumnRemoved(Xceed.Grid.ColumnRemovedEventArgs)">
            <summary>Raises the ColumnRemoved event.</summary>
            <param name="e">A ColumnRemovedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnDataBindingChanged(System.EventArgs)">
            <summary>Raises the DataBindingChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnDataMemberChanged(System.EventArgs)">
            <summary>Raises the DataMemberChanged event.</summary>
            <remarks>When overriding OnDataMemberChanged in a derived class, be sure to call the base class's OnDataMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnDataSourceChanged(System.EventArgs)">
            <summary>Raises the DataSourceChanged event.</summary>
            <remarks>When overriding OnDataSourceChanged in a derived class, be sure to call the base class's OnDataSourceChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnErrorBackColorChanged(System.EventArgs)">
            <summary>Raises the ErrorBackColorChanged event.</summary>
            <remarks>When overriding OnErrorBackColorChanged in a derived class, be sure to call the base class's OnErrorBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnErrorForeColorChanged(System.EventArgs)">
            <summary>Raises the ErrorForeColorChanged event.</summary>
            <remarks>When overriding OnErrorForeColorChanged in a derived class, be sure to call the base class's OnErrorForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnErrorVisualStyleChanged(System.EventArgs)">
            <summary>Raises the ErrorVisualStyleChanged event.</summary>
            <remarks>When overriding OnErrorVisualStyleChanged in a derived class, be sure to call the base class's OnErrorVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnGroupAdded(Xceed.Grid.GroupAddedEventArgs)">
            <summary>Raises the GroupAdded event.</summary>
            <remarks>When overriding OnGroupAdded in a derived class, be sure to call the base class's OnGroupAdded method so that registered delegates receive the event.</remarks>
            <param name="e">A GroupAddedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnGroupingUpdated(System.EventArgs)">
            <summary>Raises the GroupingUpdated event.</summary>
            <remarks>When overriding OnGroupingUpdated in a derived class, be sure to call the base class's OnGroupingUpdated method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnHideSelectionChanged(System.EventArgs)">
            <summary>Raises the HideSelectionChanged event.</summary>
            <remarks>When overriding OnHideSelectionChanged in a derived class, be sure to call the base class's OnHideSelectionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnInactiveSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionBackColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionBackColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnInactiveSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionForeColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionForeColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnInactiveSelectionVisualStyleChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionVisualStyleChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionVisualStyleChanged in a derived class, be sure to call the base class's OnInactiveSelectionVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnInitializingDetailGrid(Xceed.Grid.InitializingDetailGridEventArgs)">
            <summary>Raises the InitializingDetailGrid event.</summary>
            <param name="e">An InitializingDetailGridEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnInitializingNewDataRow(Xceed.Grid.InitializingNewDataRowEventArgs)">
            <summary>Raises the InitializingNewDataRow event.</summary>
            <remarks>When overriding OnInitializingNewDataRow in a derived class, be sure to call the base class's OnInitializingNewDataRow method so that registered delegates receive the event.</remarks>
            <param name="e">An InitializingNewDataRowEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnQueryGroupKeys(Xceed.Grid.QueryGroupKeysEventArgs)">
            <summary>Raises the QueryGroupKeys event.</summary>
            <remarks>When overriding OnQueryGroupKeys in a derived class, be sure to call the base class's OnQueryGroupKeys method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryGroupKeysEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the SelectionBackColorChanged event.</summary>
            <remarks>When overriding OnSelectionBackColorChanged in a derived class, be sure to call the base class's OnSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the SelectionForeColorChanged event.</summary>
            <remarks>When overriding OnSelecOnSelectionForeColorChangedtionBackColorChanged in a derived class, be sure to call the base class's OnSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnSelectionVisualStyleChanged(System.EventArgs)">
            <summary>Raises the SelectionVisualStyleChanged event.</summary>
            <remarks>When overriding OnSelectionVisualStyleChanged in a derived class, be sure to call the base class's OnSelectionVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnShowTreeLinesChanged(System.EventArgs)">
            <summary>Raises the ShowTreeLinesChanged event.</summary>
            <remarks>When overriding OnShowTreeLinesChanged in a derived class, be sure to call the base class's OnShowTreeLinesChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnShowUnlinkedColumnsChanged(System.EventArgs)">
            <summary>Raises the ShowUnlinkedColumnsChanged event.</summary>
            <remarks>When overriding OnShowUnlinkedColumnsChanged in a derived class, be sure to call the base class's OnShowUnlinkedColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnSorted(System.EventArgs)">
            <summary>Raises the Sorted event.</summary>
            <remarks>When overriding OnSorted in a derived class, be sure to call the base class's OnSorted method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.OnSortedColumnsChanged(System.EventArgs)">
            <summary>Raises the SortedColumnsChanged event.</summary>
            <remarks>When overriding OnSortedColumnsChanged in a derived class, be sure to call the base class's OnSortedColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetAllowCellNavigation">
            <summary>Resets the value of the AllowCellNavigation property to its default value, DefaultAllowCellNavigation.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetAutoCreateColumns">
            <summary>Resets the value of the AutoCreateColumns property to its default value, DefaultAutoCreateColumns.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetErrorBackColor">
            <summary>Resets the value of the ErrorBackColor property to its default value, DefaultErrorBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetErrorForeColor">
            <summary>Resets the value of the ErrorForeColor property to its default value, DefaultErrorForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetErrorVisualStyle">
            <summary>Resets the visual style of a row that contains a cell that contains an error in the DetailGrid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetHideSelection">
            <summary>Resets the value of the HideSelection property to its default value, DefaultHideSelection.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetInactiveSelectionBackColor">
            <summary>Resets the value of the InactiveSelectionBackColor property to its default value, DefaultInactiveSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetInactiveSelectionForeColor">
            <summary>Resets the value of the InactiveSelectionForeColor property to its default value, DefaultInactiveSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetInactiveSelectionVisualStyle">
            <summary>Resets the visual style of an inactive selected row in the DetailGrid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetSelectionBackColor">
            <summary>Resets the value of the SelectionBackColor property to its default value, DefaultSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetSelectionForeColor">
            <summary>Resets the value of the SelectionForeColor property to its default value, DefaultSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetSelectionVisualStyle">
            <summary>Resets the visual style of a selected row in the DetailGrid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetShowTreeLines">
            <summary>Resets the value of the ShowTreeLines property to its default value, DefaultShowTreeLines.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetShowUnlinkedColumns">
            <summary>Resets the value of the ShowUnlinkedColumns property to its default value, DefaultShowUnlinkedColumns.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetStyle">
            <summary>Resets the values of the properties affected by the StyleSheet) method to their default values.</summary>
            <remarks>    The Font, ForeColor, BackColor, ClipPartialLine,     WordWrap, HorizontalAlignment, VerticalAlignment, Trimming,     BackgroundImage, BackgroundImageAlignment,     BackgroundImageStyle, ErrorBackColor, ErrorForeColor,     SelectionBackColor, SelectionForeColor,     InactiveSelectionBackColor and InactiveSelectionForeColor     properties are affected by this method.</remarks>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.ResetTitle">
            <summary>Resets the value of the Title property to its default value, DefaultTitle.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.SetDataBinding(System.Object,System.String)">
            <summary>Sets the DataSource and DataMember properties at run time.</summary>
            <remarks>    The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the grid, then     the jagged array must be reassigned to the DataSource property     in order for the modifications to be reflected in the grid. If     an existing value is changed in the jagged array from outside     of the grid, for example the text of one of the elements, in     order for the changes to be reflected in the grid, the jagged     array can be reassigned to the grid OR the grid's     UpdateRectangles method can be called.</remarks>
            <param name="dataSource">The data source used to populate the grid, typed as Object.</param>
            <param name="dataMember">A string that specifies the table to bind to within the object returned by the DataSource property.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.UpdateDetailGrids">
            <summary>Updates the detail grid's contained in the detail grid. Any modifications made to the DetailGridTemplates property must be followed by a call to UpdateDetailGrids otherwise the changes will not be reflected in the detail grid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.UpdateGrouping">
            <summary>Updates the way in which the grid is grouped according to the groups specified in the GroupTemplates property.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGrid.UpdateRectangles">
            <summary>Recalculates and repaints (invalidates) the rectangles of each GridElement in the GridControl. The rectangles of the GridControl are not affected.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.AllowCellNavigation">
            <summary>Gets or sets a boolean value indicating if it is possible to navigate from cell to cell in the grid.</summary>
            <remarks>    If both AllowCellNavigation and each row's     AllowCellNavigation property is false, CurrentCell will always     be $$NULL$$ and cannot be set. This also implies that cells     will never have a focus rectangle.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.AmbientParent">
            <summary>Gets the ambient parent of the group.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the groups's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.AutoCreateColumns">
            <summary>Gets or sets a boolean value indicating if columns should be automatically created when the grid is bound.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.BottomMargin">
            <summary>Gets the bottom margin of the detail grid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.Columns">
            <summary>Gets a list of all the columns in the grid.</summary>
            <remarks>    All columns, both data bound and custom, visible and     non-visible, will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DataMember">
            <summary>Gets or sets a specific table in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DataRows">
            <summary>Gets a list of all the data rows in the grid, regardless of the group hierarchy and sort.</summary>
            <remarks>    This property preserves the same order as the data source     to which the grid is bound. In the case where the grid is     unbound, the original order is used.     The index of each datarow in the collection corresponds     to the row's index in the data source.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DataRowTemplate">
            <summary>Gets or sets a reference to the DataRow object used as a template to create the data rows that will be contained within the grid.</summary>
            <remarks>    All the datarows in the grid will take on the same     appearance as the DataRowTemplate. For example, if the     BackColor property of the DataRowTemplate is set to pink, all     the datarows in the grid will have pink as their background     color.     If changes are made to the DataRowTemplate while the     DataSource property is set, the changes will not automatically     be reflected in the grid. In order for the modifications to be     applied, the data source must be reassigned to the DataSource     property.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DataRowTemplateStyles">
            <summary>Gets a list of the styles applied to the grid's datarows.</summary>
            <remarks>    The DataRowTemplateStyles allow for the appearance of the     datarows in the grid to be alternated. For example, if there     are two styles in the collection, with the first having its     background color set to pink and the second to blue, the     background color of the datarows (once the grid is populated)     will alternate between pink and blue.Keep in mind that     any properties set directly on the DataRowTemplate will     "override" those of the styles. For example, if the background     color of the first datarow style is pink and the second blue     but the BackColor property of the DataRowTemplate was set to     green then, once the grid is populate, all the datarows will     have a green background.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DataSource">
            <summary>Gets or sets the data source used to populate the grid's DataRow object.</summary>
            <remarks>    If the DataSource contains more than one table, you must     set the DataMember property to a string that represents the     name of the table to bind to.     The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the grid, then     the jagged array must be reassigned to the DataSource property     in order for the modifications to be reflected in the grid. If     an existing value is changed in the jagged array from outside     of the grid, for example the text of one of the elements, in     order for the changes to be reflected in the grid, the jagged     array can be reassigned to the grid OR the grid's     UpdateRectangles method can be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultAllowCellNavigation">
            <summary>Gets the default value of the AllowCellNavigation property.</summary>
            <remarks>When overriding DefaultAllowCellNavigation in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultAutoCreateColumns">
            <summary>Gets the default value of the AutoCreateColumns property.</summary>
            <remarks>When overriding DefaultAutoCreateColumns in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultErrorBackColor">
            <summary>Gets the default value of the ErrorBackColor property.</summary>
            <remarks>When overriding DefaultErrorBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultErrorForeColor">
            <summary>Gets the default value of the ErrorForeColor property.</summary>
            <remarks>When overriding DefaultErrorForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultErrorVisualStyle">
            <summary>Gets the default visual style of a row that contains a cell that contains an error in the DetailGrid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultHideSelection">
            <summary>Gets the default value of the HideSelection property.</summary>
            <remarks>When overriding DefaultHideSelection in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultInactiveSelectionBackColor">
            <summary>Gets the default value of the InactiveSelectionBackColor property.</summary>
            <remarks>When overriding DefaultInactiveSelectionBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultInactiveSelectionForeColor">
            <summary>Gets the default value of the InactiveSelectionForeColor property.</summary>
            <remarks>When overriding DefaultInactiveSelectionForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultInactiveSelectionVisualStyle">
            <summary>Gets the default visual style of an inactive selected row in the DetailGrid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultSelectionBackColor">
            <summary>Gets the default value of the SelectionBackColor property.</summary>
            <remarks>When overriding DefaultSelectionBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultSelectionForeColor">
            <summary>Gets the default value of the SelectionForeColor property.</summary>
            <remarks>When overriding DefaultSelectionForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultSelectionVisualStyle">
            <summary>Gets the default visual style of a selected row in the DetailGrid</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultShowTreeLines">
            <summary>Gets the default value of the ShowTreeLines property.</summary>
            <remarks>When overriding DefaultShowTreeLines in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultShowUnlinkedColumns">
            <summary>Gets the default value of the ShowUnlinkedColumns property.</summary>
            <remarks>    When overriding DefaultShowUnlinkedColumns in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DefaultTitle">
            <summary>Gets the default value of the Title property.</summary>
            <remarks>When overriding DefaultTitle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.DetailGridTemplates">
            <summary>Gets a list of the DetailGrid objects used as templates to create the detail grids that will be associated with each of the grid's DataRows.</summary>
            <remarks>    The number of detail grids added to the detail grid's     collection of DetailGridTemplates will determine the number of     detail grids for each DataRow in the detail grid. For example,     if you add 2 DetailGrid objects to the detail grid's     DetailGridTemplates property, each DataRow in the detail grid     will have 2 detail grids associated with it.     In order for the modifications made to the detail grid     templates to be applied to the detail grid (after the detail     grid has been populated) the UpdateDetailGrids method must be     called.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ErrorBackColor">
            <summary>Gets or sets the background color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorBackColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ErrorForeColor">
            <summary>Gets or sets the foreground color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorForeColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ErrorVisualStyle">
            <summary>Gets or sets the visual style of a row that contains a cell that contains an error in the DetailGrid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.FixedColumnSplitter">
            <summary>Gets the grid's fixed column splitter.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.GroupTemplates">
            <summary>Gets a list of the Group objects used as templates to create the groups that will be contained within the grid.</summary>
            <remarks>    The number of groups added to the grid's collection of     GroupTemplates will determine the number of group     levels.     In order for the modifications made to the group     templates to be applied to the grid (after the grid has been     populated) the UpdateGrouping method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.HideSelection">
            <summary>Gets or sets a value indicating whether the selected rows in the grid remain highlighted when the grid loses focus.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.InactiveSelectionBackColor">
            <summary>Gets or sets the inactive selection background color of the grid.</summary>
            <remarks>    The InactiveSelectionBackColor is applied to the selected     rows when HideSelection is set to false and the grid does not     have focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.InactiveSelectionForeColor">
            <summary>Gets or sets the inactive selection foreground color of the grid.</summary>
            <remarks>    The InactiveSelectionForeColor is applied to the selected     rows when HideSelection is set to false and the grid does not     have focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.InactiveSelectionVisualStyle">
            <summary>    Gets or sets the visual style of an inactive selected row     in the DetailGrid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.InBatchInitialization">
            <summary>Gets a boolean value indicating if the grid is in batch initialization mode.</summary>
            <remarks>    The grid is in batch initialization mode when the     BeginInit and EndInit methods are used.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.IsCollapseRoot">
            <summary>Gets a boolean value indicating if the detail grid caused the collapsing of all its child detail grids.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ParentDataRow">
            <summary>Gets the parent DataRow of the detail grid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ReportStyle">
            <summary>Gets the report style of the detail grid.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridReportStyle from being created in the case     where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.SelectionBackColor">
            <summary>Gets or sets the selection background color of the grid.</summary>
            <remarks>    The SelectionBackColor is applied to the selected rows     when the grid has focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.SelectionForeColor">
            <summary>Gets or sets the selection foreground color of the grid.</summary>
            <remarks>    The SelectionForeColor is applied to the selected rows     when the grid has focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.SelectionVisualStyle">
            <summary>Gets or sets the visual style of a selected row in the DetailGrid.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ShowTreeLines">
            <summary>Gets or sets a boolean value indicating if the tree lines that link detail grids to their ParentGrid should be visible.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.ShowUnlinkedColumns">
            <summary>Gets or sets a boolean value indicating if the DataBoundColumns should be visible even if they are not linked to a field in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.SortedColumns">
            <summary>Gets a list of all the columns used to sort the grid.</summary>
            <remarks>    All columns whose SortDirection property has been set to     Ascending or Descending are automatically added to the grid's     collection or sorted columns. If a column's SortDirection     property is set to None, the column will automatically be     removed from the collection.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.Title">
            <summary>Gets or sets the title of the detail grid displayed in the GroupByRow.</summary>
            <remarks>    To reset the value of the Title property to its default     value, DefaultTitle, the ResetTitle method must be called or     the Title property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGrid.TopMargin">
            <summary>Gets the top margin of the detail grid.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.AddingDataRow">
            <summary>Raised when a new data row is being added to the grid.</summary>
            <remarks>    When bound to a data source, the AddingDataRow event is     raised for each row found in the data source. When in unbound     mode (providing data manually), it is raised once for each     DataRow added using the AddNew method afterEndEdit is     called in order to provide data to each cell in the row.</remarks>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.AllowCellNavigationChanged">
            <summary>Raised when the value of the AllowCellNavigation property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.AutoCreateColumnsChanged">
            <summary>Raised when the value of the AutoCreateColumns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ColumnAdded">
            <summary>Raised when a column is added to the grid.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ColumnRemoved">
            <summary>Raised when a column is removed from the grid.</summary>
            <remarks>    The index at which the column was removed should be     consulted through the Index property and not through the Index     property.</remarks>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.DataBindingChanged">
            <summary>Raised when the values of the DataSource or DataMember properties are changed, or when the String) method is called.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.DataMemberChanged">
            <summary>Raised when the value of the DataMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.DataSourceChanged">
            <summary>Raised when the value of the DataSource property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ErrorBackColorChanged">
            <summary>Raised when the value of the ErrorBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ErrorForeColorChanged">
            <summary>Raised when the value of the ErrorForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ErrorVisualStyleChanged">
            <summary>Raised when the value of the ErrorVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.GroupAdded">
            <summary>Raised when a new group is added to the grid.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.GroupingUpdated">
            <summary>Raised when the data rows in the grid have been grouped.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.HideSelectionChanged">
            <summary>Raised when the value of the HideSelection property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.InactiveSelectionBackColorChanged">
            <summary>Raised when the value of the InactiveSelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.InactiveSelectionForeColorChanged">
            <summary>Raised when the value of the InactiveSelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.InactiveSelectionVisualStyleChanged">
            <summary>Raised when the value of the InactiveSelectionVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.InitializingDetailGrid">
            <summary>Raised for each DataRow about to be added to the detail grid to initialize its detail grid(s).</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.InitializingNewDataRow">
            <summary>Raised only by the AddNew method to initialize the default values of cells in the data row.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.QueryGroupKeys">
            <summary>Raised after a data row has been built in order to group it.</summary>
            <remarks>    When creating custom groups, the GroupBy property must be     set in order for the groups which are created manually to be     sorted. These groups will be sorted in the same direction as     the columns whose fieldname is set in the GroupBy     property.</remarks>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.SelectionBackColorChanged">
            <summary>Raised when the value of the SelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.SelectionForeColorChanged">
            <summary>Raised when the value of the SelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.SelectionVisualStyleChanged">
            <summary>Raised when the value of the SelectionVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ShowTreeLinesChanged">
            <summary>Raised when the value of the ShowTreeLines property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.ShowUnlinkedColumnsChanged">
            <summary>Raised when the value of the ShowUnlinkedColumns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.Sorted">
            <summary>Raised when the grid has been sorted.</summary>
        </member>
        <member name="E:Xceed.Grid.DetailGrid.SortedColumnsChanged">
            <summary>Raised when the value of the SortedColumns property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.DetailGridMargin">
            <summary>Represents the margin of a detail grid.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGridMargin.#ctor">
            <summary>Initialize a new instance of the DetailGridMargin class.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGridMargin.#ctor">
            <summary>Initialize a new instance of the DetailGridMargin class.</summary>
        </member>
        <member name="M:Xceed.Grid.DetailGridMargin.#ctor(Xceed.Grid.DetailGridMargin,Xceed.Grid.GroupBase)">
            <summary>Initializes a new instance of the DetailGridMargin class specifying the template that will be used to create other DetailGridMargins.</summary>
            <param name="template">A reference to a DetailGridMargin object that will be used to create other DetailGridMargins.</param>
            <param name="parentGroup">A reference to a GroupBase object representing the DetailGridMargin's parent group.</param>
        </member>
        <member name="M:Xceed.Grid.DetailGridMargin.CreateInstance(Xceed.Grid.GroupBase)">
            <summary>Creates a new DetailGridMargin object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created GroupMargin object.</returns>
            <param name="parentGroup">A reference to a GroupBase object representing the DetailGridMargin's parent group.</param>
        </member>
        <member name="P:Xceed.Grid.DetailGridMargin.AmbientParent">
            <summary>Gets the ambient parent of the DetailGridMargin.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the DetailGridMargin's     properties are not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGridMargin.Borders">
            <summary>Gets the borders of the Cell.</summary>
        </member>
        <member name="P:Xceed.Grid.DetailGridMargin.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
            <remarks>When overriding DefaultVisible in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.DetailGridMargin.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="T:Xceed.Grid.EditLeftEventArgs">
            <summary>Provides information on the cell's data when the cell has exited edit mode.</summary>
        </member>
        <member name="M:Xceed.Grid.EditLeftEventArgs.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the EditLeftEventArgs class.</summary>
            <param name="commited">Indicates if the modifications have been committed to the cell.</param>
        </member>
        <member name="P:Xceed.Grid.EditLeftEventArgs.Commited">
            <summary>Gets a boolean value indicating if the modifications have been committed to the cell.</summary>
        </member>
        <member name="T:Xceed.Grid.EnteringEditEventArgs">
            <summary>Provides information on the Cell that is being edited.</summary>
        </member>
        <member name="M:Xceed.Grid.EnteringEditEventArgs.#ctor">
            <summary>Initializes a new instance of the EnteringEditEventArgs class.</summary>
        </member>
        <member name="M:Xceed.Grid.EnteringEditEventArgs.#ctor(Xceed.Grid.Editors.CellEditorManager,System.Boolean)">
            <summary>Initializes a new instance of the EnteringEditEventArgs class.</summary>
            <param name="cellEditorManager">The CellEditorManager that will be used to edit the content of the cell.</param>
            <param name="cancel">true to cancel the event; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.EnteringEditEventArgs.#ctor(Xceed.Grid.ICellEditor,System.Boolean)">
            <summary>OBSOLETE: The EnteringEditEventArgs( ICellEditor, bool ) constructor is obsolete and has been replaced by the EnteringEditEventArgs( CellEditorManager, bool ) constructor. Initializes a new instance of the EnteringEditEventArgs class.</summary>
            <param name="editor">The ICellEditor used to edit a cell.</param>
            <param name="cancel">true to cancel the event; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.EnteringEditEventArgs.CellEditor">
            <summary>OBSOLETE: The CellEditor property is obsolete and has been replaced by the CellEditorManager property. Gets or sets a reference to the ICellEditor used to edit a cell.</summary>
            <remarks>    If a new ICellEditor is specified, it will be used only     for the cell currently being edited and will be discarded once     the cell has been edited or the modifications rejected.</remarks>
        </member>
        <member name="P:Xceed.Grid.EnteringEditEventArgs.CellEditorManager">
            <summary>Gets or sets the CellEditorManager that will be used to edit the content of the cell.</summary>
        </member>
        <member name="T:Xceed.Grid.FixedColumnSplitter">
            <summary>Represents the area in a grid used as a splitter between the fixed columns and the scrollable columns.</summary>
            <remarks>    The fixed column splitter is located immediately to the     right of the fixed columns and can be used to add or remove     fixed columns.     The fixed column splitter's gripper is painted     only in a ColumnManagerRow.     To prevent the fixed column splitter from being displayed     in a row, the row's ShowFixedColumnSplitter property can be     used.</remarks>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.#ctor">
            <summary>Initializes a new instance of the FixedColumnSplitter class.</summary>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.#ctor">
            <summary>Initializes a new instance of the FixedColumnSplitter class.</summary>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.#ctor(Xceed.Grid.FixedColumnSplitter)">
            <summary>Initializes a new instance of the FixedColumnSplitter class specifying the FixedColumnSplitter to use as a template.</summary>
            <param name="template">The FixedColumnSplitter that will be used as a template.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.BringIntoView">
            <summary>Brings the fixed column splitter into the visible area of the grid.</summary>
            <remarks>When overriding BringIntoView in a derived class, you must make sure that the grid element is always brought into view, no matter its state or its parent state. For example, if the grid element is in a collapsed group, the group should be expanded. If the element is out of the grid's visible body, the grid should be scrolled until the element is in view.</remarks>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.CreateInstance">
            <summary>Creates a new FixedColumnSplitter object that is a copy of the current instance.</summary>
            <returns>A reference to newly create FixedColumnSplitter object.</returns>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.OnAllowRepositioningChanged(System.EventArgs)">
            <summary>Raises the AllowRepositioningChanged event.</summary>
            <remarks>When overriding OnAllowRepositioningChanged in a derived class, be sure to call the base class's OnAllowRepositioningChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.OnWidthChanged(System.EventArgs)">
            <summary>Raises the WidthChanged event.</summary>
            <remarks>When overriding OnWidthChanged in a derived class, be sure to call the base class's OnWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the fixed column splitter.</summary>
            <remarks>    When overridding PaintBackground in a derived class, the     base implementation must be called otherwise the     GridPaintEventArgs) and GridPaintEventArgs) methods will not be     called.</remarks>
            <param name="e">A GridPaintEventArgs that contains the necessaty data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.PaintGripperBackground(Xceed.Grid.ColumnManagerRow,Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the fixed column splitter's gripper.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="columnManagerRow">A reference to the ColumnManagerRow that contains the gripper. The gripper can only be displayed in a ColumnManagerRow.</param>
            <param name="e">A GridPaintEventArgs that contains the necessary data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.PaintGripperForeground(Xceed.Grid.ColumnManagerRow,Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the fixed column splitter's gripper.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="columnManagerRow">A reference to the ColumnManagerRow that contains the gripper. The gripper can only be displayed in a ColumnManagerRow.</param>
            <param name="e">A GridPaintEventArgs that contains the necessary data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the FixedColumnSplitter in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.ResetAllowRepositioning">
            <summary>Resets the value of the AllowRepositioning property to its default value, DefaultAllowRepositioning.</summary>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.ResetWidth">
            <summary>Resets the value of the Width property to its default value, DefaultWidth.</summary>
        </member>
        <member name="M:Xceed.Grid.FixedColumnSplitter.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.AllowRepositioning">
            <summary>Gets or sets a boolean value indicating if the fixed column splitter can be moved allowing for fixed columns to be added or removed.</summary>
            <remarks>    When the fixed column splitter is moved to the left of     one or more fixed columns, those columns become scrollable. If     the splitter is moved to the right of a scrollable column, all     the columns to the left of the splitter will become     fixed.     The Position property can be used to determine the     location of the fixed column splitter as well as to get the     number of fixed columns.</remarks>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.AmbientParent">
            <summary>Gets the ambient parent of the fixed column splitter.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the grid element's     properties are not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.Borders">
            <summary>Gets the borders of the fixed column splitter.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.DefaultAllowRepositioning">
            <summary>Gets the default value of the AllowRepositioning property.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.DefaultWidth">
            <summary>Gets the default value, in pixels, of the Width property.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.ParentGrid">
            <summary>Gets the parent grid of the fixed column splitter.</summary>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.Position">
            <summary>Gets or sets the position of the fixed column splitter.</summary>
            <remarks>    The fixed column splitter will always be located to the     immediate right of the fixed columns. Its position reflects the     number of fixed columns in the grid. For example, if the grid     contains 2 fixed columns, the position of the fixed column     splitter will be 2 (zero-based).     The Position property can also be used to determine the     number of fixed columns contained in the grid rather than     consulting each Column's Fixed property.</remarks>
        </member>
        <member name="P:Xceed.Grid.FixedColumnSplitter.Width">
            <summary>Gets or sets the width, in pixels, of the fixed column splitter.</summary>
        </member>
        <member name="E:Xceed.Grid.FixedColumnSplitter.AllowRepositioningChanged">
            <summary>Raised when the value of the AllowRepositioning property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.FixedColumnSplitter.WidthChanged">
            <summary>Raised when the value of the Width property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GradientMap">
            <summary>Represents a gradient map used to apply a Vista-like gradient to parts of the grid.</summary>
            <remarks>    A GradientMap applies a series of colors to a grid. The     colors run along an axis and change gradually from one color to     the next. Using this class you can create the illusion of light     and shadows, and smooth surfaces, on the parts of the grid to     which a GradientMap is applied.     A GradientMap provides two ways of controlling its     appearance. First, a list of gradient stops represents the     colors in the gradient and indicates where the colors are in     the gradient. Second, a gradient mode indicates how the grading     is done, namely, vertically (the default) or     horizontally.</remarks>
        </member>
        <member name="M:Xceed.Grid.GradientMap.#ctor">
            <summary>Initializes a new instance of the GradientMap class.</summary>
        </member>
        <member name="M:Xceed.Grid.GradientMap.#ctor">
            <summary>Initializes a new instance of the GradientMap class.</summary>
            <remarks>    By default, the gradient mode is set to     Vertical&gt;</remarks>
        </member>
        <member name="M:Xceed.Grid.GradientMap.#ctor(Xceed.Grid.GradientMap)">
            <summary>Initializes a new instance of the GradientMap class, using the provided gradient map.</summary>
            <param name="template">A GradientMap object used to create this object.</param>
        </member>
        <member name="M:Xceed.Grid.GradientMap.Clone">
            <summary>Creates a copy of this GradientMap object.</summary>
            <returns>The GradientMap object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Grid.GradientMap.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current GradientMap.</summary>
            <returns>true if the specified object is equal to the current GradientMap; otherwise, false. true if the specified object is equal to the current GradientMap; otherwise, false.</returns>
            <param name="obj">The object to compare with the current GradientMap.</param>
        </member>
        <member name="M:Xceed.Grid.GradientMap.GetHashCode">
            <summary>Serves as a hash function for the GradientMap, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>An integer value representing a hash code for the current GradientMap.</returns>
        </member>
        <member name="M:Xceed.Grid.GradientMap.GetOffsetColorPairs(System.Double[]@,System.Drawing.Color[]@)">
            <summary>Returns the offsets in the gradient map and their corresponding colors.</summary>
            <param name="offsets">An array of double values representing the offsets in the gradient map.</param>
            <param name="colors">An array of Color structures representing the colors in the gradient map.</param>
        </member>
        <member name="M:Xceed.Grid.GradientMap.OnGradientModeChanged(System.EventArgs)">
            <summary>Raises the GradientModeChanged event.</summary>
            <remarks>When overriding OnGradientModeChanged in a derived class, be sure to call the base class's OnGradientModeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GradientMap.ResetGradientMode">
            <summary>Resets the value of the GradientMode property to its default value, DefaultGradientMode.</summary>
        </member>
        <member name="P:Xceed.Grid.GradientMap.DefaultGradientMode">
            <summary>Gets the default value of the GradientMode property.</summary>
        </member>
        <member name="P:Xceed.Grid.GradientMap.GradientMode">
            <summary>Gets the gradient mode of a GradientMap.</summary>
        </member>
        <member name="P:Xceed.Grid.GradientMap.GradientStops">
            <summary>Gets the gradient stops of a GradientMap.</summary>
        </member>
        <member name="E:Xceed.Grid.GradientMap.GradientModeChanged">
            <summary>Raised when the value of the GradientMode property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GradientStop">
            <summary>Represents a gradient stop in a GradientMap.</summary>
            <remarks>    A gradient stop has an offset and a color. The offset is     a double value representing a position along     an axis whose direction is determined by the GradientMode of     the gradient map that contains the gradient stop. The offset     can have a value between 0 and 1, with 0 representing a     position at the beginning of the gradient, and 1 representing a     position at the end of the gradient.     A gradient stop's offset can be thought of as     representing a point along the gradient where a color will be     pure; the color of points between two offsets will gradually     change from the color of the first gradient stop to the color     of the second gradient stop, at its offset, at which point the     pure color of the second gradient stop will be     displayed.</remarks>
        </member>
        <member name="M:Xceed.Grid.GradientStop.#ctor">
            <summary>Initializes a new instance of the GradientStop class.</summary>
        </member>
        <member name="M:Xceed.Grid.GradientStop.#ctor">
            <summary>Initializes a new instance of the GradientStop class.</summary>
        </member>
        <member name="M:Xceed.Grid.GradientStop.#ctor(System.Double,System.Drawing.Color)">
            <summary>Initializes a new instance of the GradientStop class.</summary>
            <remarks>    A GradientStop object's offset must be between 0 and     1.     A GradientStop object's color cannot be empty.</remarks>
            <param name="offset">A double value representing the point along the gradient at which the color of the gradient stop is at its purest.</param>
            <param name="color">A Color structure representing the color at the offset of the gradient stop.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStop.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current GradientStop.</summary>
            <returns>true if the specified object is equal to the current GradientStop; otherwise, false.</returns>
            <param name="obj">The object to compare with the current GradientStop.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStop.GetHashCode">
            <summary>Serves as a hash function for the GradientStop, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>An integer value representing a hash code for the current GradientStop.</returns>
        </member>
        <member name="P:Xceed.Grid.GradientStop.Color">
            <summary>Gets or sets the color of the GradientStop.</summary>
            <remarks>This property must be set to an initialized Color structure.</remarks>
        </member>
        <member name="P:Xceed.Grid.GradientStop.Offset">
            <summary>Gets or sets the offset of the GradientStop.</summary>
            <remarks>A GradientStop's offset must be between 0 and 1.</remarks>
        </member>
        <member name="T:Xceed.Grid.GradientStopList">
            <summary>Specialization of the CollectionBase class representing a list of GradientStop objects.</summary>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.#ctor">
            <summary>Initializes a new instance of the GradientStopList class.</summary>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.Add(Xceed.Grid.GradientStop)">
            <summary>Adds a GradientStop to the GradientStopList. GradientStops must be added sequentially in the order of their offsets. Adding a GradientStop whose offset is less than the offset of the last GradientStop added to the collection will cause an ArgumentOutOfRangeException to be thrown.</summary>
            <returns>The index of the GradientStop added to the collection.</returns>
            <param name="gradientStop">The GradientStop to add to the collection.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.Contains(Xceed.Grid.GradientStop)">
            <summary>Retrieves a boolean value indicating whether a specific GradientStop object exists in the collection.</summary>
            <returns>true if the GradientStop exists in the list; otherwise, false.</returns>
            <param name="gradientStop">The GradientStop object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current GradientStop.</summary>
            <returns>true if the specified object is equal to the current GradientStop; otherwise, false.</returns>
            <param name="obj">The object to compare with the current GradientStop.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.GetHashCode">
            <summary>Serves as a hash function for the GradientStop, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>A hash code for the current GradientStop.</returns>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.GetOffsetColorPairs(System.Double[]@,System.Drawing.Color[]@)">
            <summary>Returns the offsets in the gradient map and their corresponding colors.</summary>
            <param name="offsets">An array of double values representing the offsets in the gradient map.</param>
            <param name="colors">An array of Color structures representing the colors in the gradient map.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.IndexOf(Xceed.Grid.GradientStop)">
            <summary>Searches for the specified GradientStop object and returns the zero-based index of the occurrence within the collection.</summary>
            <returns>The zero-based index of the first occurrence of gradientStop within the entire list, if found; otherwise, returns -1.</returns>
            <param name="gradientStop">A reference to the GradientStop to locate.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.OnInsert(System.Int32,System.Object)">
            <summary>Performs additional custom processes before inserting a new item into the GradientStopList.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.GradientStopList.Remove(Xceed.Grid.GradientStop)">
            <summary>Removes the specified GradientStop object from the collection.</summary>
            <param name="gradientStop">The GradientStop to be removed.</param>
        </member>
        <member name="P:Xceed.Grid.GradientStopList.Item(System.Int32)">
            <summary>Gets the GradientStop at the specified index.</summary>
        </member>
        <member name="T:Xceed.Grid.GridControl">
            <summary>Represents the Xceed grid control. It allows you to display and edit data using a flexible and extensible grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor">
            <summary>Initializes a new instance of the GridControl class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor">
            <summary>Initializes a new instance of the GridControl class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor(Xceed.Grid.GridControl)">
            <summary>Initializes a new instance of the GridControl class specifying the GridControl control that will be used as a template.</summary>
            <remarks>    If the Clone method is used, all property values will be     cloned however event handlers will not.</remarks>
            <param name="template">The GridControl to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor(Xceed.Grid.RowSelectorPane)">
            <summary>Initializes a new instance of the GridControl class specifying the RowSelectorPane that will be displayed in the grid.</summary>
            <param name="rowSelectorPane">A reference to a RowSelectorPane object. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor(Xceed.Grid.RowSelectorPane,Xceed.Grid.FixedColumnSplitter)">
            <summary>Initializes a new instance of the GridControl class specifying the RowSelectorPane that will be displayed in the grid.</summary>
            <param name="rowSelectorPane">A reference to a RowSelectorPane object. Cannot be $$NULL$$.</param>
            <param name="fixedColumnSplitter">A reference to a FixedColumnSplitter object. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.#ctor(System.Type,Xceed.Grid.RowSelectorPane,Xceed.Grid.FixedColumnSplitter)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.AdjustToSystemColors">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ApplyStyleSheet(Xceed.Grid.StyleSheet)">
            <summary>Applies the specified stylesheet to the grid.</summary>
            <param name="styleSheet">A reference to the StyleSheet that will be applied to the grid.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.BeginInit">
            <summary>Signals the beginning of a batch modification process.</summary>
            <remarks>    During a batch modification process, data will not be     loaded into the grid, sorting operations will not be done and     the visible positions of columns will not be resequenced. All     of these operations will be accomplished once EndInit is     called.     When overriding BeginInit in a derived class, the base     implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.Clear">
            <summary>Clears the entire content of the grid including the data binding and styles and collections.</summary>
            <remarks>    Any GridElement that was added to the grid and any style     that was applied to the grid will be removed. The DataMember     and DataSource properties will be set to $$NULL$$.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.Clone">
            <summary>Creates a shallow copy of the control.</summary>
            <returns>An Object representing the shallow copy of the control.</returns>
            <remarks>    All property values will be cloned however event handlers     will not.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.CreateAccessibilityInstance">
            <summary>Creates a new accessibility object for the element.</summary>
            <returns>A new AccessibleObject for the element.</returns>
            <remarks>    If you do not explicitly call the     CreateAccessibilityInstance method, it will be called when the     AccessibilityObject property is referenced.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.DebugPaintableRowCount">
            <summary>Reserved for internal debugging use and is not intended to be used directly from your code</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.Dispose">
            <summary>Clean up any resources being used.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.Dispose(System.Boolean)">
            <summary>Clean up any resources being used.</summary>
            <param name="disposing">true if the GridControl is disposing; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.EndInit">
            <summary>Signals the end of a batch modification process.</summary>
            <remarks>    When EndInit is called, the data will be loaded into the     grid (if any data binding occurred during the process), data     rows will be sorted (if a sort operation was requested) and the     visible positions of columns will be resequenced (if the     VisibleIndex properties of columns were modified).     When overriding EndInit in a derived class, the base     implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.GetSortedDataRows(System.Boolean)">
            <summary>Retrieves a collection of sorted data rows.</summary>
            <returns>A reference to a ReadOnlyDataRowList containing a list of sorted data rows.</returns>
            <param name="recursive">true if all the data rows of the grid should be retreived; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.GetVisualGridElementAtPoint">
            <summary>Retrieves a reference to the grid element located at the specified coordinates.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.GetVisualGridElementAtPoint(System.Drawing.Point)">
            <summary>Retrieves a reference to the grid element located at the specified coordinates.</summary>
            <returns>A reference to the VisualGridElement located at the specified coordinates.</returns>
            <param name="point">An ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.GetVisualGridElementAtPoint(System.Int32,System.Int32)">
            <summary>Retrieves a reference to the grid element located at the specified x and y coordinates.</summary>
            <returns>A reference to the VisualGridElement located at the specified x and y coordinates.</returns>
            <param name="x">The grid element's x-coordinate.</param>
            <param name="y">The grid element's x-coordinate.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.InputValidatorValidateAndSetErrorParameters(System.Delegate,System.Boolean,System.Boolean,System.Object[],System.Drawing.Icon,System.Int32,System.Windows.Forms.ErrorBlinkStyle)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridControl.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the grid recognizes.</summary>
            <returns>true if the character should be sent directly to the grid and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Returns a boolean value indicating if the key(s) pressed is an input key for the grid.</summary>
            <returns>true if the key(s) pressed in an input key; false otherwise.</returns>
            <param name="keyData">A Keys value specifying the key code and modifier of the key(s) that was pressed.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.MoveCurrentCell(Xceed.Grid.HorizontalDirection)">
            <summary>Moves the CurrentCell in the specified horizontal direction.</summary>
            <remarks>    When moving the current cell, if the destination cell's     CanBeCurrent property is false, the next available cell which     can be current will become the current cell. If no other cells     are available, the current cell will not change.     Moving the current cell outside of the visible area of     the grid does not cause the grid to scroll. To bring the new     current cell into view, the BringIntoView method can be     used.</remarks>
            <param name="horizontalDirection">A HorizontalDirection value representing the direction in which to move the current cell.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.MoveCurrentColumn(Xceed.Grid.HorizontalDirection)">
            <summary>Moves the CurrentColumn in the specified horizontal direction.</summary>
            <remarks>    When moving the current column, if the destination column     is not visible, the next available visible column will become     the current column. If no other columns are visbile, the     current column will not change.     Moving the current column outside of the visible area of     the grid does not cause the grid to scroll. To bring the new     current column into view, the BringIntoView method can be     used.</remarks>
            <param name="horizontalDirection">A HorizontalDirection representing the direction in which to move the current column.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.MoveCurrentRow">
            <summary>Moves the CurrentRow in the specified vertical direction.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.MoveCurrentRow(Xceed.Grid.VerticalDirection)">
            <summary>Moves the CurrentRow in the specified vertical direction.</summary>
            <remarks>    When moving the current row, if the destination row's     CanBeCurrent property is false or if the row is not visible     when in a collapsed group, the next available row which can be     current and is visible will become the current row. If no other     rows are available, the current row will not change.     Moving the current row outside of the visible area of the     grid does not cause the grid to scroll. To bring the new     current row into view, the BringIntoView method can be     used.     If you want to move the next row even if it is in a     collapsed group, then the BringIntoView method must be called     on the destination row before the current row is moved.</remarks>
            <param name="verticalDirection">A VerticalDirection value representing the direction in which to move the current row. The row will only be moved within the Current grid section.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.MoveCurrentRow(Xceed.Grid.VerticalDirection,Xceed.Grid.GridSection)">
            <summary>Moves the CurrentRow in the specified vertical direction to the specified grid section.</summary>
            <remarks>    The PageUp, PageDown, Up and Down directions can only be     used when gridSection is set to Current. The Top and Bottom     directions will move the current row within all 3 grid     sections.     When moving the current row, if the destination row's     CanBeCurrent property is false or if the row is not visible     when in a collapsed group, the next available row which can be     current and is visible will become the current row. If no other     rows are available, the current row will not change.     Moving the current row outside of the visible area of the     grid does not cause the grid to scroll. To bring the new     current row into view, the BringIntoView method can be     used.     If you want to move the next row even if it is in a     collapsed group, then the BringIntoView method must be called     on the destination row before the current row is moved.</remarks>
            <param name="verticalDirection">A VerticalDirection value representing the direction in which to move the current row.</param>
            <param name="gridSection">A GridSection value representing the section of the grid to which to move the current row.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnAddingDataRow(Xceed.Grid.AddingDataRowEventArgs)">
            <summary>Raises the AddingDataRow event.</summary>
            <remarks>When overriding OnAddingDataRow in a derived class, be sure to call the base class's OnAddingDataRow method so that registered delegates receive the event.</remarks>
            <param name="e">An AddingDataRowEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnAllowCellNavigationChanged(System.EventArgs)">
            <summary>Raises the AllowCellNavigationChanged event.</summary>
            <remarks>When overriding OnAllowCellNavigationChanged in a derived class, be sure to call the base class's OnAllowCellNavigationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnAutoCreateColumnsChanged(System.EventArgs)">
            <summary>Raises the AutoCreateColumnsChanged event.</summary>
            <remarks>When overriding OnAutoCreateColumnsChanged in a derived class, be sure to call the base class's OnAutoCreateColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageAlignmentChanged event.</summary>
            <remarks>When overriding OnBackgroundImageAlignmentChanged in a derived class, be sure to call the base class's OnBackgroundImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnBackgroundImageStyleChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageStyleChanged event.</summary>
            <remarks>When overriding OnBackgroundImageStyleChanged in a derived class, be sure to call the base class's OnBackgroundImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnBindingContextChanged(System.EventArgs)">
            <summary>Raised when the BindingContext of the Xceed Grid control changes.</summary>
            <remarks>When overriding OnBindingContextChanged in a derived class, be sure to call the base class's OnBindingContextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnBorderStyleChanged(System.EventArgs)">
            <summary>Raises the BorderStyleChanged event.</summary>
            <remarks>When overriding OnBorderStyleChanged in a derived class, be sure to call the base class's OnBorderStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnCellEditorDisplayConditionsChanged(System.EventArgs)">
            <summary>Raises the CellEditorDisplayConditionsChanged event.</summary>
            <remarks>When overriding OnCellEditorDisplayConditionsChanged in a derived class, be sure to call the base class's OnCellEditorDisplayConditionsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnClick(System.EventArgs)">
            <summary>Raises the Click event.</summary>
            <remarks>When overriding OnClick in a derived class, be sure to call the base class's OnClick method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnClipCurrentCellSelectionChanged(System.EventArgs)">
            <summary>Raises the ClipCurrentCellSelectionChanged event.</summary>
            <remarks>When overriding OnClipCurrentCellSelectionChanged in a derived class, be sure to call the base class's OnClipCurrentCellSelectionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnClipPartialLineChanged(System.EventArgs)">
            <summary>Raises the ClipPartialLineChanged event.</summary>
            <remarks>When overriding OnClipPartialLineChanged in a derived class, be sure to call the base class's OnClipPartialLineChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnColumnAdded(Xceed.Grid.ColumnAddedEventArgs)">
            <summary>Raises the ColumnAdded event.</summary>
            <param name="e">A ColumnAddedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnColumnRemoved(Xceed.Grid.ColumnRemovedEventArgs)">
            <summary>Raises the ColumnRemoved event.</summary>
            <param name="e">A ColumnRemovedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>Raises the ControlRemoved event.</summary>
            <param name="e">A ControlEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnCurrentCellChanged(System.EventArgs)">
            <summary>Raises the CurrentCellChanged event.</summary>
            <remarks>When overriding OnCurrentCellChanged in a derived class, be sure to call the base class's OnCurrentCellChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnCurrentColumnChanged(System.EventArgs)">
            <summary>Raises the CurrentColumnChanged event.</summary>
            <remarks>When overriding OnCurrentColumnChanged in a derived class, be sure to call the base class's OnCurrentColumnChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnCurrentRowChanged(System.EventArgs)">
            <summary>Raises the CurrentRowChanged event.</summary>
            <remarks>When overriding OnCurrentRowChanged in a derived class, be sure to call the base class's OnCurrentRowChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDataBindingChanged(System.EventArgs)">
            <summary>Raises the DataBindingChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDataMemberChanged(System.EventArgs)">
            <summary>Raises the DataMemberChanged event.</summary>
            <remarks>When overriding OnDataMemberChanged in a derived class, be sure to call the base class's OnDataMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDataRowsChanged(System.EventArgs)">
            <summary>Raises the DataRowsChanged event.</summary>
            <remarks>When overriding OnDataRowsChanged in a derived class, be sure to call the base class's OnDataRowsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDataSourceChanged(System.EventArgs)">
            <summary>Raises the DataSourceChanged event.</summary>
            <remarks>When overriding OnDataSourceChanged in a derived class, be sure to call the base class's OnDataSourceChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <remarks>When overriding OnDoubleClick in a derived class, be sure to call the base class's OnDoubleClick method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragDrop event.</summary>
            <remarks>When overriding OnDragDrop in a derived class, be sure to call the base class's OnDragDrop method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragEnter event.</summary>
            <remarks>When overriding OnDragEnter in a derived class, be sure to call the base class's OnDragEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDragLeave(System.EventArgs)">
            <summary>Raises the DragLeave event.</summary>
            <remarks>When overriding OnDragLeave in a derived class, be sure to call the base class's OnDragLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragOver event.</summary>
            <remarks>When overriding OnDragOver in a derived class, be sure to call the base class's OnDragOver method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnEnter(System.EventArgs)">
            <summary>Raises the Enter event.</summary>
            <remarks>When overriding OnEnter in a derived class, be sure to call the base class's OnEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorBackColorChanged(System.EventArgs)">
            <summary>Raises the ErrorBackColorChanged event.</summary>
            <remarks>When overriding OnErrorBackColorChanged in a derived class, be sure to call the base class's OnErrorBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorBehaviorsChanged(System.EventArgs)">
            <summary>Raises the ErrorBehaviorsChanged event.</summary>
            <remarks>When overriding OnErrorBehaviorsChanged in a derived class, be sure to call the base class's OnErrorBehaviorsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorBlinkRateChanged(System.EventArgs)">
            <summary>Raises the ErrorBlinkRateChanged event.</summary>
            <remarks>When overriding OnErrorBlinkRateChanged in a derived class, be sure to call the base class's OnErrorBlinkRateChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorBlinkStyleChanged(System.EventArgs)">
            <summary>Raises the ErrorBlinkStyleChanged event.</summary>
            <remarks>When overriding OnErrorBlinkStyleChanged in a derived class, be sure to call the base class's OnErrorBlinkStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorForeColorChanged(System.EventArgs)">
            <summary>Raises the ErrorForeColorChanged event.</summary>
            <remarks>When overriding OnErrorForeColorChanged in a derived class, be sure to call the base class's OnErrorForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnErrorIconChanged(System.EventArgs)">
            <summary>Raises the ErrorIconChanged event.</summary>
            <remarks>When overriding OnErrorIconChanged in a derived class, be sure to call the base class's OnErrorIconChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnFirstVisibleColumnChanged(System.EventArgs)">
            <summary>Raises the FirstVisibleColumnChanged event.</summary>
            <remarks>When overriding OnFirstVisibleColumnChanged in a derived class, be sure to call the base class's OnFirstVisibleColumnChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnFirstVisibleRowChanged(System.EventArgs)">
            <summary>Raises the FirstVisibleRowChanged event.</summary>
            <remarks>When overriding OnFirstVisibleRowChanged in a derived class, be sure to call the base class's OnFirstVisibleRowChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnFontChanged(System.EventArgs)">
            <summary>Raises the FontChanged event.</summary>
            <remarks>When overriding OnFontChanged in a derived class, be sure to call the base class's OnFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>Raises the GiveFeedback event.</summary>
            <remarks>When overriding OnGiveFeedback in a derived class, be sure to call the base class's OnGiveFeedback method so that registered delegates receive the event.</remarks>
            <param name="e">A GiveFeedbackEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGridLineBackColorChanged(System.EventArgs)">
            <summary>Raises the GridLineBackColorChanged event.</summary>
            <remarks>When overriding OnGridLineBackColorChanged in a derived class, be sure to call the base class's OnGridLineBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGridLineColorChanged(System.EventArgs)">
            <summary>Raises the GridLineColorChanged event.</summary>
            <remarks>When overriding OnGridLineColorChanged in a derived class, be sure to call the base class's OnGridLineColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGridLineStyleChanged(System.EventArgs)">
            <summary>Raises the GridLineStyleChanged event.</summary>
            <remarks>When overriding OnGridLineStyleChanged in a derived class, be sure to call the base class's OnGridLineStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGripLocationChanged(System.EventArgs)">
            <summary>Raises the GripLocationChanged event.</summary>
            <remarks>When overriding OnGripLocationChanged in a derived class, be sure to call the base class's OnGripLocationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGroupAdded(Xceed.Grid.GroupAddedEventArgs)">
            <summary>Raises the GroupAdded event.</summary>
            <remarks>When overriding OnGroupAdded in a derived class, be sure to call the base class's OnGroupAdded method so that registered delegates receive the event.</remarks>
            <param name="e">A GroupAddedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnGroupingUpdated(System.EventArgs)">
            <summary>Raises the GroupingUpdated event.</summary>
            <remarks>When overriding OnGroupingUpdated in a derived class, be sure to call the base class's OnGroupingUpdated method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnHandleCreated(System.EventArgs)">
            <summary>Raises the HandleCreated event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnHandleDestroyed(System.EventArgs)">
            <summary>Raises the HandleDestroyed event.</summary>
            <remarks>When overriding OnHandleDestroyed in a derived class, be sure to call the base class's OnHandleDestroyed method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnHideSelectionChanged(System.EventArgs)">
            <summary>Raises the HideSelectionChanged event.</summary>
            <remarks>When overriding OnHideSelectionChanged in a derived class, be sure to call the base class's OnHideSelectionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnHorizontalAlignmentChanged(System.EventArgs)">
            <summary>Raises the HorizontalAlignmentChanged event.</summary>
            <remarks>When overriding OnHorizontalAlignmentChanged in a derived class, be sure to call the base class's OnHorizontalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnInactiveSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionBackColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionBackColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnInactiveSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionForeColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionForeColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnInitializingDetailGrid(Xceed.Grid.InitializingDetailGridEventArgs)">
            <summary>Raises the InitializingDetailGrid event.</summary>
            <param name="e">An InitializingDetailGridEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnInitializingNewDataRow(Xceed.Grid.InitializingNewDataRowEventArgs)">
            <summary>Raises the InitializingNewDataRow event.</summary>
            <remarks>When overriding OnInitializingNewDataRow in a derived class, be sure to call the base class's OnInitializingNewDataRow method so that registered delegates receive the event.</remarks>
            <param name="e">An InitializingNewDataRowEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyUp event.</summary>
            <remarks>When overriding OnKeyUp in a derived class, be sure to call the base class's OnKeyUp method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnLeave(System.EventArgs)">
            <summary>Raises the Leave event.</summary>
            <remarks>When overriding OnLeave in a derived class, be sure to call the base class's OnLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <remarks>When overriding OnMouseEnter in a derived class, be sure to call the base class's OnMouseEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseWheel event.</summary>
            <remarks>When overriding OnMouseWheel in a derived class, be sure to call the base class's OnMouseWheel method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnNotifyMessage(System.Windows.Forms.Message)">
            <summary>Notifies the control of Windows messages.</summary>
            <param name="m">A Message that represents the Windows message.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnOverflowErrorTextChanged(System.EventArgs)">
            <summary>Raises the OverflowErrorTextChanged event.</summary>
            <remarks>When overriding OnOverflowErrorTextChanged in a derived class, be sure to call the base class's OnOverflowErrorTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnOverrideUIStyleChanged(System.EventArgs)">
            <summary>Raises the OverrideUIStyleChanged event.</summary>
            <remarks>When overriding OnOverrideUIStyleChanged in a derived class, be sure to call the base class's OnOverrideUIStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Raises the Paint event.</summary>
            <remarks>When overriding OnPaint in a derived class, be sure to call the base class's OnPaint method so that registered delegates receive the event.</remarks>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnParentChanged(System.EventArgs)">
            <summary>Raises the ParentChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>Raises the QueryContinueDrag event.</summary>
            <remarks>When overriding OnQueryContinueDrag in a derived class, be sure to call the base class's OnQueryContinueDrag method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryContinueDragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnQueryGroupKeys(Xceed.Grid.QueryGroupKeysEventArgs)">
            <summary>Raises the QueryGroupKeys event.</summary>
            <remarks>When overriding OnQueryGroupKeys in a derived class, be sure to call the base class's OnQueryGroupKeys method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryGroupKeysEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnReadOnlyChanged(System.EventArgs)">
            <summary>Raises the ReadOnlyChanged event.</summary>
            <remarks>When overriding OnReadOnlyChanged in a derived class, be sure to call the base class's OnReadOnlyChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnResize(System.EventArgs)">
            <summary>Raises the Resize event.</summary>
            <remarks>When overriding OnResize in a derived class, be sure to call the base class's OnResize method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnScrollBarsChanged(System.EventArgs)">
            <summary>Raises the ScrollBarsChanged event.</summary>
            <remarks>When overriding OnScrollBarsChanged in a derived class, be sure to call the base class's OnScrollBarsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSelectedRowsChanged(System.EventArgs)">
            <summary>Raises the SelectedRowsChanged event.</summary>
            <remarks>When overriding OnSelectedRowsChanged in a derived class, be sure to call the base class's OnSelectedRowsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSelectedValueChanged(System.EventArgs)">
            <summary>Raises the SelectedValueChanged event.</summary>
            <remarks>When overriding OnSelectedValueChanged in a derived class, be sure to call the base class's OnSelectedValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the SelectionBackColorChanged event.</summary>
            <remarks>When overriding OnSelectionBackColorChanged in a derived class, be sure to call the base class's OnSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the SelectionForeColorChanged event.</summary>
            <remarks>When overriding OnSelecOnSelectionForeColorChangedtionBackColorChanged in a derived class, be sure to call the base class's OnSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSelectionModeChanged(System.EventArgs)">
            <summary>Raises the SelectionModeChanged event.</summary>
            <remarks>When overriding OnSelectionModeChanged in a derived class, be sure to call the base class's OnSelectionModeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnShowFocusRectangleChanged(System.EventArgs)">
            <summary>Raises the ShowFocusRectangleChanged event.</summary>
            <remarks>When overriding OnShowFocusRectangleChanged in a derived class, be sure to call the base class's OnShowFocusRectangleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnShowTreeLinesChanged(System.EventArgs)">
            <summary>Raises the ShowTreeLinesChanged event.</summary>
            <remarks>When overriding OnShowTreeLinesChanged in a derived class, be sure to call the base class's OnShowTreeLinesChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnShowUnlinkedColumnsChanged(System.EventArgs)">
            <summary>Raises the ShowUnlinkedColumnsChanged event.</summary>
            <remarks>When overriding OnShowUnlinkedColumnsChanged in a derived class, be sure to call the base class's OnShowUnlinkedColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSingleClickEditChanged(System.EventArgs)">
            <summary>Raises the SingleClickEditChanged event.</summary>
            <remarks>When overriding OnSingleClickEditChanged in a derived class, be sure to call the base class's OnSingleClickEditChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSorted(System.EventArgs)">
            <summary>Raises the Sorted event.</summary>
            <remarks>When overriding OnSorted in a derived class, be sure to call the base class's OnSorted method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSortedColumnsChanged(System.EventArgs)">
            <summary>Raises the SortedColumnsChanged event.</summary>
            <remarks>When overriding OnSortedColumnsChanged in a derived class, be sure to call the base class's OnSortedColumnsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnSynchronizeDetailGridsChanged(System.EventArgs)">
            <summary>Raises the SynchronizeDetailGridsChanged event.</summary>
            <remarks>When overriding OnSynchronizeDetailGridsChanged in a derived class, be sure to call the base class's OnSynchronizeDetailGridsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnTitleChanged(System.EventArgs)">
            <summary>Raises the TitleChanged event.</summary>
            <remarks>When overriding OnTitleChanged in a derived class, be sure to call the base class's OnTitleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnTreeLineColorChanged(System.EventArgs)">
            <summary>Raises the TreeLineColorChanged event.</summary>
            <remarks>When overriding OnTreeLineColorChanged in a derived class, be sure to call the base class's OnTreeLineColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnTrimmingChanged(System.EventArgs)">
            <summary>Raises the TrimmingChanged event.</summary>
            <remarks>When overriding OnTrimmingChanged in a derived class, be sure to call the base class's OnTrimmingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnUIVirtualizationModeChanged(System.EventArgs)">
            <summary>Raises the  UIVirtualizationModeChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>Raises the Validating event.</summary>
            <remarks>When overriding OnValidating in a derived class, be sure to call the base class's OnValidating method so that registered delegates receive the event.</remarks>
            <param name="e">A CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnValueMemberChanged(System.EventArgs)">
            <summary>Raises the ValueMemberChanged event.</summary>
            <remarks>When overriding OnValueMemberChanged in a derived class, be sure to call the base class's OnValueMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnVerticalAlignmentChanged(System.EventArgs)">
            <summary>Raises the VerticalAlignmentChanged event.</summary>
            <remarks>When overriding OnVerticalAlignmentChanged in a derived class, be sure to call the base class's OnVerticalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.OnWordWrapChanged(System.EventArgs)">
            <summary>Raises the WordWrapChanged event.</summary>
            <remarks>When overriding OnWordWrapChanged in a derived class, be sure to call the base class's OnWordWrapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.PaintFocusRectangle(Xceed.Grid.VisualGridElement,System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>Paints the focus rectangle around the CurrentRow and CurrentCell.</summary>
            <param name="gridElement">The GridElement around which the focus rectangle will painted.</param>
            <param name="graphics">The Graphics to draw on.</param>
            <param name="displayRectangle">The Rectangle to draw in.</param>
            <param name="backColor">A Color structure representing the foreground color of the focus rectangle.</param>
            <param name="foreColor">A Color structure representing the background color of the focus rectangle.</param>
            <param name="printing">true if the grid is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.Print">
            <summary>Prints the content of the grid using the default printer dialog.</summary>
            <remarks>    It is also possible to use a GridPrintDocument to have     full control over how the grid is printed.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.PrintPreview">
            <summary>Previews the content of the grid before printing using the default print preview dialog.</summary>
            <remarks>    It is also possible to use a GridPrintDocument to have     full control over how the grid is previewed.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>Processes a command key.</summary>
            <returns>true if the character was processed by the control; false otherwise.</returns>
            <param name="msg">A Message, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the Keys values that represents the key to process.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetAllowCellNavigation">
            <summary>Resets the value of the AllowCellNavigation property to its default value, DefaultAllowCellNavigation.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetAutoCreateColumns">
            <summary>Resets the value of the AutoCreateColumns property to its default value, DefaultAutoCreateColumns.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetBackColor">
            <summary>Resets the value of the BackColor property to its default value.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetBackgroundImageAlignment">
            <summary>Resets the value of the BackgroundImageAlignment property to its default value, DefaultBackgroundImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetBackgroundImageStyle">
            <summary>Resets the value of the BackgroundImageStyle property to its default value, DefaultBackgroundImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetBorderStyle">
            <summary>Resets the value of the BorderStyle property to its default value, DefaultBorderStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetCellEditorDisplayConditions">
            <summary>Resets the value of the CellEditorDisplayConditions property to its default value, DefaultCellEditorDisplayConditions.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetClipCurrentCellSelection">
            <summary>Resets the value of the ClipCurrentCellSelection property to its default value, DefaultClipCurrentCellSelection.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetClipPartialLine">
            <summary>Resets the value of the ClipPartialLine property to its default value, DefaultClipPartialLine.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorBackColor">
            <summary>Resets the value of the ErrorBackColor property to its default value, DefaultErrorBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorBehaviors">
            <summary>Resets the value of the ErrorBehaviors property to its default value, DefaultErrorBehaviors.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorBlinkRate">
            <summary>Resets the value of the ErrorBlinkRate property to its default value, DefaultErrorBlinkRate.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorBlinkStyle">
            <summary>Resets the value of the ErrorBlinkStyle property to its default value, DefaultErrorBlinkStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorForeColor">
            <summary>Resets the value of the ErrorForeColor property to its default value, DefaultErrorForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetErrorIcon">
            <summary>Resets the value of the ErrorIcon property to its default value, DefaultErrorIcon.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetForeColor">
            <summary>Resets the value of the ForeColor property to its default value.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetGradientMap">
            <summary>Resets the value of the GradientMap property to its default value, DefaultGradientMap.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetGridLineBackColor">
            <summary>Resets the value of the GridLineBackColor property to its default value, DefaultGridLineBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetGridLineColor">
            <summary>Resets the value of the GridLineColor property to its default value, DefaultGridLineColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetGridLineStyle">
            <summary>Resets the value of the GridLineStyle property to its default value, DefaultGridLineStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetGripLocation">
            <summary>Resets the value of the GripLocation property to its default value, GripLocation.None.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetHideSelection">
            <summary>Resets the value of the HideSelection property to its default value, DefaultHideSelection.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetHorizontalAlignment">
            <summary>Resets the value of the HorizontalAlignment property to its default value, DefaultHorizontalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetInactiveSelectionBackColor">
            <summary>Resets the value of the InactiveSelectionBackColor property to its default value, DefaultInactiveSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetInactiveSelectionForeColor">
            <summary>Resets the value of the InactiveSelectionForeColor property to its default value, DefaultInactiveSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetOverflowErrorText">
            <summary>Resets the value of the OverflowErrorText property to its default value, DefaultOverflowErrorText.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetOverrideUIStyle">
            <summary>Resets the value of the OverrideUIStyle property to its default value, DefaultOverrideUIStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetReadOnly">
            <summary>Resets the value of the ReadOnly property to its default value, DefaultReadOnly.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetReportStyle">
            <summary>Resets the property values of the ReportStyle.</summary>
            <remarks>    Calling the ResetReportStyle method will set the     ReportStyle property to $$NULL$$ causing a new     GridControlReportStyle to be created when the ReportStyle     property is accessed.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridControlReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetScrollBars">
            <summary>Resets the value of the ScrollBars property to its default value, DefaultScrollBars.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetSelectionBackColor">
            <summary>Resets the value of the SelectionBackColor property to its default value, DefaultSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetSelectionForeColor">
            <summary>Resets the value of the SelectionForeColor property to its default value, DefaultSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetSelectionMode">
            <summary>Resets the value of the SelectionMode property to its default value, DefaultSelectionMode.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetShowFocusRectangle">
            <summary>Resets the value of the ShowFocusRectangle property to its default value, DefaultShowFocusRectangle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetShowTreeLines">
            <summary>Resets the value of the ShowTreeLines property to its default value, DefaultShowTreeLines.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetShowUnlinkedColumns">
            <summary>Resets the value of the ShowUnlinkedColumns property to its default value, DefaultShowUnlinkedColumns.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetSingleClickEdit">
            <summary>Resets the value of the SingleClickEdit property to its default value, DefaultSingleClickEdit.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetStyle">
            <summary>Resets the values of the properties affected by the StyleSheet) method to their default values.</summary>
            <remarks>    The Font, ForeColor, BackColor, ClipPartialLine,     WordWrap, HorizontalAlignment, VerticalAlignment, Trimming,     BackgroundImage, BackgroundImageAlignment,     BackgroundImageStyle, BorderStyle, GridLineColor,     GridLineStyle, ErrorBackColor, ErrorForeColor,     SelectionBackColor, SelectionForeColor,     InactiveSelectionBackColor and InactiveSelectionForeColor     properties are affected by this method.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetSynchronizeDetailGrids">
            <summary>Resets the value of the SynchronizeDetailGrids property to its default value, DefaultSynchronizeDetailGrids.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetTitle">
            <summary>Resets the value of the Title property to its default value, DefaultTitle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetTreeLineColor">
            <summary>Resets the value of the TreeLineColor property to its default value, DefaultTreeLineColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetTrimming">
            <summary>Resets the value of the Trimming property to its default value, DefaultTrimming.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetUIStyle">
            <summary>Resets the value of the UIStyle property to its default value.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetUIVirtualizationMode">
            <summary>Resets the value of the UIVirtualizationMode to its default value.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetValueMember">
            <summary>Resets the value of the ValueMember property to its default value, DefaultValueMember.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetVerticalAlignment">
            <summary>Resets the value of the VerticalAlignment property to its default value, DefaultVerticalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.ResetWordWrap">
            <summary>Resets the value of the WordWrap property to its default value, DefaultWordWrap.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.Scroll(Xceed.Grid.ScrollDirection)">
            <summary>Scrolls the grid in the specified direction.</summary>
            <param name="direction">A ScrollDirection value representing the direction in which the scroll the grid.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.SetDataBinding(System.Object,System.String)">
            <summary>Sets the DataSource and DataMember properties at run time.</summary>
            <remarks>    The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the grid, then     the jagged array must be reassigned to the DataSource property     in order for the modifications to be reflected in the grid. If     an existing value is changed in the jagged array from outside     of the grid, for example the text of one of the elements, in     order for the changes to be reflected in the grid, the jagged     array can be reassigned to the grid OR the grid's     UpdateRectangles method can be called.</remarks>
            <param name="dataSource">The data source used to populate the grid, typed as Object.</param>
            <param name="dataMember">A string that specifies the table to bind to within the object returned by the DataSource property.</param>
        </member>
        <member name="M:Xceed.Grid.GridControl.ShouldSerializeGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridControl.ShouldSerializeXmlGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridControl.UpdateDetailGrids">
            <summary>Updates the detail grid's contained in the grid. Any modifications made to the DetailGridTemplates property must be followed by a call to UpdateDetailGrids otherwise the changes will not be reflected in the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.UpdateGrouping">
            <summary>Updates the way in which the grid is grouped according to the groups specified in the GroupTemplates property.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.UpdateRectangles">
            <summary>Recalculates and repaints (invalidates) the rectangles of each GridElement in the grid. The grid's rectangles are not affected.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.VerifyLicense(Xceed.Grid.FeatureID)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.GridControl.WndProc(System.Windows.Forms.Message@)">
            <summary>Processes Windows messages.</summary>
            <param name="m">The Message to process.</param>
        </member>
        <member name="P:Xceed.Grid.GridControl.AllowCellNavigation">
            <summary>Gets or sets a boolean value indicating if it is possible to navigate from cell to cell in the grid.</summary>
            <remarks>    If both AllowCellNavigation and each row's     AllowCellNavigation property is false, CurrentCell will always     be $$NULL$$ and cannot be set. This also implies that cells     will never have a focus rectangle.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.AutoCreateColumns">
            <summary>Gets or sets a boolean value indicating if columns should be automatically created when the grid is bound.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.BackColor">
            <summary>Gets or sets the background color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.BackgroundImage">
            <summary>Gets or sets the grid's background image.</summary>
            <remarks>    The appearance of the background image can be modified     via the BackgroundImageStyle and BackgroundImageAlignment     properties.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.BackgroundImageAlignment">
            <summary>Gets or sets the alignment of the grid's background image.</summary>
            <remarks>    This property is only taken into consideration if     BackgroundImageStyle is set to Align.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.BackgroundImageStyle">
            <summary>Gets or sets the style of the grid's background image.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.BorderStyle">
            <summary>Gets or sets the border style of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.CellEditorDisplayConditions">
            <summary>Gets or sets a value representing under what conditions cell editors are displayed.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.CellEditorManagerMapping">
            <summary>Gets a table containing a list of CellEditorManager controls and the datatype of the cell's which they will edit.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.CellViewerManagerMapping">
            <summary>Gets a table containing a list of CellViewerManager controls and the datatype of the cell's whose content they will display.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ClipCurrentCellSelection">
            <summary>Gets or sets a value indicating whether the selection state of a row will be applied to the current cell.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the grid element will be displayed. For     example, if a cell contains multi-line text but the height of     the cell only allows for one line of text to be displayed     properly, the second line will not be displayed. If set to     false, and the height of the cell only allows for one line to     be displayed properly, it is possible that part of the second     line will be visible in the cell.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Columns">
            <summary>Gets a list of all the columns in the grid.</summary>
            <remarks>    All columns, both data bound and custom, visible and     non-visible, will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.CurrentCell">
            <summary>Gets or sets a reference to the grid's current cell.</summary>
            <remarks>    If both AllowCellNavigation and AllowCellNavigation are     false then it is not possible to have a current cell and     CurrentCell will return $$NULL$$.     Only cells whose CanBeCurrent property is set to true can     be current.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.CurrentColumn">
            <summary>Gets or sets a reference to the grid's current column.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.CurrentGrid">
            <summary>Gets the current detail grid.</summary>
            <remarks>    The current detail grid will always be the parent of the     CurrentRow.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.CurrentRow">
            <summary>Gets or sets the grid's current row</summary>
            <remarks>    Only rows whose CanBeCurrent property is set to true can     be current.     When bound to a data source, the grid's current row will     always match the position of the CurrencyManager associated     with the data source.     If the row is in a collapsed group or its Visible     property is set to false, and exception will be thrown.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DataMember">
            <summary>Gets or sets a specific table in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.DataRows">
            <summary>Gets a list of all the data rows in the grid, regardless of the group hierarchy and sort.</summary>
            <remarks>    This property preserves the same order as the data source     to which the grid is bound. In the case where the grid is     unbound, the original order is used.     The index of each datarow in the collection corresponds     to the row's index in the data source.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DataRowTemplate">
            <summary>Gets or sets a reference to the DataRow object used as a template to create the data rows that will be contained within the grid.</summary>
            <remarks>    All the datarows in the grid will take on the same     appearance as the DataRowTemplate. For example, if the     BackColor property of the DataRowTemplate is set to pink, all     the datarows in the grid will have pink as their background     color.     If changes are made to the DataRowTemplate while the     DataSource property is set, the changes will not automatically     be reflected in the grid. In order for the modifications to be     applied, the data source must be reassigned to the DataSource     property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DataRowTemplateStyles">
            <summary>Gets a list of the styles applied to the grid's datarows.</summary>
            <remarks>    The DataRowTemplateStyles allow for the appearance of the     datarows in the grid to be alternated. For example, if there     are two styles in the collection, with the first having its     background color set to pink and the second to blue, the     background color of the datarows (once the grid is populated)     will alternate between pink and blue.Keep in mind that     any properties set directly on the DataRowTemplate will     "override" those of the styles. For example, if the background     color of the first datarow style is pink and the second blue     but the BackColor property of the DataRowTemplate was set to     green then, once the grid is populate, all the datarows will     have a green background.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DataSource">
            <summary>Gets or sets the data source used to populate the grid's DataRow object.</summary>
            <remarks>    If the DataSource contains more than one table, you must     set the DataMember property to a string that represents the     name of the table to bind to.     The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the grid, then     the jagged array must be reassigned to the DataSource property     in order for the modifications to be reflected in the grid. If     an existing value is changed in the jagged array from outside     of the grid, for example the text of one of the elements, in     order for the changes to be reflected in the grid, the jagged     array can be reassigned to the grid OR the grid's     UpdateRectangles method can be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultAllowCellNavigation">
            <summary>Gets the default value of the AllowCellNavigation property.</summary>
            <remarks>When overriding DefaultAllowCellNavigation in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultAutoCreateColumns">
            <summary>Gets the default value of the AutoCreateColumns property.</summary>
            <remarks>When overriding DefaultAutoCreateColumns in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultBackgroundImageAlignment">
            <summary>Gets the default value of the BackgroundImageAlignment property.</summary>
            <remarks>When overriding DefaultBackgroundImageAlignment in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultBackgroundImageStyle">
            <summary>Gets the default value of the BackgroundImageStyle property.</summary>
            <remarks>When overriding DefaultBackgroundImageStyle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultBorderStyle">
            <summary>Gets the default value of the BorderStyle property.</summary>
            <remarks>When overriding DefaultBorderStyle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultCellEditorDisplayConditions">
            <summary>Gets the default value of the CellEditorDisplayConditions property.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultClipCurrentCellSelection">
            <summary>Gets the default value of the ClipCurrentCellSelection property.</summary>
            <remarks>When overriding DefaultShowFocusRectangle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultClipPartialLine">
            <summary>Gets the default value of the ClipPartialLine property.</summary>
            <remarks>When overriding DefaultClipPartialLine in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorBackColor">
            <summary>Gets the default value of the ErrorBackColor property.</summary>
            <remarks>When overriding DefaultErrorBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorBehaviors">
            <summary>Gets the default value of the ErrorBehaviors property.</summary>
            <remarks>When overriding DefaultErrorBehaviors in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorBlinkRate">
            <summary>Gets the default value of the ErrorBlinkRate property.</summary>
            <remarks>When overriding DefaultErrorBlinkRate in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorBlinkStyle">
            <summary>Gets the default value of the ErrorBlinkStyle property.</summary>
            <remarks>When overriding DefaultErrorBlinkStyle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorForeColor">
            <summary>Gets the default value of the ErrorForeColor property.</summary>
            <remarks>When overriding DefaultErrorForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultErrorIcon">
            <summary>Gets the default value of the ErrorIcon property.</summary>
            <remarks>When overriding DefaultErrorIcon in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultGradientMap">
            <summary>Gets the default GradientMap of the GridControl.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultGridLineBackColor">
            <summary>Gets the default value of the GridLineBackColor property.</summary>
            <remarks>When overriding DefaultGridLineBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultGridLineColor">
            <summary>Gets the default value of the GridLineColor property.</summary>
            <remarks>When overriding DefaultGridLineColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultGridLineStyle">
            <summary>Gets the default value of the GridLineStyle property.</summary>
            <remarks>When overriding DefaultGridLineStyle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultHideSelection">
            <summary>Gets the default value of the HideSelection property.</summary>
            <remarks>When overriding DefaultHideSelection in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultHorizontalAlignment">
            <summary>Gets the default value of the HorizontalAlignment property.</summary>
            <remarks>When overriding DefaultHorizontalAlignment in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultInactiveSelectionBackColor">
            <summary>Gets the default value of the InactiveSelectionBackColor property.</summary>
            <remarks>When overriding DefaultInactiveSelectionBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultInactiveSelectionForeColor">
            <summary>Gets the default value of the InactiveSelectionForeColor property.</summary>
            <remarks>When overriding DefaultInactiveSelectionForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultOverflowErrorText">
            <summary>Gets the default value of the OverflowErrorText property.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultOverrideUIStyle">
            <summary>Gets the default value of the OverrideUIStyle property.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultReadOnly">
            <summary>Gets the default value of the ReadOnly property.</summary>
            <remarks>When overriding DefaultReadOnly in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultScrollBars">
            <summary>Gets the default value of the ScrollBars property.</summary>
            <remarks>When overriding DefaultScrollBars in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSelectionBackColor">
            <summary>Gets the default value of the SelectionBackColor property.</summary>
            <remarks>When overriding DefaultSelectionBackColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSelectionForeColor">
            <summary>Gets a Color structure representing the default value of the SelectionForeColor property.</summary>
            <remarks>When overriding DefaultSelectionForeColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSelectionMode">
            <summary>Gets the default value of the SelectionMode property.</summary>
            <remarks>When overriding DefaultSelectionMode in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultShowFocusRectangle">
            <summary>Gets the default value of the ShowFocusRectangle property.</summary>
            <remarks>When overriding DefaultShowFocusRectangle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultShowTreeLines">
            <summary>Gets the default value of the ShowTreeLines property.</summary>
            <remarks>When overriding DefaultShowTreeLines in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultShowUnlinkedColumns">
            <summary>Gets the default value of the ShowUnlinkedColumns property.</summary>
            <remarks>When overriding DefaultShowUnlinkedColumns in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSingleClickEdit">
            <summary>Gets the default value of the SingleClickEdit property.</summary>
            <remarks>When overriding DefaultSingleClickEdit in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSize">
            <summary>Gets the default value of the Size property.</summary>
            <remarks>    When overriding DefaultSize in a derived class, the value     returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultSynchronizeDetailGrids">
            <summary>Gets the default value of the SynchronizeDetailGrids property.</summary>
            <remarks>When overriding DefaultSynchronizeDetailGrids in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultTitle">
            <summary>Gets the default value of the Title property.</summary>
            <remarks>When overriding DefaultTitle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultTreeLineColor">
            <summary>Gets the default value of the TreeLineColor property.</summary>
            <remarks>When overriding DefaultTreeLineColor in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultTrimming">
            <summary>Gets the default value of the Trimming property.</summary>
            <remarks>When overriding DefaultTrimming in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultUIVirtualizationMode">
            <summary>Gets the default value of the UIVirtualizationMode property.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultValueMember">
            <summary>Gets the default value of the ValueMember property.</summary>
            <remarks>    When overriding DefaultValueMember in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultVerticalAlignment">
            <summary>Gets the default value of the VerticalAlignment property.</summary>
            <remarks>When overriding DefaultVerticalAlignment in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DefaultWordWrap">
            <summary>Gets the default value of the WordWrap property.</summary>
            <remarks>When overriding DefaultWordWrap in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DetailGridTemplates">
            <summary>Gets a list of the DetailGrid objects used as templates to create the detail grids that will be associated with each of the grid's DataRows.</summary>
            <remarks>    The number of detail grids added to the grid's collection     of DetailGridTemplates will determine the number of detail     grids for each DataRow in the grid. For example, if you add 2     DetailGrid objects to the grid's DetailGridTemplates property,     each DataRow in the grid will have 2 detail grids associated     with it. If you want the DataRows of your detail grid's to     also have detail grids, then you will need to add DetailGrid     objects to the DetailGridTemplates property of the appropriate     detail grid.     In order for the modifications made to the detail grid     templates to be applied to the grid (after the grid has been     populated) the UpdateDetailGrids method must be called.     Setting the Collapsed     property of the detail-grid template to true     prior to binding the grid to a data source will provide a     significant decrease in grid's loading time as the data rows     contained in the detail grids will only be created when a     detail grid is accessed.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.DisplayRectangle">
            <summary>Gets the display rectangle of the grid in client coordinates excluding the borders and scrollbars.</summary>
            <remarks>    The display rectangle of the grid represents the visible     portion of the grid excluding the borders and     scrollbars.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Disposing">
            <summary>Gets a value indicating whether the control is in the process of being disposed of.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorBackColor">
            <summary>Gets or sets the background color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorBackColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorBehaviors">
            <summary>Gets or sets the behavior the grid will exhibit if an error occurs.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorBlinkRate">
            <summary>Gets or sets the blink rate of the error icon (on the RowSelector) and the background of cells and rows when an error occurs in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorBlinkStyle">
            <summary>Gets or sets blink style of the error icon (on the RowSelector) and the background of cells and rows when an error occurs in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorForeColor">
            <summary>Gets or sets the foreground color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorForeColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorIcon">
            <summary>Gets or sets the error icon displayed on the RowSelector when an error occurs in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ErrorVisualStyle">
            <summary>Gets or sets the visual style of a row that contains a cell that contains an error in the GridControl.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.FirstVisibleColumn">
            <summary>Gets or sets the first visible column avaiable in the visible section of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.FirstVisibleRow">
            <summary>Gets or sets the first visible row available in the visible section of the grid's body.</summary>
            <remarks>    The grid's body includes the DataRow's and the grid's     HeaderRows and FooterRows sections. It does not include     the grid's FixedHeaderRows and FixedFooterRows sections</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.FixedColumnSplitter">
            <summary>Gets the grid's fixed column splitter.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.FixedFooterRows">
            <summary>Gets a list of all the fixed footer rows of the grid.</summary>
            <remarks>    The fixed footer rows are the rows found in the     non-scrollable footer section of the grid. This section will     not scroll with the grid body.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.FixedHeaderRows">
            <summary>Gets a list of all the fixed header rows of the grid.</summary>
            <remarks>    The fixed header rows are the rows found in the     non-scrollable header section of the grid. This section will     not scroll with the grid body.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Font">
            <summary>Gets or sets the font of the grid.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.FooterRows">
            <summary>Gets a list of all the non-fixed footer rows of the grid.</summary>
            <remarks>    The footer rows are the rows found in the footer section     of the grid, after the data rows and groups, and that scroll     with the grid body.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.ForeColor">
            <summary>Gets or sets the foreground color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.GradientMap">
            <summary>Gets or sets the gradient map of the GridControl.</summary>
            <remarks>    To reset the value of the GradientMap property to its     default value, DefaultGradientMap, the ResetGradientMap method     must be called.     The GradientMap property cannot be null.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.GridLineBackColor">
            <summary>Gets or sets the background color of the gridlines in the case where the GridLineStyle is different than Solid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.GridLineColor">
            <summary>Gets or sets the color of the gridlines.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.GridLinePen">
            <summary>Gets the pen that is used to draw the gridlines.</summary>
            <remarks>    The Pen object returned is based on the values of the     GridLineColor and GridLineStyle properties.When     overriding GridPaintEventArgs) in a derived class or to draw a     line exactly like the grid's, GridLinePen can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.GridLineStyle">
            <summary>Gets or sets the style of the gridlines.</summary>
            <remarks>Custom is not supported.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.GripLocation">
            <summary>Gets or sets the location of the resizing grip when the grid is dock-filled on a form.</summary>
            <remarks>    This property should only be set when the parent form's     resizing grip is visible.     Setting this property to something other than     GripLocation.None will override the grid's Region.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Groups">
            <summary>Gets a list of all the groups contained within the grid once it has has been built.</summary>
            <remarks>    Each group in each level is created according to its     cooresponding template in the grid's collection of     GroupTemplates. For example, if there are two groups in the     grid's collection of GroupTemplates, then there will be two     levels of groups. If the background color of the first group in     the GroupTemplates is set to pink and the second's to blue,     then all the groups of the first level will have a background     color of pink while all the groups of the second level will     have a background color of blue.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.GroupTemplates">
            <summary>Gets a list of the Group objects used as templates to create the groups that will be contained within the grid.</summary>
            <remarks>    The number of groups added to the grid's collection of     GroupTemplates will determine the number of group     levels.     In order for the modifications made to the group     templates to be applied to the grid (after the grid has been     populated) the UpdateGrouping method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.HeaderRows">
            <summary>Gets a list of all the non-fixed header rows of the grid.</summary>
            <remarks>    The header rows are the rows found in the header section     of the grid, before the data rows and groups, and that scroll     with the grid body.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.HideSelection">
            <summary>Gets or sets a value indicating whether the selected rows in the grid remain highlighted when the grid loses focus.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid's content.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.InactiveSelectionBackColor">
            <summary>Gets or sets the inactive selection background color of the grid.</summary>
            <remarks>    The InactiveSelectionBackColor is applied to the selected     rows when HideSelection is set to false and the grid does not     have focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.InactiveSelectionForeColor">
            <summary>Gets or sets the inactive selection foreground color of the grid.</summary>
            <remarks>    The InactiveSelectionForeColor is applied to the selected     rows when HideSelection is set to false and the grid does not     have focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.InactiveSelectionVisualStyle">
            <summary>Gets or sets the visual style of an inactive selected row in the GridControl.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.InBatchInitialization">
            <summary>Gets a boolean value indicating if the grid is in batch initialization mode.</summary>
            <remarks>    The grid is in batch initialization mode when the     BeginInit and EndInit methods are used.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.IsReportStyleDefined">
            <summary>Gets a boolean value indicating if one or more properties of the ReportStyle have been explicitly set.</summary>
            <remarks>    The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridControlReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.OverflowErrorText">
            <summary>Gets or sets the string that is displayed when the result of a statistical function exceeds the capacity of its datatype.</summary>
            <remarks>    Setting the OverflowErrorText property to $$NULL$$ will     reset it to its default value, DefaultOverflowErrorText.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.OverrideUIStyle">
            <summary>Gets or sets a boolean value indicating whether any theming based on the UIStyle property of the GridControl will be overridden.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ReadOnly">
            <summary>Gets or sets a boolean value indicating if the grid can be edited.</summary>
            <remarks>    Setting ReadOnly to true does not prevent the content of     the grid from being modified via code. For example, cell.Value     = "hello";</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.ReportSettings">
            <summary>Gets the grid's report settings.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ReportStyle">
            <summary>Gets the report style of the grid.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridControlReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.RightToLeft">
            <summary>Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.RowSelectorPane">
            <summary>Gets a reference to the grid's RowSelectorPane.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ScrollBars">
            <summary>Gets or sets a value indicating which scrollbars will be diplayed.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectedRows">
            <summary>Gets a list of all the selected rows.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectedValue">
            <summary>Gets or sets the value of the member property specified by the ValueMember property.</summary>
            <remarks>    If the ValueMember property is not set, SelectedValue     returns $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectionBackColor">
            <summary>Gets or sets the selection background color of the grid.</summary>
            <remarks>    The SelectionBackColor is applied to the selected rows     when the grid has focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectionForeColor">
            <summary>Gets or sets the selection foreground color of the grid.</summary>
            <remarks>    The SelectionForeColor is applied to the selected rows     when the grid has focus.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectionMode">
            <summary>Gets or sets the selection mode of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.SelectionVisualStyle">
            <summary>Gets or sets the visual style of a selected row in the GridControl.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ShowFocusRectangle">
            <summary>Gets or sets a boolean value indicating if the focus rectangle should be displayed around the CurrentRow and/or CurrentCell.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ShowTreeLines">
            <summary>Gets or sets a boolean value indicating if the tree lines that link detail grids to their ParentGrid should be visible.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.ShowUnlinkedColumns">
            <summary>Gets or sets a boolean value indicating if the DataBoundColumns should be visible even if they are not linked to a field in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.SideMargin">
            <summary>Gets the side margin of the grid.</summary>
            <remarks>    The side margin is present when detail grids are     displayed and contains the tree lines and the [+] or [-]symbols     for expanding the detail grids.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.SingleClickEdit">
            <summary>Gets or sets a boolean value indicating if the cell editor should be activated when the cell receives focus.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.SortedColumns">
            <summary>Gets a list of all the columns used to sort the grid.</summary>
            <remarks>    All columns whose SortDirection property has been set to     Ascending or Descending are automatically added to the grid's     collection or sorted columns. If a column's SortDirection     property is set to None, the column will automatically be     removed from the collection.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.SynchronizeDetailGrids">
            <summary>Gets or sets a boolean value indicating if the detail grids should be synchronized.</summary>
            <remarks>    If true, the detail grids will all contain the same     number of columns, will be sorted and grouped according to the     values of the same column and the width of the columns will     also be synchronized.     Each level of detail grids will be synchronized with     their siblings. For example, the first detail grid added to the     DetailGridTemplates collection has 3 columns and is sorted by     the first, the the first detail grid of each DataRow in the     grid will have the same 3 columns and will all be sorted by the     first. If the second detail grid added to the     DetailGridTemplate collection has 4 columns and is grouped by     the value of the second column, then the second detail grid of     each DataRow in the grid will have 4 columns and will be     grouped by the value of the second column.     If the value of the SynchronizeDetailGrids property is     modified, the UpdateDetailGrids method must be called in     order for the changes to be reflected.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Text">
            <summary>Gets or sets the text associated with the grid. This property is not used by the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.Theme">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.Title">
            <summary>Gets or sets the title of the grid displayed in the GroupByRow.</summary>
            <remarks>    To reset the value of the Title property to its default     value, DefaultTitle, the ResetTitle method must be called or     the Title property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.TreeLineColor">
            <summary>Gets or sets the color of the treelines.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.TreeLinePen">
            <summary>Gets the pen that is used to draw the treelines.</summary>
            <remarks>    The Pen object returned is based on the values of the     TreeLineColor property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.UIStyle">
            <summary>Gets or sets the appearance of the grid.</summary>
            <remarks>    The appearance of the grid control can also be determined     by the value of the UIStyle property. By default, when the grid     is dropped on the form, it will take on the appearance of the     system's theme. To change the appearance of the control, the     UIStyle property can be set to Xceed.UI.UIStyle.WindowsXP,     Xceed.UI.UIStyle.System (default),     Xceed.UI.UIStyle.WindowsClassic, or     Xceed.UI.UIStyle.ResourceAssembly.     When the UIStyle property is set to     Xceed.UI.UIStyle.System (default), the grid will follow the     theme currently being used. If UIStyle is set to     Xceed.UI.UIStyle.WindowsXP on non-Windows XP machines, the blue     XP theme style will be used. On Windows XP machines, if a     classic Windows theme is used, the blue XP theme style will be     applied; otherwise, the current XP theme will be used. To force     either the blue, olive green, or silver Windows XP theme     regardless of the OS, the UIStyle property must be set to     Xceed.UI.UIStyle.ResourceAssembly.     When the UIStyle property is set to     Xceed.UI.UIStyle.ResourceAssembly, the ResourceAssembly     property of the grid must be set to the assembly resource from     which the UI style will be loaded.     In the case where the WindowsXP theme is applied to the     grid, the values of certain properties, such as BackColor, will     not be applied to themed elements such as the ColumnManagerRow     and RowSelectorPane.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.UIVirtualizationMode">
            <summary>Gets or sets a value representing the UI virtualization mode used by the grid.</summary>
            <remarks>    It is recommended to set this property     before rows are added to a grid or binding a     grid to its data source. It is also recommended to set this     property to false if the Cell.SiblingValueChanged     event is to be used extensively.     Changing this property from None to     Cells will only affect the rows added     afterward. Changing from Cells to     None will only affect rows added afterward or     cells whose properties are modified afterward.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.ValueMember">
            <summary>Gets or sets a string that specifies the property of the data source from which to draw the value.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid's content.</summary>
        </member>
        <member name="P:Xceed.Grid.GridControl.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridControl.XmlGradientMap">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.AddingDataRow">
            <summary>Raised when a new data row is being added to the grid.</summary>
            <remarks>    When bound to a data source, the AddingDataRow event is     raised for each row found in the data source. When in unbound     mode (providing data manually), it is raised once for each     DataRow added using the AddNew method afterEndEdit is     called in order to provide data to each cell in the row.</remarks>
        </member>
        <member name="E:Xceed.Grid.GridControl.AllowCellNavigationChanged">
            <summary>Raised when the value of the AllowCellNavigation property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.AutoCreateColumnsChanged">
            <summary>Raised when the value of the AutoCreateColumns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.BackgroundImageAlignmentChanged">
            <summary>Raised when the value of the BackgroundImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.BackgroundImageStyleChanged">
            <summary>Raised when the value of the BackgroundImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.BorderStyleChanged">
            <summary>Raised when the value of the BorderStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.CellEditorDisplayConditionsChanged">
            <summary>Raised when the value of the CellEditorDisplayConditions property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ClipCurrentCellSelectionChanged">
            <summary>Raised when the value of the ClipCurrentCellSelection property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ClipPartialLineChanged">
            <summary>Raised when the value of the ClipPartialLine property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ColumnAdded">
            <summary>Raised when a column is added to the grid.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ColumnRemoved">
            <summary>Raised when a column is removed from the grid.</summary>
            <remarks>    The index at which the column was removed should be     consulted through the Index property and not through the Index     property.</remarks>
        </member>
        <member name="E:Xceed.Grid.GridControl.CurrentCellChanged">
            <summary>Raised when the value of the CurrentCell property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.CurrentColumnChanged">
            <summary>Raised when the value of the CurrentColumn property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.CurrentRowChanged">
            <summary>Raised when the value of the CurrentRow property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.DataBindingChanged">
            <summary>Raised when the values of the DataSource or DataMember properties are changed, or when the String) method is called.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.DataMemberChanged">
            <summary>Raised when the value of the DataMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.DataRowsChanged">
            <summary>Raised when modifications are made to the content of a cell in a data row and when a data row is added or removed from the grid.</summary>
            <remarks>    Modifications made to a DataRow between calls to its     BeginEdit and EndEdit methods, will not cause the     DataRowsChanged events to be raised until the EndEdit or     CancelEdit methods are called.</remarks>
        </member>
        <member name="E:Xceed.Grid.GridControl.DataSourceChanged">
            <summary>Raised when the value of the DataSource property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorBackColorChanged">
            <summary>Raised when the value of the ErrorBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorBehaviorsChanged">
            <summary>Raised when the value of the ErrorBehaviors property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorBlinkRateChanged">
            <summary>Raised when the value of the ErrorBlinkRate property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorBlinkStyleChanged">
            <summary>Raised when the value of the ErrorBlinkStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorForeColorChanged">
            <summary>Raised when the value of the ErrorForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ErrorIconChanged">
            <summary>Raised when the value of the ErrorIcon property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.FirstVisibleColumnChanged">
            <summary>Raised when the value of the FirstVisibleColumn property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.FirstVisibleRowChanged">
            <summary>Raised when the value of the FirstVisibleRow property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GridLineBackColorChanged">
            <summary>Raised when the value of the GridLineBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GridLineColorChanged">
            <summary>Raised when the value of the GridLineColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GridLineStyleChanged">
            <summary>Raised when the value of the GridLineStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GripLocationChanged">
            <summary>Raised when the value of the GripLocation property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GroupAdded">
            <summary>Raised when a new group is added to the grid.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.GroupingUpdated">
            <summary>Raised when the data rows in the grid have been grouped.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.HideSelectionChanged">
            <summary>Raised when the value of the HideSelection property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.HorizontalAlignmentChanged">
            <summary>Raised when the value of the HorizontalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.InactiveSelectionBackColorChanged">
            <summary>Raised when the value of the InactiveSelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.InactiveSelectionForeColorChanged">
            <summary>Raised when the value of the InactiveSelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.InitializingDetailGrid">
            <summary>Raised for each DataRow about to be added to the grid to initialize its detail grid(s).</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.InitializingNewDataRow">
            <summary>Raised only by the AddNew method to initialize the default values of cells in the data row.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.OverflowErrorTextChanged">
            <summary>Raised when the value of the OverflowErrorText property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.OverrideUIStyleChanged">
            <summary>Raised when the value of the OverrideUIStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.QueryGroupKeys">
            <summary>Raised after a data row has been built in order to group it.</summary>
            <remarks>    When creating custom groups, the GroupBy property must be     set in order for the groups which are created manually to be     sorted. These groups will be sorted in the same direction as     the columns whose fieldname is set in the GroupBy     property.</remarks>
        </member>
        <member name="E:Xceed.Grid.GridControl.ReadOnlyChanged">
            <summary>Raised when the value of the ReadOnly property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ScrollBarsChanged">
            <summary>Raised when the value of the ScrollBars property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SelectedRowsChanged">
            <summary>Raised when the value of the SelectedRows property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SelectedValueChanged">
            <summary>Raised when the value of the SelectedValue property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SelectionBackColorChanged">
            <summary>Raised when the value of the SelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SelectionForeColorChanged">
            <summary>Raised when the value of the SelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SelectionModeChanged">
            <summary>Raised when the value of the SelectionMode property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ShowFocusRectangleChanged">
            <summary>Raised when the value of the ShowFocusRectangle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ShowTreeLinesChanged">
            <summary>Raised when the value of the ShowTreeLines property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ShowUnlinkedColumnsChanged">
            <summary>Raised when the value of the ShowUnlinkedColumns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SingleClickEditChanged">
            <summary>Raised when the value of the SingleClickEdit property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.Sorted">
            <summary>Raised when the grid has been sorted.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SortedColumnsChanged">
            <summary>Raised when the value of the SortedColumns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.SynchronizeDetailGridsChanged">
            <summary>Raised when the value of the SynchronizeDetailGrids property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.TitleChanged">
            <summary>Raised when the value of the Title property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.TreeLineColorChanged">
            <summary>Raised when the value of the TreeLineColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.TrimmingChanged">
            <summary>Raised when the value of the Trimming property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.UIVirtualizationModeChanged">
            <summary>Raised when the value of the UIVirtualizationMode property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.ValueMemberChanged">
            <summary>Raised when the value of the ValueMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.VerticalAlignmentChanged">
            <summary>Raised when the value of the VerticalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridControl.WordWrapChanged">
            <summary>Raised when the value of the WordWrap property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridElement">
            <summary>Represents any element in the grid and exposes properties and methods that allow their manipulations.</summary>
            <remarks>    When setting properties that modify the contents of a     grid element, for example the Font or ForeColor properties, it     is important to remember that if the grid element is a cell,     then only the cell will be modified. If the grid element is a     row or column, then all the cells in the row or column will be     modified.     The GridElement class implements the IComponent interface     which derives from the IDisposable interface. This was     necessary in order for each grid element to be a component in     the Grid Designer and thus individually selectable. It is     not necessary however to call the Dispose method on the     GridElement class nor on any class that derives from the     GridElement class.When creating a class that derives     from GridElement (or any of its derived classes), code should     not be placed within the Dispose method since Dispose will     not be called.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridElement.BringIntoView">
            <summary>Brings the grid element into the visible area of the grid.</summary>
            <remarks>When overriding BringIntoView in a derived class, you must make sure that the grid element is always brought into view, no matter its state or its parent state. For example, if the grid element is in a collapsed group, the group should be expanded. If the element is out of the grid's visible body, the grid should be scrolled until the element is in view.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnBackColorChanged(System.EventArgs)">
            <summary>Raises the BackColorChanged event.</summary>
            <remarks>When overriding OnBackColorChanged in a derived class, be sure to call the base class's OnBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnClipPartialLineChanged(System.EventArgs)">
            <summary>Raises the ClipPartialLineChanged event.</summary>
            <remarks>When overriding OnClipPartialLineChanged in a derived class, be sure to call the base class's OnClipPartialLineChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnFontChanged(System.EventArgs)">
            <summary>Raises the FontChanged event.</summary>
            <remarks>When overriding OnFontChanged in a derived class, be sure to call the base class's OnFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnForeColorChanged(System.EventArgs)">
            <summary>Raises the ForeColorChanged event.</summary>
            <remarks>When overriding OnForeColorChanged in a derived class, be sure to call the base class's OnForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnHorizontalAlignmentChanged(System.EventArgs)">
            <summary>Raises the HorizontalAlignmentChanged event.</summary>
            <remarks>When overriding OnHorizontalAlignmentChanged in a derived class, be sure to call the base class's OnHorizontalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnOverrideUIStyleChanged(System.EventArgs)">
            <summary>Raises the OverrideUIStyleChanged event.</summary>
            <remarks>When overriding OnOverrideUIStyleChanged in a derived class, be sure to call the base class's OnOverrideUIStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnReadOnlyChanged(System.EventArgs)">
            <summary>Raises the ReadOnlyChanged event.</summary>
            <remarks>When overriding OnReadOnlyChanged in a derived class, be sure to call the base class's OnReadOnlyChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnTrimmingChanged(System.EventArgs)">
            <summary>Raises the TrimmingChanged event.</summary>
            <remarks>When overriding OnTrimmingChanged in a derived class, be sure to call the base class's OnTrimmingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnVerticalAlignmentChanged(System.EventArgs)">
            <summary>Raises the VerticalAlignmentChanged event.</summary>
            <remarks>When overriding OnVerticalAlignmentChanged in a derived class, be sure to call the base class's OnVerticalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnVisibleChanged(System.EventArgs)">
            <summary>Raises the VisibleChanged event.</summary>
            <remarks>When overriding OnVisibleChanged in a derived class, be sure to call the base class's OnVisibleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.OnWordWrapChanged(System.EventArgs)">
            <summary>Raises the WordWrapChanged event.</summary>
            <remarks>When overriding OnWordWrapChanged in a derived class, be sure to call the base class's OnWordWrapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetBackColor">
            <summary>Resets the value of the BackColor property to its default value, DefaultBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetClipPartialLine">
            <summary>Resets the value of the ClipPartialLine property to its default value, DefaultClipPartialLine.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetFont">
            <summary>Resets the value of the Font property to its default value, DefaultFont.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetForeColor">
            <summary>Resets the value of the ForeColor property to its default value, DefaultForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetHorizontalAlignment">
            <summary>Resets the value of the HorizontalAlignment property to its default value, DefaultHorizontalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetOverrideUIStyle">
            <summary>Resets the value of the OverrideUIStyle property to its default value, DefaultOverrideUIStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetReadOnly">
            <summary>Resets the value of the ReadOnly property to its default value, DefaultReadOnly.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetReportStyle">
            <summary>Resets the property values of the ReportStyle.</summary>
            <remarks>    Calling the ResetReportStyle method will set the     ReportStyle property to $$NULL$$ causing a new     GridElementReportStyle to be created when the ReportStyle     property is accessed.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridElementReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetStyle">
            <summary>Resets the values of the properties affected by a GridElementStyle to their default values.</summary>
            <remarks>    Only the Font, ForeColor, BackColor, ClipPartialLine,     WordWrap, HorizontalAlignment, VerticalAlignment and Trimming     properties will be reset to their default values.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetTag">
            <summary>Resets the value of the Tag property to its default value, DefaultTag.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetTrimming">
            <summary>Resets the value of the Trimming property to its default value, DefaultTrimming.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetVerticalAlignment">
            <summary>Resets the value of the VerticalAlignment property to its default value, DefaultVerticalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetVisible">
            <summary>Resets the value of the Visible property to its default value, DefaultVisible.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.ResetWordWrap">
            <summary>Resets the value of the WordWrap property to its default value, DefaultWordWrap.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElement.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.Alignment">
            <summary>Gets the alignment of the element's content.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientBackColor">
            <summary>Gets the ambient value of the grid element's BackColor property.</summary>
            <remarks>    The ambient background color is the backcolor inherited     from the grid element's parent in the case where its own     BackColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultBackColor property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientClipPartialLine">
            <summary>Gets the ambient value of the grid element's ClipPartialLine property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own ClipPartialLine property is     not explicitly set.     If the value of the IsClipPartialLineAmbient property is     true then both the AmbientClipPartialLine and ClipPartialLine     properties will return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultClipPartialLine property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientFont">
            <summary>Gets the ambient value of the grid element's Font property.</summary>
            <remarks>    The ambient font is the font inherited from the grid     element's parent in the case where its own Font property is not     explicitly set.     If the value of the IsFontAmbient property is true then     both the AmbientFont and Font properties will return the same     value.     If the grid element does not have an ambient parent, then     the value of the DefaultFont property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientForeColor">
            <summary>Gets the ambient value of the grid element's ForeColor property.</summary>
            <remarks>    The ambient foreground color is the forecolor inherited     from the grid element's parent in the case where its own     ForeColor property is not explicitly set.     If the value of the IsForeColorAmbient property is true     then both the AmbientForeColor and ForeColor properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultForeColor property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientHorizontalAlignment">
            <summary>Gets the ambient value of the grid element's HorizontalAlignment property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own HorizontalAlignment property     is not explicitly set.     If the value of the IsHorizontalAlignmentAmbient property     is true then both the AmbientHorizontalAlignment and     HorizontalAlignment properties will return the same     value.     If the grid element does not have an ambient parent, then     the value of the DefaultHorizontalAlignment property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientOverrideUIStyle">
            <summary>Gets the ambient value of the grid elements's OverrideUIStyle property.</summary>
            <remarks>    The ambient value is inherited from the GridElement's     parent in the case where its own OverrideUIStyle property is     not explicitly set.     If the value of the IsOverrideUIStyleAmbient property is     true, both the AmbientOverrideUIStyle and OverrideUIStyle     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientParent">
            <summary>Gets the ambient parent of the grid element.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the grid element's     properties are not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientReadOnly">
            <summary>Gets the ambient value of the grid element's ReadOnly property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own ReadOnly property is not     explicitly set.     If the value of the IsReadOnlyAmbient property is true     then both the AmbientReadOnly and ReadOnly properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultReadOnly property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientTrimming">
            <summary>Gets the ambient value of the grid element's Trimming property.</summary>
            <remarks>    The ambient trimming is the trimming inherited from the     grid element's parent in the case where its own Trimming     property is not explicitly set.     If the value of the IsTrimmingAmbient property is true     then both the AmbientTrimming and Trimming properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultTrimming property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientVerticalAlignment">
            <summary>Gets the ambient value of the grid element's VerticalAlignment property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own VerticalAlignment property is     not explicitly set.     If the value of the IsVerticalAlignmentAmbient property     is true then both the AmbientVerticalAlignment and     VerticalAlignment properties will return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultVerticalAlignment property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.AmbientWordWrap">
            <summary>Gets the ambient value of the grid element's WordWrap property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own WordWrap property is not     explicitly set.     If the value of the IsWordWrapAmbient property is true     then both the AmbientWordWrap and WordWrap properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultWordWrap property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.BackColor">
            <summary>Gets or sets the background color of the grid element.</summary>
            <remarks>    If the IsBackColorAmbient property returns true, then the     value of the BackColor property is inherited from its     parent.     To reset the value of the BackColor property to its     default value, DefaultBackColor, the ResetBackColor method must     be called or Empty assigned to the BackColor property.     In the case where the WindowsXP theme is applied to the     grid, the values of certain properties, such as BackColor, will     not be applied to themed elements such as the ColumnManagerRow     and RowSelectorPane.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the grid element will be displayed. For     example, if a cell contains multi-line text but the height of     the cell only allows for one line of text to be displayed     properly, the second line will not be displayed. If set to     false, and the height of the cell only allows for one line to     be displayed properly, it is possible that part of the second     line will be visible in the cell.     If the IsClipPartialLineAmbient property returns true,     then the value of the ClipPartialLine property is inherited     from its parent.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultClipPartialLine">
            <summary>Gets the default value of the ClipPartialLine property.</summary>
            <remarks>    When overriding DefaultClipPartialLine in a derived     class, IsClipPartialLineAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultClipPartialLine should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultFont">
            <summary>Gets the default value of the Font property</summary>
            <remarks>    When overriding DefaultFont in a derived class, a static     Font object should be used and IsFontAmbient should also be     overridden to return false.     The value returned by your implementation of DefaultFont     should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultForeColor">
            <summary>Gets the default value of the ForeColor property</summary>
            <remarks>    When overriding DefaultForeColor in a derived class,     IsForeColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultForeColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultHorizontalAlignment">
            <summary>Gets the default value of the HorizontalAlignment property.</summary>
            <remarks>    When overriding DefaultHorizontalAlignment in a derived     class, IsHorizontalAlignmentAmbient should also be overridden     to return false.     The value returned by your implementation of     DefaultHorizontalAlignment should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultOverrideUIStyle">
            <summary>Gets the default value of the OverrideUIStyle property.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultReadOnly">
            <summary>Gets the default value of the ReadOnly property.</summary>
            <remarks>    When overriding DefaultReadOnly in a derived class,     IsReadOnlyAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultReadOnly should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultTag">
            <summary>Gets the default value of the Tag property.</summary>
            <remarks>    When overriding DefaultTag in a derived class, the value     returned by your implementation of DefaultTag should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultTrimming">
            <summary>Gets the default value of the Trimming property.</summary>
            <remarks>    When overriding DefaultTrimming in a derived class,     IsTrimmingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultTrimming should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultVerticalAlignment">
            <summary>Gets the default value of the VerticalAlignment property.</summary>
            <remarks>    When overriding DefaultVerticalAlignment in a derived     class, IsVerticalAlignmentAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultVerticalAlignment should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
            <remarks>    When overriding DefaultVisible in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.DefaultWordWrap">
            <summary>Gets the default value of the WordWrap property.</summary>
            <remarks>    When overriding DefaultWordWrap in a derived class,     IsWordWrapAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultWordWrap should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.Font">
            <summary>Gets or sets the font of the grid element.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     If the IsFontAmbient property returns true, then the     value of the Font property is inherited from its parent.     To reset the value of the Font property to its default     value, DefaultFont, the ResetFont method must be called or     $$NULL$$ assigned to the Font property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.ForeColor">
            <summary>Gets or sets the foreground color of the grid element.</summary>
            <remarks>    If the IsForeColorAmbient property returns true, then the     value of the ForeColor property is inherited from its     parent.     To reset the value of the ForeColor property to its     default value, DefaultForeColor, the ResetForeColor method must     be called or Empty assigned to the ForeColor property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.GridControl">
            <summary>Gets the GridControl in which all the grid elements are contained.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid element's content.</summary>
            <remarks>    If the IsHorizontalAlignmentAmbient property returns     true, then the value of the HorizontalAlignment property is     inherited from its parent.     To reset the value of the HorizontalAlignment property to     its default value, DefaultHorizontalAlignment, the     ResetHorizontalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsClipPartialLineAmbient">
            <summary>Gets a boolean value indicating if the ClipPartialLine property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsFontAmbient">
            <summary>Gets a boolean value indicating if the Font property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsForeColorAmbient">
            <summary>Gets a boolean value indicating if the ForeColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsHorizontalAlignmentAmbient">
            <summary>Gets a boolean value indicating if the HorizontalAlignment property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsOverrideUIStyleAmbient">
            <summary>Gets a boolean value indicating if the OverrideUIStyle property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsOverrideUIStyleDefined">
            <summary>Gets a boolean value indicating whether the OverrideUIStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsReadOnlyAmbient">
            <summary>Gets a boolean value indicating if the ReadOnly property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsReportStyleDefined">
            <summary>Gets a boolean value indicating if one or more properties of the ReportStyle have been explicitly set.</summary>
            <remarks>    The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridElementReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsTrimmingAmbient">
            <summary>Gets a boolean value indicating if the Trimming property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsVerticalAlignmentAmbient">
            <summary>Gets a boolean value indicating if the VerticalAlignment property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.IsWordWrapAmbient">
            <summary>Gets a boolean value indicating if the WordWrap property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.OverrideUIStyle">
            <summary>Gets or sets a boolean value indicating whether any theming based on the UIStyle property of the GridControl will be overridden.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.ParentGrid">
            <summary>Gets the parent grid of the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.ParentVisible">
            <summary>Gets a boolean value indicating if the GridElement's parent is visible.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.ReadOnly">
            <summary>Gets or sets a boolean value indicating if the content of cell(s) can be edited.</summary>
            <remarks>    If the IsReadOnlyAmbient property returns true, then the     value of the ReadOnly property is inherited from its     parent.     To reset the value of the ReadOnly property to its     default value, DefaultReadOnly, the ResetReadOnly method must     be called.     If the ReadOnly property is set to true but the     ReadOnlyDataSource property is false, then the content of the     grid element can not be edited.     Although the ReadOnly property ultimately affects only     cells, it is defined in the GridElement class because of     ambientness.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.ReportStyle">
            <summary>Gets the report style of the grid element.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GridElementReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.Tag">
            <summary>Gets or sets the object that contains data about the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.Theme">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    This property is only applied when WordWrap is     true.     If the IsTrimmingAmbient property returns true, then the     value of the Trimming property is inherited from its     parent.     To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid element's content.</summary>
            <remarks>    If the IsVerticalAlignmentAmbient property returns true,     then the value of the VerticalAlignment property is inherited     from its parent.     To reset the value of the VerticalAlignment property to     its default value, DefaultVerticalAlignment, the     ResetVerticalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElement.Visible">
            <summary>Gets or sets a boolean value indicating if the GridElement is visible.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElement.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    If the IsWordWrapAmbient property returns true, then the     value of the WordWrap property is inherited from its     parent.     To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="E:Xceed.Grid.GridElement.BackColorChanged">
            <summary>Raised when the value of the BackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.ClipPartialLineChanged">
            <summary>Raised when the value of the ClipPartialLine property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.FontChanged">
            <summary>Raised when the value of the Font property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.ForeColorChanged">
            <summary>Raised when the value of the ForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.HorizontalAlignmentChanged">
            <summary>Raised when the value of the HorizontalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.OverrideUIStyleChanged">
            <summary>Raised when the value of the OverrideUIStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.ReadOnlyChanged">
            <summary>Raised when the value of the ReadOnly property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.TrimmingChanged">
            <summary>Raised when the value of the Trimming property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.VerticalAlignmentChanged">
            <summary>Raised when the value of the VerticalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.VisibleChanged">
            <summary>Raised when the value of the Visible property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElement.WordWrapChanged">
            <summary>Raised when the value of the WordWrap property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridElementBase">
            <summary>Base class for all grid elements.</summary>
        </member>
        <member name="T:Xceed.Grid.GridElementStyle">
            <summary>Represents the style of a GridElement.</summary>
            <remarks>If a property that modifies the appearance of the style is added to a derived class, the EventArgs) method must be called when the value of the property is modified, otherwise the grid will not be repainted to reflect the changes. This only applies to the DataRowTemplateStyles.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.#ctor">
            <summary>Initializes a new instance of the GridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.#ctor">
            <summary>Initializes a new instance of the GridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.#ctor(Xceed.Grid.GridElementStyle)">
            <summary>Initializes a new instance of the GridElementStyle class specifying a GridElementStyle from which to copy property values.</summary>
            <param name="gridElementStyle">A reference to a GridElementStyle from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Apply">
            <summary>Applies the style to the specified grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Apply(Xceed.Grid.GridElement)">
            <summary>Applies the style to the specified grid element.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="element">The GridElement to which to apply the style</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Apply(Xceed.Grid.GridControl)">
            <summary>Applies the style to the specified grid.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="grid">A reference to a GridControl object representing the grid to which to apply the style.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GridElementStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current GridElementStyle.</summary>
            <returns>true if the specified object is equal to the current GridElementStyle; otherwise, false.</returns>
            <param name="obj">The object to compare with the current GridElementStyle.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.GetHashCode">
            <summary>Serves as a hash function for the GridElementStyle object, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>An integer value representing a hash code for the current GridElementStyle object.</returns>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnBackColorChanged(System.EventArgs)">
            <summary>Raises the BackColorChanged event.</summary>
            <remarks>When overriding OnBackColorChanged in a derived class, be sure to call the base class's OnBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnClipPartialLineChanged(System.EventArgs)">
            <summary>Raises the ClipPartialLineChanged event.</summary>
            <remarks>When overriding OnClipPartialLineChanged in a derived class, be sure to call the base class's OnClipPartialLineChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnFontChanged(System.EventArgs)">
            <summary>Raises the FontChanged event.</summary>
            <remarks>When overriding OnFontChanged in a derived class, be sure to call the base class's OnFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnForeColorChanged(System.EventArgs)">
            <summary>Raises the ForeColorChanged event.</summary>
            <remarks>When overriding OnForeColorChanged in a derived class, be sure to call the base class's OnForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnHorizontalAlignmentChanged(System.EventArgs)">
            <summary>Raises the HorizontalAlignmentChanged event.</summary>
            <remarks>When overriding OnHorizontalAlignmentChanged in a derived class, be sure to call the base class's OnHorizontalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnOverrideUIStyleChanged(System.EventArgs)">
            <summary>Raises the OverrideUIStyleChanged event.</summary>
            <remarks>When overriding OnOverrideUIStyleChanged in a derived class, be sure to call the base class's OnOverrideUIStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnStyleChanged(System.EventArgs)">
            <summary>Raises the StyleChanged event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnTrimmingChanged(System.EventArgs)">
            <summary>Raises the TrimmingChanged event.</summary>
            <remarks>When overriding OnTrimmingChanged in a derived class, be sure to call the base class's OnTrimmingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnVerticalAlignmentChanged(System.EventArgs)">
            <summary>Raises the VerticalAlignmentChanged event.</summary>
            <remarks>When overriding OnVerticalAlignmentChanged in a derived class, be sure to call the base class's OnVerticalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.OnWordWrapChanged(System.EventArgs)">
            <summary>Raises the WordWrapChanged event.</summary>
            <remarks>When overriding OnWordWrapChanged in a derived class, be sure to call the base class's OnWordWrapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.Reset">
            <summary>Resets all of the properties that have been explicitly set back to their default values.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetBackColor">
            <summary>Resets the value of the BackColor property to its default value, DefaultBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetClipPartialLine">
            <summary>Resets the value of the ClipPartialLine property to its default value, DefaultClipPartialLine.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetFont">
            <summary>Resets the value of the Font property to its default value, DefaultFont.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetForeColor">
            <summary>Resets the value of the ForeColor property to its default value, DefaultForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetHorizontalAlignment">
            <summary>Resets the value of the HorizontalAlignment property to its default value, DefaultHorizontalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetOverrideUIStyle">
            <summary>Resets the value of the OverrideUIStyle property to its default value, DefaultOverrideUIStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetTrimming">
            <summary>Resets the value of the Trimming property to its default value, DefaultTrimming.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetVerticalAlignment">
            <summary>Resets the value of the VerticalAlignment property to its default value, DefaultVerticalAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ResetWordWrap">
            <summary>Resets the value of the WordWrap property to its default value, DefaultWordWrap.</summary>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeClipPartialLine">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeFont">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeHorizontalAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeTrimming">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeVerticalAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeWordWrap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeXmlBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeXmlFont">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridElementStyle.ShouldSerializeXmlForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.BackColor">
            <summary>Gets or sets the background color of the grid element.</summary>
            <remarks>    If set to Empty, the parent's color is used.     To reset the value of the BackColor property to its     default value, DefaultBackColor, the ResetBackColor method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the cell will be displayed. For example, if     a cell contains multi-line text but the height of the cell only     allows for one line of text to be displayed properly, the     second line will not be displayed. If set to false, and the     height of the cell only allows for one line to be displayed     properly, it is possible that part of the second line will be     visible in the cell.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultBackColor">
            <summary>Gets the default value of the BackColor property</summary>
            <remarks>    When overriding DefaultBackColor in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultClipPartialLine">
            <summary>Gets the default value of the ClipPartialLine property.</summary>
            <remarks>    When overriding DefaultClipPartialLine in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultFont">
            <summary>Gets the default value of the Font property.</summary>
            <remarks>    When overriding DefaultFont in a derived class, a static     Font object should be used and the value returned by your     implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultForeColor">
            <summary>Gets the default value of the ForeColor property</summary>
            <remarks>    When overriding DefaultForeColor in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultHorizontalAlignment">
            <summary>Gets the default value of the HorizontalAlignment property.</summary>
            <remarks>    When overriding DefaultHorizontalAlignment in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultOverrideUIStyle">
            <summary>Gets the default value of the OverrideUIStyle property.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultTrimming">
            <summary>Gets the default value of the Trimming property.</summary>
            <remarks>    When overriding DefaultTrimming in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultVerticalAlignment">
            <summary>Gets the default value of the VerticalAlignment property.</summary>
            <remarks>    When overriding DefaultVerticalAlignment in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.DefaultWordWrap">
            <summary>Gets the default value of the WordWrap property.</summary>
            <remarks>    When overriding DefaultWordWrap in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.Font">
            <summary>Gets or sets the font of the grid element.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     To reset the value of the Font property to its default     value, DefaultFont, the ResetFont method must be called or the     Font property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.ForeColor">
            <summary>Gets or sets the foreground color of the grid element.</summary>
            <remarks>    If set to Empty, the parent's color is used.     To reset the value of the ForeColor property to its     default value, DefaultForeColor, the ResetForeColor method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid element's content.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsBackColorDefined">
            <summary>Gets a boolean value indicating if the BackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsClipPartialLineDefined">
            <summary>Gets a boolean value indicating if the ClipPartialLine property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsFontDefined">
            <summary>Gets a boolean value indicating if the Font property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsForeColorDefined">
            <summary>Gets a boolean value indicating if the ForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsHorizontalAlignmentDefined">
            <summary>Gets a boolean value indicating if the HorizontalAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsOverrideUIStyleDefined">
            <summary>Gets a boolean value indicating whether the OverrideUIStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsTrimmingDefined">
            <summary>Gets a boolean value indicating if the Trimming property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsVerticalAlignmentDefined">
            <summary>Gets a boolean value indicating if the VerticalAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.IsWordWrapDefined">
            <summary>Gets a boolean value indicating if the WordWrap property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.OverrideUIStyle">
            <summary>Gets or sets a boolean value indicating whether any theming based on the UIStyle property of the GridControl will be overridden.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid element's content when it is printed in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.XmlBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.XmlFont">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridElementStyle.XmlForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.BackColorChanged">
            <summary>Raised when the value of the BackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.ClipPartialLineChanged">
            <summary>Raised when the value of the ClipPartialLine property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.FontChanged">
            <summary>Raised when the value of the Font property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.ForeColorChanged">
            <summary>Raised when the value of the ForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.HorizontalAlignmentChanged">
            <summary>Raised when the value of the HorizontalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.OverrideUIStyleChanged">
            <summary>Raised when the value of the OverrideUIStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.StyleChanged">
            <summary>Raised when the value of any visual property has been changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.TrimmingChanged">
            <summary>Raised when the value of the Trimming property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.VerticalAlignmentChanged">
            <summary>Raised when the value of the VerticalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridElementStyle.WordWrapChanged">
            <summary>Raised when the value of the WordWrap property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridException">
            <summary>The exception that is thrown by the grid when a non-fatal grid-specific error occurs.</summary>
        </member>
        <member name="M:Xceed.Grid.GridException.#ctor">
            <summary>Initializes a new instance of the GridException class with a specified error message.</summary>
        </member>
        <member name="M:Xceed.Grid.GridException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the GridException class specify serialization information and a streaming context.</summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, as well as a means for serialization to retain that context and an additional caller-defined context.</param>
        </member>
        <member name="M:Xceed.Grid.GridException.#ctor(System.String)">
            <summary>Initializes a new instance of the GridException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Grid.GridException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the GridException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not $$NULL$$, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:Xceed.Grid.GridInternalException">
            <summary>The exception that is thrown by the grid when a fatal grid-specific error occurs.</summary>
            <remarks>    This exception means that there was an internal failure     in the control and that nothing could be done to prevent it.     Such failures should never occur.     To get more details about what went wrong, you can     inspect the InnerException property which is a reference to the     exception that caused the internal failure.     If you ever catch this exception in your code, please     contact Xceed Software Technical Support immediately.</remarks>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor">
            <summary>Initializes a new instance of the GridInternalException class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor">
            <summary>Initializes a new instance of the GridInternalException class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the GridException class with a reference to the inner exception that is the cause of this exception.</summary>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not $$NULL$$, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the GridInternalException class specify serialization information and a streaming context.</summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, as well as a means for serialization to retain that context and an additional caller-defined context.</param>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor(System.String)">
            <summary>Initializes a new instance of the GridInternalException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Grid.GridInternalException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the GridException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not $$NULL$$, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:Xceed.Grid.GridPaintEventArgs">
            <summary>Provides information regarding the area that is to be painted.</summary>
        </member>
        <member name="M:Xceed.Grid.GridPaintEventArgs.#ctor">
            <summary>Initializes a new instance of the GridPaintEventArgs class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the GridPaintEventArgs class.</summary>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="clientPosition">The position of the grid's ClientRectangle in grid coordinates.</param>
            <param name="clientRectangle">The client rectangle of the grid element. The rectangle represents the visible portion of the grid element and is in client coordinates. The X and Y coordinates are always 0,0.</param>
            <param name="displayRectangle">The display rectangle of the grid element. The rectangle is in client coordinates and the X and Y coordinates can be negative if the grid is scrolled.</param>
            <param name="bottomBorderWidth">The width needed to draw the bottom border (if one is required) of the DetailGrid objects.</param>
            <param name="printing">Indicates whether the element is being printed.</param>
        </member>
        <member name="M:Xceed.Grid.GridPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Rectangle,Xceed.Grid.StatelessVisualGridElementStyle,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the GridPaintEventArgs class.</summary>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="clientPosition">The position of the grid's ClientRectangle in grid coordinates.</param>
            <param name="clientRectangle">The client rectangle of the grid element. The rectangle represents the visible portion of the grid element and is in client coordinates. The X and Y coordinates are always 0,0.</param>
            <param name="displayRectangle">The display rectangle of the grid element. The rectangle is in client coordinates and the X and Y coordinates can be negative if the grid is scrolled.</param>
            <param name="displayVisualStyle">A StatelessVisualGridElementStyle object representing the stateless style of the VisualGridElement.</param>
            <param name="bottomBorderWidth">The width needed to draw the bottom border (if one is required) of the DetailGrid objects.</param>
            <param name="printing">Indicates whether the element is being printed.</param>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.BottomBorderWidth">
            <summary>Gets the width needed to draw the bottom border (if one is required) of the DetailGrid objects.</summary>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.ClientPosition">
            <summary>Gets the position of the grid's ClientRectangle in grid coordinates.</summary>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.ClientRectangle">
            <summary>Gets the client rectangle of the grid element. The rectangle represents the visible portion of the grid element and is in client coordinates. The X and Y coordinates are always 0,0.</summary>
            <remarks>    The rectangle represents the visible portion of the grid     element and is in client coordinates. The X and Y coordinates     are always 0,0. The width and height of the client rectangle     vary depending on how much of the grid element is visible in     the grid.     The client rectangle of the grid element does not     include the Borders.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.DisplayRectangle">
            <summary>Gets the display rectangle of the grid element. The rectangle is in client coordinates and the X and Y coordinates can be negative if the grid is scrolled.</summary>
            <remarks>    The rectangle is in client coordinates and the X and Y     coordinates can be negative if the grid is scrolled. The width     and height of the display rectangle never vary.     The display rectangle of the grid element does not     include the Borders.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.DisplayVisualStyle">
            <summary>Gets the display visual style of the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.Graphics">
            <summary>Gets the Graphics object used to paint.</summary>
        </member>
        <member name="P:Xceed.Grid.GridPaintEventArgs.Printing">
            <summary>Gets a boolean value indicating if the element is being printed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridPrintDocument">
            <summary>Represents a reusable object that allows grids to be printed.</summary>
        </member>
        <member name="M:Xceed.Grid.GridPrintDocument.#ctor(Xceed.Grid.GridControl)">
            <summary>Initializes a new instance of the GridPrintDocument class.</summary>
            <remarks>    The default constructor initializes all fields based upon     the default printer. Typically, after creating a new     GridPrintDocument, you set printer and page settings that     affect the output through the PrinterSettings and     DefaultPageSettings properties respectively.</remarks>
            <param name="grid">A reference to the GridControl object to print.</param>
        </member>
        <member name="M:Xceed.Grid.GridPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>Raises the BeginPrint event.</summary>
            <remarks>When overriding OnBeginPrint in a derived class, be sure to call the base class's OnBeginPrint method so that registered delegates receive the event.</remarks>
            <param name="e">A PrintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>Raises the PrintPage event.</summary>
            <remarks>When overriding OnPrintPage in a derived class, be sure to call the base class's OnPrintPage method so that registered delegates receive the event.</remarks>
            <param name="e">A PrintPageEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridPrintDocument.OnQueryPrintPage(Xceed.Grid.QueryPrintPageEventArgs)">
            <summary>Raises the QueryPrintPage event.</summary>
            <remarks>When overriding OnQueryPrintPage in a derived class, be sure to call the base class's OnQueryPrintPage method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryPrintPageEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.GridPrintDocument.CurrentPageNumber">
            <summary>Gets the page number of the current page.</summary>
        </member>
        <member name="P:Xceed.Grid.GridPrintDocument.Grid">
            <summary>Gets a reference to the grid to print.</summary>
        </member>
        <member name="E:Xceed.Grid.GridPrintDocument.QueryPrintPage">
            <summary>Raised when a page is about to be printed.</summary>
            <remarks>    If you are preventing all pages from being printed during     a printing process, a blank page will be printed unless     you set e.Cancel to true.</remarks>
        </member>
        <member name="T:Xceed.Grid.GridStyle">
            <summary>Represents the style of a grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.#ctor">
            <summary>Initializes a new instance of the GridStyle class specifying a GridStyle from which to copy property values.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.#ctor">
            <summary>Initializes a new instance of the GridStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.#ctor(Xceed.Grid.GridStyle)">
            <summary>Initializes a new instance of the GridStyle class specifying a GridStyle from which to copy property values.</summary>
            <param name="gridStyle">A reference to a VisualGridElementStyle from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.Apply">
            <summary>Applies the style to the specified grid control.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.Apply(Xceed.Grid.GridControl)">
            <summary>Applies the style to the specified grid control.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="grid">A reference to a GridControl object representing the grid to which to apply the style.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.Apply(Xceed.Grid.GridElement)">
            <summary>Applies the style to the specified grid element.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="element">A reference to a GridElement object representing the grid element to which to apply the style.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GridStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnBorderStyleChanged(System.EventArgs)">
            <summary>Raises the BorderStyleChanged event.</summary>
            <remarks>When overriding OnBorderStyleChanged in a derived class, be sure to call the base class's OnBorderStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnClipCurrentCellSelectionChanged(System.EventArgs)">
            <summary>Raises the ClipCurrentCellSelectionChanged event.</summary>
            <remarks>When overriding OnClipCurrentCellSelectionChanged in a derived class, be sure to call the base class's OnClipCurrentCellSelectionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnErrorBackColorChanged(System.EventArgs)">
            <summary>Raises the ErrorBackColorChanged event.</summary>
            <remarks>When overriding OnErrorBackColorChanged in a derived class, be sure to call the base class's OnErrorBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnErrorForeColorChanged(System.EventArgs)">
            <summary>Raises the ErrorForeColorChanged event.</summary>
            <remarks>When overriding OnErrorForeColorChanged in a derived class, be sure to call the base class's OnErrorForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnErrorVisualStyleChanged(System.EventArgs)">
            <summary>Raises the ErrorVisualStyleChanged event.</summary>
            <remarks>When overriding OnErrorVisualStyleChanged in a derived class, be sure to call the base class's OnErrorVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnGridLineColorChanged(System.EventArgs)">
            <summary>Raises the GridLineColorChanged event.</summary>
            <remarks>When overriding OnGridLineColorChanged in a derived class, be sure to call the base class's OnGridLineColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnGridLineStyleChanged(System.EventArgs)">
            <summary>Raises the GridLineStyleChanged event.</summary>
            <remarks>When overriding OnGridLineStyleChanged in a derived class, be sure to call the base class's OnGridLineStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnInactiveSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionBackColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionBackColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnInactiveSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionForeColorChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionForeColorChanged in a derived class, be sure to call the base class's OnInactiveSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnInactiveSelectionVisualStyleChanged(System.EventArgs)">
            <summary>Raises the InactiveSelectionVisualStyleChanged event.</summary>
            <remarks>When overriding OnInactiveSelectionVisualStyleChanged in a derived class, be sure to call the base class's OnInactiveSelectionVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnSelectionBackColorChanged(System.EventArgs)">
            <summary>Raises the SelectionBackColorChanged event.</summary>
            <remarks>When overriding OnSelectionBackColorChanged in a derived class, be sure to call the base class's OnSelectionBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnSelectionForeColorChanged(System.EventArgs)">
            <summary>Raises the SelectionForeColorChanged event.</summary>
            <remarks>When overriding OnSelectionForeColorChanged in a derived class, be sure to call the base class's OnSelectionForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnSelectionVisualStyleChanged(System.EventArgs)">
            <summary>Raises the SelectionVisualStyleChanged event.</summary>
            <remarks>When overriding OnSelectionVisualStyleChanged in a derived class, be sure to call the base class's OnSelectionVisualStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.OnShowFocusRectangleChanged(System.EventArgs)">
            <summary>Raises the ShowFocusRectangleChanged event.</summary>
            <remarks>When overriding OnShowFocusRectangleChanged in a derived class, be sure to call the base class's OnShowFocusRectangleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetBorderStyle">
            <summary>Resets the value of the BorderStyle property to its default value, DefaultBorderStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetClipCurrentCellSelection">
            <summary>Resets the value of the ClipCurrentCellSelection property to its default value, DefaultClipCurrentCellSelection.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetErrorBackColor">
            <summary>Resets the value of the ErrorBackColor property to its default value, DefaultErrorBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetErrorForeColor">
            <summary>Resets the value of the ErrorForeColor property to its default value, DefaultErrorForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetErrorVisualStyle">
            <summary>Resets the visual style of a row that contains a cell that contains an error in the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetGridLineColor">
            <summary>Resets the value of the GridLineColor property to its default value, DefaultGridLineColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetGridLineStyle">
            <summary>Resets the value of the GridLineStyle property to its default value, DefaultGridLineStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetInactiveSelectionBackColor">
            <summary>Resets the value of the InactiveSelectionBackColor property to its default value, DefaultInactiveSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetInactiveSelectionForeColor">
            <summary>Resets the value of the InactiveSelectionForeColor property to its default value, DefaultInactiveSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetInactiveSelectionVisualStyle">
            <summary>Resets the visual style of an inactive selected row in the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetSelectionBackColor">
            <summary>Resets the value of the SelectionBackColor property to its default value, DefaultSelectionBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetSelectionForeColor">
            <summary>Resets the value of the SelectionForeColor property to its default value, DefaultSelectionForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetSelectionVisualStyle">
            <summary>Resets the visual style of a selected row in the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ResetShowFocusRectangle">
            <summary>Resets the value of the ShowFocusRectangle property to its default value, DefaultShowFocusRectangle.</summary>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeBorderStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeErrorBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeErrorForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeGridLineColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeGridLineStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeInactiveSelectionBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeInactiveSelectionForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeSelectionBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeSelectionForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlErrorBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlErrorForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlGridLineColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlInactiveSelectionBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlInactiveSelectionForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlSelectionBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GridStyle.ShouldSerializeXmlSelectionForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.GridStyle.BorderStyle">
            <summary>Gets or sets the border style of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.ClipCurrentCellSelection">
            <summary>Gets or sets a value indicating whether the selection state of a row will be applied to the current cell.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultBorderStyle">
            <summary>Gets the default value of the BorderStyle property.</summary>
            <remarks>    When overriding DefaultBorderStyle in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultClipCurrentCellSelection">
            <summary>Gets the default value of the ClipCurrentCellSelection property.</summary>
            <remarks>When overriding DefaultClipCurrentCellSelection in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultErrorBackColor">
            <summary>Gets the default value of the ErrorBackColor property.</summary>
            <remarks>    When overriding DefaultErrorBackColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultErrorForeColor">
            <summary>Gets the default value of the ErrorForeColor property.</summary>
            <remarks>    When overriding DefaultErrorForeColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultErrorVisualStyle">
            <summary>Gets the default visual style of a row that contains a cell that contains an error in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultGridLineColor">
            <summary>Gets the default value of the GridLineColor property.</summary>
            <remarks>    When overriding DefaultGridLineColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultGridLineStyle">
            <summary>Gets the default value of the GridLineStyle property.</summary>
            <remarks>    When overriding DefaultGridLineStyle in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultInactiveSelectionBackColor">
            <summary>Gets the default value of the InactiveSelectionBackColor property.</summary>
            <remarks>    When overriding DefaultInactiveSelectionBackColor in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultInactiveSelectionForeColor">
            <summary>Gets the default value of the InactiveSelectionForeColor property.</summary>
            <remarks>    When overriding DefaultInactiveSelectionForeColor in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultInactiveSelectionVisualStyle">
            <summary>Gets the default visual style of an inactive selected row in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultSelectionBackColor">
            <summary>Gets the default value of the SelectionBackColor property.</summary>
            <remarks>    When overriding DefaultSelectionBackColor in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultSelectionForeColor">
            <summary>Gets the default value of the SelectionForeColor property.</summary>
            <remarks>    When overriding DefaultSelectionForeColor in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultSelectionVisualStyle">
            <summary>Gets the default visual style of a selected row in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.DefaultShowFocusRectangle">
            <summary>Gets the default value of the ShowFocusRectangle property.</summary>
            <remarks>When overriding DefaultShowFocusRectangle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.ErrorBackColor">
            <summary>Gets or sets the background color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorBackColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.ErrorForeColor">
            <summary>Gets or sets the foreground color that is used when an error occurs in the grid.</summary>
            <remarks>    The ErrorForeColor is applied to the row or cells when     their ErrorDescription property is not Empty.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.ErrorVisualStyle">
            <summary>Gets or sets the visual style of a row that contains a cell that contains an error in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.GridLineColor">
            <summary>Gets or sets the color of the grid's lines.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.GridLineStyle">
            <summary>Gets or sets the style of the grid's lines.</summary>
            <remarks>Custom is not supported.</remarks>
        </member>
        <member name="P:Xceed.Grid.GridStyle.InactiveSelectionBackColor">
            <summary>Gets or sets the inactive selection background color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.InactiveSelectionForeColor">
            <summary>Gets or sets the inactive selection foreground color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.InactiveSelectionVisualStyle">
            <summary>    Gets or sets the visual style of an inactive selected row     in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsBorderStyleDefined">
            <summary>Gets a boolean value indicating if the BorderStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsClipCurrentCellSelectionDefined">
            <summary>Gets a boolean value indicating if the ClipCurrentCellSelection property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsErrorBackColorDefined">
            <summary>Gets a boolean value indicating if the ErrorBackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsErrorForeColorDefined">
            <summary>Gets a boolean value indicating if the ErrorForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsErrorVisualStyleDefined">
            <summary>Gets a boolean value indicating if the ErrorVisualStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsGridLineColorDefined">
            <summary>Gets a boolean value indicating if the GridLineColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsGridLineStyleDefined">
            <summary>Gets a boolean value indicating if the GridLineStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsInactiveSelectionBackColorDefined">
            <summary>Gets a boolean value indicating if the InactiveSelectionBackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsInactiveSelectionForeColorDefined">
            <summary>Gets a boolean value indicating if the InactiveSelectionForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsInactiveSelectionVisualStyleDefined">
            <summary>Gets a boolean value indicating if the InactiveSelectionVisualStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsSelectionBackColorDefined">
            <summary>Gets a boolean value indicating if the SelectionBackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsSelectionForeColorDefined">
            <summary>Gets a boolean value indicating if the SelectionForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsSelectionVisualStyleDefined">
            <summary>Gets a boolean value indicating if the SelectionVisualStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.IsShowFocusRectangleDefined">
            <summary>Gets a boolean value indicating if the ShowFocusRectangle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.SelectionBackColor">
            <summary>Gets or sets the selection background color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.SelectionForeColor">
            <summary>Gets or sets the selection foreground color of the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.SelectionVisualStyle">
            <summary>Gets or sets the visual style of a selected row in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.ShowFocusRectangle">
            <summary>Gets or sets a boolean value indicating whether the focus rectangle should be displayed around the CurrentRow and/or CurrentCell.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlErrorBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlErrorForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlGridLineColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlInactiveSelectionBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlInactiveSelectionForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlSelectionBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GridStyle.XmlSelectionForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.BorderStyleChanged">
            <summary>Raised when the value of the BorderStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.ClipCurrentCellSelectionChanged">
            <summary>Raised when the value of the ClipCurrentCellSelection property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.ErrorBackColorChanged">
            <summary>Raised when the value of the ErrorBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.ErrorForeColorChanged">
            <summary>Raised when the value of the ErrorForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.ErrorVisualStyleChanged">
            <summary>Raised when the value of the ErrorVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.GridLineColorChanged">
            <summary>Raised when the value of the GridLineColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.GridLineStyleChanged">
            <summary>Raised when the value of the GridLineStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.InactiveSelectionBackColorChanged">
            <summary>Raised when the value of the InactiveSelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.InactiveSelectionForeColorChanged">
            <summary>Raised when the value of the InactiveSelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.InactiveSelectionVisualStyleChanged">
            <summary>Raised when the value of the InactiveSelectionVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.SelectionBackColorChanged">
            <summary>Raised when the value of the SelectionBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.SelectionForeColorChanged">
            <summary>Raised when the value of the SelectionForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.SelectionVisualStyleChanged">
            <summary>Raised when the value of the SelectionVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GridStyle.ShowFocusRectangleChanged">
            <summary>Raised when the value of the ShowFocusRectangle property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GridValidationException">
            <summary>The exception that is thrown by the grid when the value of a cell does not pass the validation process.</summary>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor">
            <summary>Initializes a new instance of the GridValidationException class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor">
            <summary>Initializes a new instance of the GridValidationException class.</summary>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the GridValidationException class with a reference to the inner exception that is the cause of this exception.</summary>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not $$NULL$$, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the GridValidationException class specify serialization information and a streaming context.</summary>
            <param name="info">Holds all the data needed to serialize or deserialize an object.</param>
            <param name="context">Describes the source and destination of a given serialized stream, as well as a means for serialization to retain that context and an additional caller-defined context.</param>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor(System.String)">
            <summary>Initializes a new instance of the GridValidationException class with a specified error message.</summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Xceed.Grid.GridValidationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the GridValidationException class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">A message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not $$NULL$$, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:Xceed.Grid.Group">
            <summary>Represents a group in the grid.</summary>
            <remarks>    Any changes made to the grid's grouping using the     GroupByRow results in the recreation of the group templates.     This means that you cannot keep a long term reference on a     specific group in the group templates and that, in code, a     group used as a template should not be accessed using its     component name (gridControl1.GroupTemplates[ 0 ] should be used     rather than group1).     DataRows can be grouped automatically or manually. To do     automatic grouping, the GroupBy property of a group must be set     to the FieldName of the column in the grid by which the     DataRows are to be grouped. To group the data rows manually,     the QueryGroupKeys event can be used. This event can be used in     conjunction with the GroupBy property to provide additional     custom grouping criteria.     Groups by themselves do not have a visual representation.     In order for groups to have a visual representation, they     usually contain at least one row that is not a data row in     their header or footer sections. Typically, a GroupManagerRow     is added to the HeaderRows of a group to create an Outlook     style grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.Group.#ctor">
            <summary>Initializes a new instance of the Group class.</summary>
        </member>
        <member name="M:Xceed.Grid.Group.#ctor">
            <summary>Initializes a new instance of the Group class.</summary>
        </member>
        <member name="M:Xceed.Grid.Group.#ctor(Xceed.Grid.Group)">
            <summary>Initializes a new instance of the Group class specifying the template that will be used to create other groups.</summary>
            <param name="template">A reference to a Group object that will be used to create other groups.</param>
        </member>
        <member name="M:Xceed.Grid.Group.#ctor(Xceed.Grid.GroupMargin)">
            <summary>Initializes a new instance of the Group class specifying its margin.</summary>
            <remarks>    Once a group has been built, its side margin cannot be     changed.</remarks>
            <param name="sideMargin">A reference to a GroupMargin object representing the side margin of the group. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Group.#ctor(System.String)">
            <summary>Initializes a new instance of the Group class specifying its GroupBy value.</summary>
            <remarks>Creating a group using this constructor will automatically add a GroupManagerRow to the group's HeaderRows.</remarks>
            <param name="groupBy">The fieldname of the column in the grid by which the data rows will grouped. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Group.BringIntoView">
            <summary>Brings the group into the visible area of the grid.</summary>
            <remarks>    The group will always be brought into view, no matter its     state or its parent state. For example, if the group is in a     collapsed group, the parent group will be expanded.</remarks>
        </member>
        <member name="M:Xceed.Grid.Group.CalculateKey(Xceed.Grid.DataRow)">
            <summary>Calculates the key of the DataRow to determine if it is to be added to this group.</summary>
            <returns>An object representing the group's key.</returns>
            <remarks>    The QueryGroupKeys event can also be used to provide     custom grouping criteria.</remarks>
            <param name="dataRow">A reference to a DataRow object representing the data row whose k ey is to be calculated.</param>
        </member>
        <member name="M:Xceed.Grid.Group.CreateInstance">
            <summary>Creates a new Group object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created Group object.</returns>
        </member>
        <member name="M:Xceed.Grid.Group.OnGroupByChanged(System.EventArgs)">
            <summary>Raises the GroupByChanged event.</summary>
            <remarks>When overriding OnGroupByChanged in a derived class, be sure to call the base class's OnGroupByChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Group.OnGroupByRowTitleChanged(System.EventArgs)">
            <summary>Raises the GroupByRowTitleChanged event.</summary>
            <remarks>When overriding OnGroupByRowTitleChanged in a derived class, be sure to call the base class's OnGroupByRowTitleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Group.Remove">
            <summary>Removes the group from the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.Group.ResetGroupBy">
            <summary>Resets the value of the GroupBy property to its default value, DefaultGroupBy.</summary>
        </member>
        <member name="M:Xceed.Grid.Group.ResetGroupByRowTitle">
            <summary>Resets the value of the GroupByRowTitle to its default value, DefaultGroupByRowTitle.</summary>
        </member>
        <member name="P:Xceed.Grid.Group.AmbientParent">
            <summary>Gets the ambient parent of the group.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the groups's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.DefaultAccessibleName">
            <summary>Gets the default value of the AccessibleName property.</summary>
            <remarks>    When overriding DefaultAccessibleName in a derived class,     the value returned by your implementation of     DefaultAccessibleName should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.DefaultGroupBy">
            <summary>Gets the default value of the GroupBy property.</summary>
            <remarks>    When overriding DefaultGroupBy in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.DefaultGroupByRowTitle">
            <summary>Gets the default value of the GroupByRowTitle property.</summary>
            <remarks>    When overriding DefaultGroupByRowTitle in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.DefaultTitle">
            <summary>Gets the default value of the Title property.</summary>
            <remarks>    When overriding DefaultTitle in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.GroupBy">
            <summary>Gets or sets the fieldname of the column in the grid by which the data bound rows are grouped.</summary>
            <remarks>    If the GroupBy property is set to Empty, manual grouping     can be provided using the QueryGroupKeys event. The     QueryGroupKeys event can also be used to provide additional     grouping criteria when the GroupBy property is set.     When creating custom groups, the GroupBy property must be     set in order for the groups which are created manually using     the QueryGroupKeys event to be sorted. These groups will be     sorted in the same direction as the columns whose fieldname is     set in the GroupBy property.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.GroupByRowTitle">
            <summary>Gets or sets the string used by the GroupByRow to represent the group.</summary>
            <remarks>    To reset the value of the GroupByRowTitle property to its     default value, DefaultGroupByRowTitle, the ResetGroupByRowTitle     method must be called or the GroupByRowTitle property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.IsCollapseRoot">
            <summary>Gets a boolean value indicating if the group caused the collapsing of all its child groups.</summary>
        </member>
        <member name="P:Xceed.Grid.Group.Key">
            <summary>Gets an object representing the value which caused the group to be created.</summary>
            <remarks>    For example, if the GroupBy property of a group is set to     "ShipCountry", the value of the Value property will contain one     of the values of the "ShipCountry" field for example, "Canada"     or "Japan".</remarks>
        </member>
        <member name="P:Xceed.Grid.Group.ParentGroup">
            <summary>Gets a reference to the parent group of the group.</summary>
        </member>
        <member name="E:Xceed.Grid.Group.GroupByChanged">
            <summary>Raised when the value of the GroupBy property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Group.GroupByRowTitleChanged">
            <summary>Raised when the value of the GroupByRowTitle property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupAddedEventArgs">
            <summary>Provides information on the group added to the grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupAddedEventArgs.#ctor(Xceed.Grid.Group,Xceed.Grid.DataRow)">
            <summary>Provides information on the group added to the grid.</summary>
            <param name="group">A reference to the Group object that has just been added to the grid.</param>
            <param name="dataRow">A reference to the DataRow that caused the new group to be created and added to the grid.</param>
        </member>
        <member name="P:Xceed.Grid.GroupAddedEventArgs.DataRow">
            <summary>Gets the datarow that caused the new group to be created and added to the grid.</summary>
            <remarks>    The datarow is not yet available in the grid and can only     be accessed via GroupAdded event.The values of the     datarow's cells should not be modified during the GroupAdded     event.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupAddedEventArgs.Group">
            <summary>Gets the group that has just been added to the grid.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupBase">
            <summary>Represents a group in a grid.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.Collapse">
            <summary>Collapses the group and all its child groups.</summary>
            <remarks>    Collapsing a group will also collapse all child groups,     however the child groups do not loose their collapsed     state.     If the rows inside the group have the     VisibleWhenCollapsed property set to true then they will not be     collapsed. For example, a GroupManagerRow by default, has its     VisibleWhenCollapsed property set to true.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupBase.Expand">
            <summary>Expands the group and its child groups if applicable.</summary>
            <remarks>    All child groups will be returned to the state they were     in before they were collapsed.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupBase.GetSortedDataRowCount(System.Boolean)">
            <summary>Retrieves a value indicating the number of DataRow objects in the group.</summary>
            <returns>A value indicating the number of data rows in the group.</returns>
            <param name="recursive">true if all the data rows of the group, including the data rows contained in child groups, should be retreived; false if only the group's immediate data rows should be retrieved (can be 0 in this case).</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.GetSortedDataRows(System.Boolean)">
            <summary>Retrieves a collection of sorted data rows.</summary>
            <returns>A reference to a ReadOnlyDataRowList containing a list of sorted data rows.</returns>
            <param name="recursive">true if all the data rows of the group, including the data rows contained in child groups, should be retreived; false if only the group's immediate data rows should be retrieved (can be $$NULL$$ in this case).</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.InputValidatorValidateAndSetErrorParameters(System.Delegate,System.Boolean,System.Boolean,System.Object[],System.Drawing.Icon,System.Int32,System.Windows.Forms.ErrorBlinkStyle)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupBase.OnCellEditorDisplayConditionsChanged(System.EventArgs)">
            <summary>Raises the CellEditorDisplayConditionsChanged event.</summary>
            <remarks>When overriding OnCellEditorDisplayConditionsChanged in a derived class, be sure to call the base class's OnCellEditorDisplayConditionsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.OnCollapsedChanged(System.EventArgs)">
            <summary>Raises the CollapsedChanged event.</summary>
            <remarks>When overriding OnCollapsedChanged in a derived class, be sure to call the base class's OnCollapsedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.OnDataRowsChanged(System.EventArgs)">
            <summary>Raises the DataRowsChanged event.</summary>
            <remarks>When overriding OnDataRowsChanged in a derived class, be sure to call the base class's OnDataRowsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.OnQueryAccessibilityHelp(System.Windows.Forms.QueryAccessibilityHelpEventArgs)">
            <summary>Raises the QueryAccessibilityHelp event.</summary>
            <remarks>When overriding OnQueryAccessibilityHelp in a derived class, be sure to call the base class's OnQueryAccessibilityHelp method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryAccessibilityHelpEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.OnTitleChanged(System.EventArgs)">
            <summary>Raises the TitleChanged event.</summary>
            <remarks>When overriding OnTitleChanged in a derived class, be sure to call the base class's OnTitleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetAccessibleDefaultActionDescription">
            <summary>Resets the value of the AccessibleDefaultActionDescription property to its default value, DefaultAccessibleDefaultActionDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetAccessibleDescription">
            <summary>Resets the value of the AccessibleDescription property to its default value, DefaultAccessibleDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetAccessibleName">
            <summary>Resets the value of the AccessibleName property to its default value, DefaultAccessibleName.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetCellEditorDisplayConditions">
            <summary>Resets the value of the CellEditorDisplayConditions property to its default value, DefaultCellEditorDisplayConditions.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetCollapsed">
            <summary>Resets the value of the Collapsed property to its default value, DefaultCollapsed.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.ResetTitle">
            <summary>Resets the value of the Title property to its default value, DefaultTitle.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupBase.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.AccessibleDefaultActionDescription">
            <summary>Gets or sets the default action description of the element for use by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDefaultActionDescription property     describes the object's primary method of manipulation from the     user's viewpoint. This property should be a verb or a short     verb phrase.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.AccessibleDescription">
            <summary>Gets or sets the description of the element used by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDescription property provides a     textual description about an object's visual appearance. The     description is primarily used to provide greater context for     low-vision or blind users, but can also be used for context     searching or other applications</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.AccessibleName">
            <summary>Gets or sets the name of the element used by accessibility client applications.</summary>
            <remarks>    The AccessibleName property is a label that briefly     describes and identifies the object within its     container.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.AmbientCellEditorDisplayConditions">
            <summary>Gets the ambient value of the grid element's CellEditorDisplayConditions property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own CellEditorDisplayConditions     property is not explicitly set.     If the value of the IsCellEditorDisplayConditionsAmbient     property is true then both the     AmbientCellEditorDisplayConditions and     CellEditorDisplayConditions properties will return the same     value.     If the grid element does not have an ambient parent, then     the value of the DefaultCellEditorDisplayConditions property     will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.AmbientParent">
            <summary>Gets the ambient parent of the group.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the groups's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.CellEditorDisplayConditions">
            <summary>Gets or sets a value representing under what conditions cell editors are displayed.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     When overriding DefaultCellEditorDisplayConditions in a     derived class, IsCellEditorDisplayConditionsAmbient should also     be overridden to return false.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.Collapsed">
            <summary>Gets or sets a boolean value indicating if the group is collapsed.</summary>
            <remarks>    If one of the group's parents is collapsed, then     Collapsed will return true.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultAccessibleDefaultActionDescription">
            <summary>Gets the default value of the AccessibleDefaultActionDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDefaultActionDescription     in a derived class, the value returned by your implementation     of DefaultAccessibleDefaultActionDescription should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultAccessibleDescription">
            <summary>Gets the default value of the AccessibleDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDescription in a derived     class, the value returned by your implementation of     DefaultAccessibleDescription should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultAccessibleName">
            <summary>Gets the default value of the AccessibleName property.</summary>
            <remarks>    When overriding DefaultAccessibleName in a derived class,     the value returned by your implementation of     DefaultAccessibleName should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultCellEditorDisplayConditions">
            <summary>Gets the default value of the CellEditorDisplayConditions property.</summary>
            <remarks>    CellEditorDisplayConditions.Always, MouseOverCell, and     MouseOverRow will only function in the case where     CreateControlMode is set to     CreateControlMode.ClonedInstance.     Setting this property to     CellEditorDisplayConditions.Always will decrease     performance.     When overriding DefaultCellEditorDisplayConditions in a     derived class, IsCellEditorDisplayConditionsAmbient should also     be overridden to return false.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.     When overriding DefaultCellEditorDisplayConditions in a     derived class, IsCellEditorDisplayConditionsAmbient should also     be overridden to return false.     The value returned by your implementation of     DefaultCellEditorDisplayConditions should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultCollapsed">
            <summary>Gets the default value of the Collapsed property.</summary>
            <remarks>    When overriding DefaultCollapsed in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.DefaultTitle">
            <summary>Gets the default value of the Title property.</summary>
            <remarks>When overriding DefaultTitle in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.FooterRows">
            <summary>Gets a list of all the footer rows of the group.</summary>
            <remarks>    The footer rows are the rows found in the footer section     of the group, after the data rows.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.Groups">
            <summary>Gets a list of all the groups contained within the group once it has been built.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.HeaderRows">
            <summary>Gets a list of all the header rows of the group.</summary>
            <remarks>    The header rows are the rows found in the header section     of the group, before the data rows.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.IsCellEditorDisplayConditionsAmbient">
            <summary>Gets a boolean value indicating if the CellEditorDisplayConditions property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.IsCollapseRoot">
            <summary>Gets a boolean value indicating if the group caused the collapsing of all its child groups.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.Level">
            <summary>Gets a value indicating the level of the group within the group hierarchy.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.ParentGrid">
            <summary>Gets the parent grid of the group.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.ParentGroup">
            <summary>Gets a reference to the parent group of the group.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.ReportStyle">
            <summary>Gets the report style of the group.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a GroupReportStyle from being created in the case     where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupBase.SideMargin">
            <summary>Gets the side margin of the group.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupBase.Title">
            <summary>Gets or sets the title of the group.</summary>
            <remarks>    The title of the group is displayed via the Title     property.</remarks>
        </member>
        <member name="E:Xceed.Grid.GroupBase.CellEditorDisplayConditionsChanged">
            <summary>Raised when the value of the CellEditorDisplayConditions property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupBase.CollapsedChanged">
            <summary>Raised when the value of the Collapsed property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupBase.DataRowsChanged">
            <summary>Raised when modifications are made to the content of a cell in a data row and when a data row is added or removed from the group.</summary>
            <remarks>    Modifications made to a DataRow between calls to its     BeginEdit and EndEdit methods, will not cause the     DataRowsChanged events to be raised until the EndEdit or     CancelEdit methods are called.</remarks>
        </member>
        <member name="E:Xceed.Grid.GroupBase.QueryAccessibilityHelp">
            <summary>Raised when an Accessibility client invokes help for that element.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupBase.TitleChanged">
            <summary>Raised when the value of the Title property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupByRow">
            <summary>Specialization of the Row class which represents a row in which ColumnManagerCell objects can be drag and dropped in order to group a grid's data rows.</summary>
            <remarks>    Any changes made to the grid's grouping using the     GroupByRow results in the recreation of the group templates.     This means that you cannot keep a long term reference on a     specific group in the group templates and that, in code, a     group used as a template should not be accessed using its     component name (gridControl1.GroupTemplates[ 0 ] should be used     rather than group1).     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.     Every row that contains cells derives from the CellRow     class. Theses rows will contain a cell for each column in the     grid. Each of these cells will always have the same index, name     and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.#ctor">
            <summary>Initializes a new instance of the GroupByRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.#ctor">
            <summary>Initializes a new instance of the GroupByRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.#ctor(Xceed.Grid.GroupByRow)">
            <summary>Initializes a new instance of the GroupByRow class specifying the template that will be used to create other GroupByRows.</summary>
            <param name="template">A reference to a GroupByRow object that will be used to create other GroupByRows.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the GroupByRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the GroupByRows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.CreateInstance">
            <summary>Creates a new GroupByRow object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.GetCells">
            <summary>Gets the cells in the GroupByRow.</summary>
            <returns>An array of GroupByCell objects that represent the cells in the GroupByRow.</returns>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated. This parameter is not taken into consideration for a GroupByRow; the fitted height of a GroupByRow will vary according to the amount of cells it contains and the CellLayout property.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.InsertGroupCore(Xceed.Grid.DetailGrid,System.Int32,System.String)">
            <summary>Inserts a new Group object into the list of GroupTemplates.</summary>
            <param name="detailGrid">Specifies the DetailGrid in which to insert the group.</param>
            <param name="index">The index at which to insert the new group. If -1, the groups is added to the end of the group templates.</param>
            <param name="fieldname">The FieldName of the column to assign to the new group's GroupBy property.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.MoveGroupCore(Xceed.Grid.DetailGrid,System.Int32,System.Int32)">
            <summary>Changes the position if a group in the list of GroupTemplates.</summary>
            <param name="detailGrid">Specifies the DetailGrid to move the group to.</param>
            <param name="index">The index of the group to move.</param>
            <param name="insertAt">The position to which to move the group.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnAllowGroupingModificationChanged(System.EventArgs)">
            <summary>Raises the AllowGroupingModificationChanged event.</summary>
            <remarks>When overriding OnAllowGroupingModificationChanged in a derived class, be sure to call the base class's OnAllowGroupingModificationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnAllowSortChanged(System.EventArgs)">
            <summary>Raises the AllowSortChanged event.</summary>
            <remarks>When overriding OnAllowSortChanged in a derived class, be sure to call the base class's OnAllowSortChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnCellBackColorChanged(System.EventArgs)">
            <summary>Raises the CellBackColorChanged event.</summary>
            <remarks>When overriding OnCellBackColorChanged in a derived class, be sure to call the base class's OnCellBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnCellFontChanged(System.EventArgs)">
            <summary>Raises the CellFontChanged event.</summary>
            <remarks>When overriding OnCellFontChanged in a derived class, be sure to call the base class's OnCellFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnCellForeColorChanged(System.EventArgs)">
            <summary>Raises the CellForeColorChanged event.</summary>
            <remarks>When overriding OnCellForeColorChanged in a derived class, be sure to call the base class's OnCellForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnCellLayoutChanged(System.EventArgs)">
            <summary>Raises the CellLayoutChanged event.</summary>
            <remarks>When overriding OnCellLayoutChanged in a derived class, be sure to call the base class's OnCellLayoutChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnClick(System.EventArgs)">
            <summary>Raises the Click event.</summary>
            <remarks>When overriding OnClick in a derived class, be sure to call the base class's OnClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnGroupTemplateChanged(System.EventArgs)">
            <summary>Raises the GroupTemplateChanged event.</summary>
            <remarks>When overriding OnGroupTemplateChanged in a derived class, be sure to call the base class's OnGroupTemplateChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.OnNoGroupTextChanged(System.EventArgs)">
            <summary>Raises the NoGroupTextChanged event.</summary>
            <remarks>When overriding OnNoGroupTextChanged in a derived class, be sure to call the base class's OnNoGroupTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the GroupByRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the GroupByRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.RemoveGroupCore(Xceed.Grid.DetailGrid,System.Int32)">
            <summary>Removes a group from the list of GroupTemplates.</summary>
            <param name="detailGrid">Specifies the DetailGrid from which to remove the group.</param>
            <param name="index">The index of the group to remove.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetAllowGroupingModification">
            <summary>Resets the value of the AllowGroupingModification property to its default value, DefaultAllowGroupingModification.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetAllowSort">
            <summary>Resets the value of the AllowSort property to its default value, DefaultAllowSort.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetCellBackColor">
            <summary>Resets the value of the CellBackColor property to its default value, DefaultCellBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetCellFont">
            <summary>Resets the value of the CellFont property to its default value, DefaultCellFont.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetCellForeColor">
            <summary>Resets the value of the CellForeColor property to its default value, DefaultCellForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetCellLayout">
            <summary>Resets the value of the CellLayout property to its default value, DefaultCellLayout.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetGroupTemplate">
            <summary>Resets the value of the GroupTemplate property to its default value, , DefaultGroupTemplate.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetNoGroupText">
            <summary>Resets the value of the NoGroupText property to its default value, DefaultNoGroupText.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.ResetStyle">
            <summary>Resets the values of the properties affected by a GroupByRowStyle to their default values.</summary>
            <remarks>    Only the CellFont, CellForeColor, CellBackColor and     CellLayout properties will be reset to their default     values.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupByRow.SetHeightCore(System.Int32)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.AllowGroupingModification">
            <summary>Gets or sets a boolean value indicating if groups can be added, removed or reordered using the GroupByRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.AllowSort">
            <summary>Gets or sets a boolean value indicating if the columns can sorted.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.Borders">
            <summary>Gets the borders of the GroupByRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.CellBackColor">
            <summary>Gets or sets the background color of the cells in the GroupByRow.</summary>
            <remarks>    To reset the value of the CellBackColor property to its     default value, DefaultCellBackColor, the ResetCellBackColor     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.CellFont">
            <summary>Gets or sets the font of the cells of the GroupByRow.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     To reset the value of the Font property to its default     value, DefaultCellFont, the ResetCellFont method must be called     or the CellFont property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.CellForeColor">
            <summary>Gets or sets the foreground color of the cells in the GroupByRow.</summary>
            <remarks>    To reset the value of the CellForeColor property to its     default value, DefaultCellForeColor, the ResetCellForeColor     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.CellLayout">
            <summary>Gets or sets the layout of the cells in the GroupByRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultAllowGroupingModification">
            <summary>Gets the default value of the AllowGroupingModification property.</summary>
            <remarks>    When overriding DefaultAllowGroupingModification in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultAllowSort">
            <summary>Gets the default value of the AllowSort property.</summary>
            <remarks>    When overriding DefaultAllowSort in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
            <remarks>    When overriding DefaultCanBeCurrent in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCanBeSelected">
            <summary>Gets the default value of the CanBeSelected property.</summary>
            <remarks>    When overriding DefaultCanBeSelected in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCellBackColor">
            <summary>Gets the default value of the CellBackColor property.</summary>
            <remarks>    When overriding DefaultCellBackColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCellFont">
            <summary>Gets the default value of the Font property.</summary>
            <remarks>    When overriding DefaultCellFont in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCellForeColor">
            <summary>Gets the default value of the CellForeColor property.</summary>
            <remarks>    When overriding DefaultCellForeColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultCellLayout">
            <summary>Gets the default value of the CellLayout property.</summary>
            <remarks>    When overriding DefaultCellLayout in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultGroupTemplate">
            <summary>Gets the default value of the GroupTemplate property.</summary>
            <remarks>    When overriding DefaultGroupTemplate in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultIndented">
            <summary>Gets the default value of the Indented Indented.</summary>
            <remarks>    When overriding DefaultIndented in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultMaxHeight">
            <summary>Gets the default value of the MaxHeight property.</summary>
            <remarks>    When overriding DefaultMaxHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultMinHeight">
            <summary>Gets the default value of the MinHeight property.</summary>
            <remarks>    When overriding DefaultMinHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultNoGroupText">
            <summary>Gets the default value of the NoGroupText property.</summary>
            <remarks>    When overriding DefaultNoGroupText in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.DefaultVerticalAlignment">
            <summary>Gets the default value of the VerticalAlignment property.</summary>
            <remarks>    When overriding DefaultVerticalAlignment in a derived     class, IsVerticalAlignmentAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultVerticalAlignment should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.GroupTemplate">
            <summary>Gets or sets a reference to the group that will be used as a template to create the groups created by the GroupByRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.IsReportStyleDefined">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.IsVerticalAlignmentAmbient">
            <summary>Gets a boolean value indicating if the VerticalAlignment property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.NoGroupText">
            <summary>Gets or sets the text displayed by the GroupByRow when the grid does not contain any groups.</summary>
            <remarks>    To reset the value of the NoGroupText property to its     default value, DefaultNoGroupText, the ResetNoGroupText method     must be called or the NoGroupText property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow.ReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.AllowGroupingModificationChanged">
            <summary>Raised when the value of the AllowGroupingModification property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.AllowSortChanged">
            <summary>Raised when the value of the AllowSort property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.CellBackColorChanged">
            <summary>Raised when the value of the CellBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.CellFontChanged">
            <summary>Raised when the value of the CellFont property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.CellForeColorChanged">
            <summary>Raised when the value of the CellForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.CellLayoutChanged">
            <summary>Raised when the value of the CellLayout property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.GroupTemplateChanged">
            <summary>Raised when the value of the GroupTemplate property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRow.NoGroupTextChanged">
            <summary>Raised when the value of the NoGroupText property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupByRow+GroupByCell">
            <summary>Represents the cells displayed by the GroupByRow.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRow+GroupByCell.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current GroupByCell.</summary>
            <returns>true if the specified object is equal to the current GroupByCell; otherwise, false.</returns>
            <param name="obj">The object to compare with the current GroupByCell.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRow+GroupByCell.GetHashCode">
            <summary>Serves as a hash function for the GroupByCell, suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current GroupByCell.</returns>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.DisplayRectangle">
            <summary>Gets the display rectangle of the GroupByCell. The rectangle is in client coordinates and the X and Y coordinates can be negative if the grid is scrolled.</summary>
            <remarks>    The rectangle is in client coordinates and the X and Y     coordinates can be negative if the grid is scrolled. The width     and height of the display rectangle never vary.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.FieldName">
            <summary>Gets the field name of the column represented by this GroupByCell.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.GroupLevel">
            <summary>Gets the level of the group represented by the GroupByCell.</summary>
            <remarks>    When GroupLevel is -1, this GroupByCell represents a Grid     or DetailGrid.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.Index">
            <summary>Gets the index of the GroupByCell in the GroupByCell array.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.RelatedGrid">
            <summary>Get an instance of the DetailGrid represented by the GroupByCell.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRow+GroupByCell.Title">
            <summary>Gets the title of the column represented by the GroupByCell.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupByRowStyle">
            <summary>Represents the style of a GroupByRow.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.#ctor">
            <summary>Initializes a new instance of the GroupByRowStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.#ctor">
            <summary>Initializes a new instance of the GroupByRowStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.#ctor(Xceed.Grid.GroupByRowStyle)">
            <summary>Initializes a new instance of the GroupByRowStyle class specifying a GroupByRowStyle from which to copy property values.</summary>
            <param name="groupByRowStyle">A reference to a GroupByRowStyle object from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.Apply">
            <summary>Applies the style to the specified grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.Apply(Xceed.Grid.GridElement)">
            <summary>Applies the style to the specified grid element.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="element">The GridElement to which to apply the style</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GroupByRowStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.OnCellBackColorChanged(System.EventArgs)">
            <summary>Raises the CellBackColorChanged event.</summary>
            <remarks>When overriding OnCellBackColorChanged in a derived class, be sure to call the base class's OnCellBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.OnCellFontChanged(System.EventArgs)">
            <summary>Raises the CellFontChanged event.</summary>
            <remarks>When overriding OnCellFontChanged in a derived class, be sure to call the base class's OnCellFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.OnCellForeColorChanged(System.EventArgs)">
            <summary>Raises the CellForeColorChanged event.</summary>
            <remarks>When overriding OnCellForeColorChanged in a derived class, be sure to call the base class's OnCellForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.OnCellLayoutChanged(System.EventArgs)">
            <summary>Raises the CellLayoutChanged event.</summary>
            <remarks>When overriding OnCellLayoutChanged in a derived class, be sure to call the base class's OnCellLayoutChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ResetCellBackColor">
            <summary>Resets the value of the CellBackColor property to its default value, DefaultCellBackColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ResetCellFont">
            <summary>Resets the value of the CellFont property to its default value, DefaultCellFont.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ResetCellForeColor">
            <summary>Resets the value of the CellForeColor property to its default value, DefaultCellForeColor.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ResetCellLayout">
            <summary>Resets the value of the CellLayout property to its default value, DefaultCellLayout.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeCellBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeCellFont">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeCellForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeCellLayout">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeXmlCellBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeXmlCellFont">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.GroupByRowStyle.ShouldSerializeXmlCellForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.CellBackColor">
            <summary>Gets or sets the background color of the cells in the GroupByRow.</summary>
            <remarks>    To reset the value of the CellBackColor property to its     default value, DefaultCellBackColor, the ResetCellBackColor     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.CellFont">
            <summary>Gets or sets the font of the cells of the GroupByRow.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     To reset the value of the Font property to its default     value, DefaultCellFont, the ResetCellFont method must be called     or the CellFont property set to $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.CellForeColor">
            <summary>Gets or sets the foreground color of the cells in the GroupByRow.</summary>
            <remarks>    To reset the value of the CellForeColor property to its     default value, DefaultCellForeColor, the ResetCellForeColor     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.CellLayout">
            <summary>Gets or sets the layout of the cells in the GroupByRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.DefaultCellBackColor">
            <summary>Gets the default value of the CellBackColor property.</summary>
            <remarks>    When overriding DefaultCellBackColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.DefaultCellFont">
            <summary>Gets the default value of the CellFont property.</summary>
            <remarks>    When overriding DefaultCellFont in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.DefaultCellForeColor">
            <summary>Gets the default value of the CellForeColor property.</summary>
            <remarks>    When overriding DefaultCellForeColor in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.DefaultCellLayout">
            <summary>Gets the default value of the CellLayout property.</summary>
            <remarks>    When overriding DefaultCellLayout in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.IsCellBackColorDefined">
            <summary>Gets a boolean value indicating if the CellBackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.IsCellFontDefined">
            <summary>Gets a boolean value indicating if the CellFont property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.IsCellForeColorDefined">
            <summary>Gets a boolean value indicating if the CellForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.IsCellLayoutDefined">
            <summary>Gets a boolean value indicating if the CellLayout property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.XmlCellBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.XmlCellFont">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupByRowStyle.XmlCellForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRowStyle.CellBackColorChanged">
            <summary>Raised when the value of the CellBackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRowStyle.CellFontChanged">
            <summary>Raised when the value of the CellFont property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRowStyle.CellForeColorChanged">
            <summary>Raised when the value of the CellForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupByRowStyle.CellLayoutChanged">
            <summary>Raised when the value of the CellLayout property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupManagerRow">
            <summary>Specialization of the Row class which represents a row that is used to manage the groups in the grid.</summary>
            <remarks>    Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.     Every row that contains cells derives from the CellRow     class. Theses rows will contain a cell for each column in the     grid. Each of these cells will always have the same index, name     and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.#ctor">
            <summary>Initializes a new instance of the GroupManagerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.#ctor">
            <summary>Initializes a new instance of the GroupManagerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.#ctor(Xceed.Grid.GroupManagerRow)">
            <summary>Initializes a new instance of the GroupManagerRow class specifying the template that will be used to create other rows.</summary>
            <param name="template">A reference to a GroupManagerRow object that will be used to create other rows.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the GroupManagerRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the row's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.CreateInstance">
            <summary>Creates a new Row object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated. This parameter is not taken into consideration for a GroupManagerRow; the fitted height of a GroupManagerRow is always the height of either one line or the height of the glyph (which ever is bigger).</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.GetVariableText(System.String)">
            <summary>Retrieves the string equivalent of variableName used when dynamically resolving the variables specified in the TitleFormat property.</summary>
            <returns>The string equivalent of variableName.</returns>
            <remarks>             The following variables are supported by default:                                       COLUMNFIELDNAME                 Represents the value of both the                 GroupBy and FieldName properties.                                           GROUPKEY                 Represents the value of the Key                 property.                                           GROUPTITLE                 Represents the value of the Title                 property.                                           DATAROWCOUNT                 Represents the value returned by the                 Boolean) method when its recursive parameter is set                 to true.                                           COLUMNTITLE                 Represents the value of the Title                 property.                                           COUNT                 The result of the Count statistical                 function.                                           MAX                 The result of the Maximum statistical                 function.                                           MIN                 The result of the Minimum statistical                 function.                                           SUM                 The result of the Sum statistical                 function.                                           AVG                 The result of the Average statistical                 function.                                           STDEV                 The result of the Standard Deviation                 statistical function.                                           STDEVP                 The result of the Standard Deviation                 Population statistical function.                                           VAR                 The result of the Variance statistical                 function.                                           VARP                 The result of the Variance Population                 statistical function.                                           MEDIAN                 The result of the Median statistical                 function.                                           MODE                 The result of the Mode statistical                 function.                                           GEOMEAN                 The result of the Geometric Mean                 statistical function.                                           HARMEAN                 The result of the Harmonic Mean                 statistical function.                                           RMS                 The result of the Root Mean Square                 statistical function.                                In the case of the variables that represent statistical     functions (COUNT, MAX, MIN, SUM, AVG, STDEV, STDEVP, VAR, VARP,     MEDIAN, MODE, GEOMEAN, HARMEAN, and RMS), additional parameters     must be provided within the variable after the colon (:). These     parameters are the fieldname of the column from which the data     is retrieved, the (optional) format specifier with which the     result of the statistical function is displayed, and the     (optional) group level for which the statistical function is     calculated.                COUNT                    All items placed in square brackets [] are         optional. If the column_fieldname and/or         format_specifier parameters contain spaces, quotes         must be used. If a running_stat_group_level is not         specified, -1 (current group) is assumed.         When overriding GetVariableText in a derived class,         base.GetVariableText( variableName ); must be called first.         If a string is returned, then the variable was successfully         resolved. If Empty is returned, then the override should be         able to resolve the variable.     </remarks>
            <param name="variableName">The name of the variable to resolve. Does not include the  characters.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Returns a boolean value indicating if the key(s) pressed is an input key for the GroupManagerRow.</summary>
            <returns>true if the key(s) pressed in an input key; false otherwise.</returns>
            <param name="keyData">A Keys value specifying the key code and modifier of the key(s) that was pressed.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.OnClick(System.EventArgs)">
            <summary>Raises the Click event.</summary>
            <remarks>When overriding OnClick in a derived class, be sure to call the base class's OnClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <remarks>When overriding OnDoubleClick in a derived class, be sure to call the base class's OnDoubleClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.OnSiblingDataRowsChanged(System.EventArgs)">
            <summary>Raises the SiblingDataRowsChanged event.</summary>
            <remarks>When overriding OnSiblingDataRowsChanged in a derived class, be sure to call the base class's OnSiblingDataRowsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.OnTitleFormatChanged(System.EventArgs)">
            <summary>Raises the TitleFormatChanged event.</summary>
            <remarks>When overriding OnTitleFormatChanged in a derived class, be sure to call the base class's OnTitleFormatChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.PaintBorders(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the borders of the GroupManagerRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the GroupManagerRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupManagerRow.ResetTitleFormat">
            <summary>Resets the value of the TitleFormat property to its default value, DefaultTitleFormat.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultCanBeSelected">
            <summary>Gets the default value of the CanBeSelected property.</summary>
            <remarks>    When overriding DefaultCanBeSelected in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultIndented">
            <summary>Gets the default value of the Indented property.</summary>
            <remarks>    When overriding DefaultIndented in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultMinHeight">
            <summary>Gets the default value of the MinHeight property.</summary>
            <remarks>    When overriding DefaultMinHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultTitleFormat">
            <summary>Gets the default value of the TitleFormat property.</summary>
            <remarks>    When overriding DefaultTitleFormat in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultTrimming">
            <summary>Gets the default value of the Trimming property.</summary>
            <remarks>    When overriding DefaultTrimming in a derived class,     IsTrimmingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultTrimming should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.DefaultVisibleWhenCollapsed">
            <summary>Gets the default value of the VisibleWhenCollapsed property.</summary>
            <remarks>    When overriding DefaultVisibleWhenCollapsed in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.IsTrimmingAmbient">
            <summary>Gets a boolean value indicating if the Trimming property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.Title">
            <summary>Gets the title displayed by the GroupManagerRow.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.TitleFormat">
            <summary>Gets or sets a variable containing string representing the text displayed by the GroupManagerRow.</summary>
            <remarks>    In the case where the column fieldname specified by the     column_fieldname parameter does not exist,     "#InvalidStatFieldName#" will be displayed rather than the     statistical result, where "InvalidStatFieldName" representings     the string passsed to the column_fieldname     parameter.     To retrieve the resolved text displayed by the     GroupManagerRow, the Title property can be consulted.     To support custom variables, the String) method must be     overridden.     If a / is required in the text, for example to display a     percentage, then // must be used for the text (not for     the variables). Example:               groupManagerRow.TitleFormat = "The group contains /DATAROWCOUNT/ datarows with 2 containing a null value";           To reset the value of the TitleFormat property to its     default value, DefaultTitleFormat, the ResetTitleFormat method     must be called or the TitleFormat property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupManagerRow.VisibleWhenCollapsed">
            <summary>Gets a boolean value indicating if the GroupManagerRow is visible when its parent group is collapsed.</summary>
        </member>
        <member name="E:Xceed.Grid.GroupManagerRow.TitleFormatChanged">
            <summary>Raised when the value of the TitleFormat property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.GroupMargin">
            <summary>Represents the margin of a group.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.#ctor">
            <summary>Initialize a new instance of the GroupMargin class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.#ctor">
            <summary>Initialize a new instance of the GroupMargin class.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.#ctor(Xceed.Grid.GroupMargin,Xceed.Grid.GroupBase)">
            <summary>Initializes a new instance of the GroupMargin class specifying the template that will be used to create other groups.</summary>
            <param name="template">A reference to a GroupMargin object that will be used to create other group margins.</param>
            <param name="parentGroup">A reference to a Group object representing the GroupMargin's parent group.</param>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.BringIntoView">
            <summary>Brings the group margin into the visible area of the grid.</summary>
            <remarks>    The group margin will always be brought into view, no     matter its state or its parent state. For example, if the group     margin is in a collapsed group, the group will be     expanded.</remarks>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.CreateInstance(Xceed.Grid.GroupBase)">
            <summary>Creates a new GroupMargin object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created GroupMargin object.</returns>
            <param name="parentGroup">A reference to a Group object representing the GroupMargin's parent group.</param>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.OnWidthChanged(System.EventArgs)">
            <summary>Raises the WidthChanged event.</summary>
            <remarks>When overriding OnWidthChanged in a derived class, be sure to call the base class's OnWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.ResetReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.ResetWidth">
            <summary>Resets the value of the Width property to its default value, DefaultWidth.</summary>
        </member>
        <member name="M:Xceed.Grid.GroupMargin.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.AmbientParent">
            <summary>Gets the ambient parent of the GroupMargin.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the group margin's     properties are not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the grid element will be displayed. For     example, if a cell contains multi-line text but the height of     the cell only allows for one line of text to be displayed     properly, the second line will not be displayed. If set to     false, and the height of the cell only allows for one line to     be displayed properly, it is possible that part of the second     line will be visible in the cell.     If the IsClipPartialLineAmbient property returns true,     then the value of the ClipPartialLine property is inherited     from its parent.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.DefaultWidth">
            <summary>Gets the default value of the Width property.</summary>
            <remarks>    When overriding DefaultWidth in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.Font">
            <summary>Gets or sets the font of the grid element.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     If the IsFontAmbient property returns true, then the     value of the Font property is inherited from its parent.     To reset the value of the Font property to its default     value, DefaultFont, the ResetFont method must be called or     $$NULL$$ assigned to the Font property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ForeColor">
            <summary>Gets or sets the foreground color of the grid element.</summary>
            <remarks>    If the IsForeColorAmbient property returns true, then the     value of the ForeColor property is inherited from its     parent.     To reset the value of the ForeColor property to its     default value, DefaultForeColor, the ResetForeColor method must     be called or Empty assigned to the ForeColor property.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid element's content.</summary>
            <remarks>    If the IsHorizontalAlignmentAmbient property returns     true, then the value of the HorizontalAlignment property is     inherited from its parent.     To reset the value of the HorizontalAlignment property to     its default value, DefaultHorizontalAlignment, the     ResetHorizontalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.IsReportStyleDefined">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ParentGrid">
            <summary>Gets a reference to the parent grid of the GroupMargin.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ParentGroup">
            <summary>Gets a reference to the parent group of the group margin.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ReadOnly">
            <summary>Gets or sets a boolean value indicating if the content of the grid element can be edited.</summary>
            <remarks>    If the IsReadOnlyAmbient property returns true, then the     value of the ReadOnly property is inherited from its     parent.     To reset the value of the ReadOnly property to its     default value, DefaultReadOnly, the ResetReadOnly method must     be called.     If the ReadOnly property is set to true but the     ReadOnlyDataSource property is false, then the content of the     grid element can not be edited.     Although the ReadOnly property ultimately affects only     cells, it is defined in the GridElement class because of     ambientness.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.ReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    This property is only applied when WordWrap is     true.     If the IsTrimmingAmbient property returns true, then the     value of the Trimming property is inherited from its     parent.     To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid element's content.</summary>
            <remarks>    If the IsVerticalAlignmentAmbient property returns true,     then the value of the VerticalAlignment property is inherited     from its parent.     To reset the value of the VerticalAlignment property to     its default value, DefaultVerticalAlignment, the     ResetVerticalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.Width">
            <summary>Gets or sets the width of the group margin, in pixels.</summary>
            <remarks>    If the width of a margin is changed at run-time, the     margin of all the same level groups is also changed.</remarks>
        </member>
        <member name="P:Xceed.Grid.GroupMargin.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    If the IsWordWrapAmbient property returns true, then the     value of the WordWrap property is inherited from its     parent.     To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="E:Xceed.Grid.GroupMargin.WidthChanged">
            <summary>Raised when the value of the Width property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.InitializingDetailGridEventArgs">
            <summary>Provides information regarding the DetailGrid being initialized.</summary>
        </member>
        <member name="M:Xceed.Grid.InitializingDetailGridEventArgs.#ctor(Xceed.Grid.DetailGrid)">
            <summary>Initializes a new instance of the InitializingDetailGridEventArgs class.</summary>
            <param name="grid">A reference to a DetailGrid object representing the detail grid that is about to be "attached" to a DataRow.</param>
        </member>
        <member name="P:Xceed.Grid.InitializingDetailGridEventArgs.Grid">
            <summary>Gets a reference to a DetailGrid object representing the detail grid that is about to be "attached" to a DataRow.</summary>
        </member>
        <member name="T:Xceed.Grid.InitializingNewDataRowEventArgs">
            <summary>Provides information regarding the DataRow being initialized.</summary>
        </member>
        <member name="M:Xceed.Grid.InitializingNewDataRowEventArgs.#ctor(Xceed.Grid.DataRow)">
            <summary>Provides information regarding the DataRow being initialized.</summary>
            <param name="dataRow">A reference to a DataRow object representing the data row which was created using the AddNew method.</param>
        </member>
        <member name="P:Xceed.Grid.InitializingNewDataRowEventArgs.DataRow">
            <summary>Gets a reference to a DataRow object representing the data row which was created using the AddNew method.</summary>
        </member>
        <member name="T:Xceed.Grid.InsertionCell">
            <summary>Specialization of the Cell class which represents a cell that is used to insert new values into an InsertionRow.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the InsertionCell class specifying its parent column.</summary>
            <param name="parentColumn">A reference to the parent Column of the InsertionCell.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.#ctor(Xceed.Grid.InsertionCell)">
            <summary>Initializes a new instance of the InsertionCell class specifying the InsertionCell that will be used as a template to create other InsertionCells.</summary>
            <param name="template">A reference to a InsertionCell object that will be used as a template to create other InsertionCells.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.#ctor(System.String)">
            <summary>Initializes a new instance of the InsertionCell class specifying its field name.</summary>
            <param name="name">The field name of the cell.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.CreateInstance">
            <summary>Creates a new Cell object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.GetValue">
            <summary>Retrieves the value assigned to the InsertionCell.</summary>
            <returns>The value assigned to the InsertionCell.</returns>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.OnIdleValueChanged(System.EventArgs)">
            <summary>Raises the IdleValueChanged event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.ResetIdleValue">
            <summary>Resets the value of the IdleValue property to its default value, DefaultIdleValue.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.ResetReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionCell.SetValue(System.Object)">
            <summary>Assigns the value to the InsertionCell.</summary>
            <param name="value">A reference to the value being assigned to the InsertionCell.</param>
        </member>
        <member name="P:Xceed.Grid.InsertionCell.DefaultIdleValue">
            <summary>Gets the default value of the IdleValue property.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionCell.IdleValue">
            <summary>Gets or sets the value displayed in an InsertionCell when it is not in edition.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionCell.IsReportStyleDefined">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionCell.ReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.InsertionCell.IdleValueChanged">
            <summary>Raised when the value of the IdleValue property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.InsertionRow">
            <summary>Represents a row that contains a cell for each column in the grid and is used to insert new DataRow objects into a grid.</summary>
            <remarks>    Every row that contains cells will contain a cell for     each column in the grid. Each of these cells will always have     the same index, name and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.</remarks>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.#ctor">
            <summary>Initializes a new instance of the InsertionRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.#ctor">
            <summary>Initializes a new instance of the InsertionRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.#ctor(Xceed.Grid.InsertionRow)">
            <summary>Initializes a new instance of the InsertionRow class specifying the template that will be used to create other rows.</summary>
            <param name="template">A reference to a InsertionRow object that will be used to create other rows.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the InsertionRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a InsertionRow object representing the rows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.BeginEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.CancelEditCore(System.Collections.ArrayList)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the InsertionRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">A reference to the Column object for which to create a cell in the row.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.CreateInstance">
            <summary>Creates a new Row object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.EndEditCore">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.OnRowInserted(Xceed.Grid.RowInsertedEventArgs)">
            <summary>Raises the RowInserted event.</summary>
            <remarks>When overriding OnRowInserted in a derived class, be sure to call the base class's OnRowInserted method so that registered delegates receive the event.</remarks>
            <param name="e">A RowInsertedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.InsertionRow.ResetReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionRow.CellType">
            <summary>Gets the Type of the cells contained in the row.</summary>
            <remarks>typeof( InsertionCell ) is always returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.InsertionRow.EnforceCellDataTypes">
            <summary>Gets a boolean value indicating if the data types of the cells should match the data type of their respective parent columns.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionRow.IsReportStyleDefined">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.InsertionRow.ReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.InsertionRow.RowInserted">
            <summary>Raised when a new DataRow has been inserted into a grid using the InsertionRow.</summary>
            <remarks>    This event can be used to position yourself on the row     immediately after it has been added to the grid.</remarks>
        </member>
        <member name="T:Xceed.Grid.LeavingEditEventArgs">
            <summary>Provides information on the Cell object that has been edited.</summary>
            <remarks>    Custom validation can be provided in the LeavingEdit     event. In this event, if the validation process fails, setting     e.Cancel to true will cause the ValidationError event to be     raised.     Setting e.CancelEdit to false in the ValidationError     event will prevent the cell from leaving edit mode in the case     where the its value fails the validation process.</remarks>
        </member>
        <member name="M:Xceed.Grid.LeavingEditEventArgs.#ctor">
            <summary>Provides information on the Cell object that has been edited.</summary>
        </member>
        <member name="M:Xceed.Grid.LeavingEditEventArgs.#ctor(System.Windows.Forms.Control,System.Object)">
            <summary>Provides information on the Cell object that has been edited.</summary>
            <param name="editorControl">The control that is currently editing the content of the cell.</param>
            <param name="newValue">The new value to assign to the cell.</param>
        </member>
        <member name="M:Xceed.Grid.LeavingEditEventArgs.#ctor(Xceed.Grid.ICellEditor,System.Object)">
            <summary>OBSOLETE: The LeavingEditEventArgs( ICellEditor, object ) constructor is obsolete and has been replaced by the LeavingEditEventArgs( Control, object ) constructor. Provides information on the Cell object that has been edited.</summary>
            <param name="editor">A reference to the ICellEditor object used to edit a cell.</param>
            <param name="newValue">The new value to assign to the cell.</param>
        </member>
        <member name="P:Xceed.Grid.LeavingEditEventArgs.CellEditor">
            <summary>OBSOLETE: The CellEditor property is obsolete and has been replaced by the CellEditorControl property. Gets a reference to the ICellEditor that was used to edit a cell.</summary>
        </member>
        <member name="P:Xceed.Grid.LeavingEditEventArgs.CellEditorControl">
            <summary>Gets the control that is currently editing the content of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.LeavingEditEventArgs.NewValue">
            <summary>Gets or sets the new value assigned to the Value property of the cell.</summary>
            <remarks>             NewValue is the "raw" result of the editor being used and         must be converted or parsed in order to retrieve the actual         value and data type. For example, if a column has an int         data type, NewValue will be the string representation of         that type since, by default, the GridTextBox editor is         being used. To retrieve the actual value (as an int), you         cannot simply cast NewValue as an int! You would need to         use the int.Parse method to retrieve the value as an int.         For example:          int.Parse( ( string )e.NewValue )      </remarks>
        </member>
        <member name="T:Xceed.Grid.Licenser">
            <summary>Class which is used to register Xceed Grid for .NET.</summary>
            <remarks>    We recommend you set the LicenseKey property in the main     entry point of the application. For example, the LicenseKey     property can be set, for C# users, in the static main function.     For VB.NET users, it can be set in the constructor of the main     form or in the "Sub Main" procedure. If no entry point is     available, it is recommended that the LicenseKey property be     set in a static constructor of a class that will be accessed     systematically before any of the library's classes are     instantiated or, you can simply set the LicenseKey property     immediately BEFORE you instantiate a class.</remarks>
        </member>
        <member name="M:Xceed.Grid.Licenser.Unlock">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license this product.</summary>
        </member>
        <member name="T:Xceed.Grid.QueryGroupKeysEventArgs">
            <summary>Provides the information necessary to group the grid's data rows.</summary>
        </member>
        <member name="M:Xceed.Grid.QueryGroupKeysEventArgs.#ctor(Xceed.Grid.DataRow,Xceed.Grid.Collections.GroupKeyList)">
            <summary>Initializes a new instance of the QueryGroupKeysEventArgs class.</summary>
            <param name="dataRow">The data row to group.</param>
            <param name="groupKeys">A list containing the group values.</param>
        </member>
        <member name="P:Xceed.Grid.QueryGroupKeysEventArgs.DataRow">
            <summary>Gets the data row to group.</summary>
        </member>
        <member name="P:Xceed.Grid.QueryGroupKeysEventArgs.GroupKeys">
            <summary>Gets a list containing the group values.</summary>
            <remarks>    This property will contain the same amount of values as     GridControl.GroupTemplates.Count.     For example: let's assume that 2 groups have been added     to the GroupTemplates property. The first group's GroupBy     property has been set to "ShipCountry" and the second group's     GroupBy property has been set to "ShipCity".     When the QueryGroupKeys event is triggered, the contents     of the GroupKeys parameter might be: "Canada" as the first     value (GroupKeys[ 0 ]) and "Montreal" as the second value     (GroupKeys[ 1 ]).</remarks>
        </member>
        <member name="T:Xceed.Grid.QueryPrintPageEventArgs">
            <summary>Provides information on the page that is about to be printed.</summary>
        </member>
        <member name="M:Xceed.Grid.QueryPrintPageEventArgs.#ctor(System.Drawing.Printing.PrintPageEventArgs,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the QueryPrintPageEventArgs class.</summary>
            <param name="printPageEventArgs">The PrintPageEventArgs used by the PrintPage event.</param>
            <param name="currentPrintingPage">The number of the page that is about to be printed.</param>
            <param name="isPageSelected">Indicates if the page is to be printed.</param>
        </member>
        <member name="P:Xceed.Grid.QueryPrintPageEventArgs.CurrentPageNumber">
            <summary>Gets the number of the page that is about to be printed.</summary>
        </member>
        <member name="P:Xceed.Grid.QueryPrintPageEventArgs.IsPageSelected">
            <summary>Gets or sets a boolean value indicating if the page is to be printed.</summary>
        </member>
        <member name="P:Xceed.Grid.QueryPrintPageEventArgs.PrintPageEventArgs">
            <summary>Gets the PrintPageEventArgs used by the PrintPage event.</summary>
        </member>
        <member name="T:Xceed.Grid.Row">
            <summary>Represents any type of row in the grid. The TextRow, CellRow, SpacerRow, and GroupManagerRow class all derive from this class.</summary>
            <remarks>    Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides various cell-less row classes: the TextRow class which     is used to display text, the GroupManagerRow class which is     used to manage groups, the GroupByRow class which represents a     row in which ColumnManagerCell objects can be drag and dropped     in order to group a grid's data rows and the SpacerRow class     which represents a row that is used to provide spacing between     rows and detail grids in the grid. All of these rows derive     directly from the Row class.     Every row that contains cells derives from the CellRow     class. Theses rows will contain a cell for each column in the     grid. Each of these cells will always have the same index, name     and width as its parent column.     There are various specializations of the CellRow class:     the DataRow class which represents a row that is bound to a     data source or user provided data, the ValueRow class which     contains a cell for each column in the grid but is not bound to     a data source, the InsertionRow class which contains a cell for     each column in the grid and is used by the end-user to insert     new DataRow objects into the grid and the ColumnManagerRow     class which represents a row that is used to manage the columns     in the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.Row.BringIntoView">
            <summary>Brings the row into the visible area of the grid.</summary>
            <remarks>    The row will always be brought into view, no matter its     state or its parent state. For example, if the row is in a     collapsed group, the group will be expanded.</remarks>
        </member>
        <member name="M:Xceed.Grid.Row.CreateInstance">
            <summary>Creates a new Row object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.Row.GetDisplayBackColor">
            <summary>OBSOLETE: The GetDisplayBackColor method is obsolete and has been replaced by VisualGridElementState). Retrieves the color that will be used as the row's background color depending on its state</summary>
            <returns>    A Color structure representing the background color of     the row depending on its state. Unless overridden, if the row     is selected and the grid has focus, SelectionBackColor is     returned. If the grid does not have focus,     InactiveSelectionBackColor is returned.     If an error has occured, ErrorBackColor will be returned.     If ErrorBackColor has not been set, BackColor will be     returned.</returns>
        </member>
        <member name="M:Xceed.Grid.Row.GetDisplayForeColor">
            <summary>OBSOLETE: The GetDisplayForeColor method is obsolete and has been replaced by VisualGridElementState). Retrieves the color that will be used as the row's foreground color depending on its state</summary>
            <returns>    A Color structure representing the foreground color of     the row depending on its state. Unless overridden, if the row     is selected and the grid has focus, SelectionForeColor is     returned. If the grid does not have focus,     InactiveSelectionForeColor is returned.     If an error has occured, ErrorForeColor will be returned.     If ErrorForeColor has not been set, ForeColor will be     returned.</returns>
        </member>
        <member name="M:Xceed.Grid.Row.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Row.GetFittedHeight(Xceed.Grid.AutoHeightMode)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>A value containing the fitted height of the row in pixels. Unless overridden, MinHeight.</returns>
            <param name="mode">A value indicating in regards to what factors the fitted height of the row will be calculated.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnAutoHeightModeChanged(System.EventArgs)">
            <summary>Raises the AutoHeightModeChanged event.</summary>
            <remarks>When overriding OnAutoHeightModeChanged in a derived class, be sure to call the base class's OnAutoHeightModeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnCanBeCurrentChanged(System.EventArgs)">
            <summary>Raises the CanBeCurrentChanged event.</summary>
            <remarks>When overriding OnCanBeCurrentChanged in a derived class, be sure to call the base class's OnCanBeCurrentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnCanBeSelectedChanged(System.EventArgs)">
            <summary>Raises the CanBeSelectedChanged event.</summary>
            <remarks>When overriding OnCanBeSelectedChanged in a derived class, be sure to call the base class's OnCanBeSelectedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnHeightChanged(System.EventArgs)">
            <summary>Raises the HeightChanged event.</summary>
            <remarks>When overriding OnHeightChanged in a derived class, be sure to call the base class's OnHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnIndentedChanged(System.EventArgs)">
            <summary>Raises the IndentedChanged event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnIsCurrentChanged(System.EventArgs)">
            <summary>Raises the IsCurrentChanged event.</summary>
            <remarks>When overriding OnIsCurrentChanged in a derived class, be sure to call the base class's OnIsCurrentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnIsSelectedChanged(System.EventArgs)">
            <summary>Raises the IsSelectedChanged event.</summary>
            <remarks>When overriding OnIsSelectedChanged in a derived class, be sure to call the base class's OnIsSelectedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnMaxHeightChanged(System.EventArgs)">
            <summary>Raises the MaxHeightChanged event.</summary>
            <remarks>When overriding OnMaxHeightChanged in a derived class, be sure to call the base class's OnMaxHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnMinHeightChanged(System.EventArgs)">
            <summary>Raises the MinHeightChanged event.</summary>
            <remarks>When overriding OnMinHeightChanged in a derived class, be sure to call the base class's OnMinHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnQueryAccessibilityHelp(System.Windows.Forms.QueryAccessibilityHelpEventArgs)">
            <summary>Raises the QueryAccessibilityHelp event.</summary>
            <remarks>When overriding OnQueryAccessibilityHelp in a derived class, be sure to call the base class's OnQueryAccessibilityHelp method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryAccessibilityHelpEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnShowTreeLineChanged(System.EventArgs)">
            <summary>Raises the ShowTreeLineChanged event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnSiblingDataRowsChanged(System.EventArgs)">
            <summary>Raises the SiblingDataRowsChanged event.</summary>
            <remarks>When overriding OnSiblingDataRowsChanged in a derived class, be sure to call the base class's OnSiblingDataRowsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.OnVisibleWhenCollapsedChanged(System.EventArgs)">
            <summary>Raises the VisibleWhenCollapsedChanged event.</summary>
            <remarks>When overriding OnVisibleWhenCollapsedChanged in a derived class, be sure to call the base class's OnVisibleWhenCollapsedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the row in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.PaintSelectedState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the row in a selected state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Row.Remove">
            <summary>Removes the row from its containing list.</summary>
            <remarks>    If the row is databound, then it will also be removed     from the data source.</remarks>
        </member>
        <member name="M:Xceed.Grid.Row.ResetAccessibleDefaultActionDescription">
            <summary>Resets the value of the AccessibleDefaultActionDescription property to its default value, DefaultAccessibleDefaultActionDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetAccessibleDescription">
            <summary>Resets the value of the AccessibleDescription property to its default value, DefaultAccessibleDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetAccessibleName">
            <summary>Resets the value of the AccessibleName property to its default value, DefaultAccessibleName.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetAutoHeightMode">
            <summary>Resets the value of the AutoHeightMode property to its default value, DefaultAutoHeightMode.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetCanBeCurrent">
            <summary>Resets the value of the CanBeCurrent property to its default value, DefaultCanBeCurrent.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetCanBeSelected">
            <summary>Resets the value of the CanBeSelected property to its default value, DefaultCanBeSelected.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetHeight">
            <summary>Resets the value of the Height property to its default value, DefaultHeight.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetIndented">
            <summary>Resets the value of the Indented property to its default value, DefaultIndented.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetMaxHeight">
            <summary>Resets the value of the MaxHeight property to its default value, DefaultMaxHeight.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetMinHeight">
            <summary>Resets the value of the MinHeight property to its default value, DefaultMinHeight.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetShowTreeLine">
            <summary>Resets the value of the ShowTreeLine property to its default value, DefaultShowTreeLine.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.ResetVisibleWhenCollapsed">
            <summary>Resets the value of the VisibleWhenCollapsed property to its default value, DefaultVisibleWhenCollapsed.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.SetHeightCore(System.Int32)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Row.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.AccessibleDefaultActionDescription">
            <summary>Gets or sets the default action description of the element for use by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDefaultActionDescription property     describes the object's primary method of manipulation from the     user's viewpoint. This property should be a verb or a short     verb phrase.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.AccessibleDescription">
            <summary>Gets or sets the description of the element used by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDescription property provides a     textual description about an object's visual appearance. The     description is primarily used to provide greater context for     low-vision or blind users, but can also be used for context     searching or other applications</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.AccessibleName">
            <summary>Gets or sets the name of the element used by accessibility client applications.</summary>
            <remarks>    The AccessibleName property is a label that briefly     describes and identifies the object within its     container.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.AmbientParent">
            <summary>Gets the ambient parent of the row.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the row's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.AutoHeightMode">
            <summary>Gets or sets a value indicating what the default height of the row will be in the case where the Height property is not explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.Borders">
            <summary>Gets the borders of the Row.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.CanBeCurrent">
            <summary>Gets or sets a boolean value indicating if the row can be the current row.</summary>
            <remarks>    To reset the value of the CanBeCurrent property to its     default value, DefaultCanBeCurrent, the ResetCanBeCurrent     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.CanBeSelected">
            <summary>Gets or sets a boolean value indicating if the row can be selected.</summary>
            <remarks>    To reset the value of the CanBeSelected property to its     default value, DefaultCanBeSelected, the ResetCanBeSelected     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultAccessibleDefaultActionDescription">
            <summary>Gets the default value of the AccessibleDefaultActionDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDefaultActionDescription     in a derived class, the value returned by your implementation     of DefaultAccessibleDefaultActionDescription should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultAccessibleDescription">
            <summary>Gets the default value of the AccessibleDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDescription in a derived     class, the value returned by your implementation of     DefaultAccessibleDescription should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultAccessibleName">
            <summary>Gets the default value of the AccessibleName property.</summary>
            <remarks>    When overriding DefaultAccessibleName in a derived class,     the value returned by your implementation of     DefaultAccessibleName should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultAutoHeightMode">
            <summary>Gets the default value of the AutoHeightMode property.</summary>
            <remarks>    When overriding DefaultAutoHeightMode in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
            <remarks>    When overriding DefaultCanBeCurrent in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultCanBeSelected">
            <summary>Gets the default value of the CanBeSelected property.</summary>
            <remarks>    When overriding DefaultCanBeSelected in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultHeight">
            <summary>Gets the default value of the Height property.</summary>
            <remarks>    When overriding DefaultHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultIndented">
            <summary>Gets the default value of the Indented property.</summary>
            <remarks>    When overriding DefaultIndented in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultMaxHeight">
            <summary>Gets the default value of the MaxHeight property.</summary>
            <remarks>    When overriding DefaultMaxHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultMinHeight">
            <summary>Gets the default value of the MinHeight property.</summary>
            <remarks>    When overriding DefaultMinHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultShowTreeLine">
            <summary>Gets the default value of the ShowTreeLine property.</summary>
            <remarks>    When overriding DefaultShowTreeLine in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.DefaultVisibleWhenCollapsed">
            <summary>Gets the default value of the VisibleWhenCollapsed property.</summary>
            <remarks>    When overriding DefaultVisibleWhenCollapsed in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.Height">
            <summary>Gets or sets the height of the row in pixels.</summary>
            <remarks>    In order for a row to have a fixed height, the MinHeight     and MaxHeight properties must be set to the same value.     To prevent the row from being resized at run-time, the     AllowRowResize property must be set to false.     To reset the value of the Height property to its default     value, DefaultHeight, the ResetHeight method must be     called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.Indented">
            <summary>Gets or sets a boolean value indicating if the row is indented.</summary>
            <remarks>    If true, the row will be drawn outside of the group     margin. If false, the row will be drawn over the group margin.     This means that it will have the same indentation as the     GroupManagerRow.     To reset the value of the Indented property to its     default value, DefaultIndented, the ResetIndented method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.IsCurrent">
            <summary>Gets a boolean value indicating if the row is the current row.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.IsSelected">
            <summary>Gets or sets a boolean value indicating if the row is selected.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.Location">
            <summary>Gets a value representing the location of the row within its ParentGroup.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.MaxHeight">
            <summary>Gets or sets the maximum height of the row in pixels.</summary>
            <remarks>    To reset the value of the MaxHeight property to its     default value, DefaultMaxHeight, the ResetMaxHeight method must     be called.If the value of the MaxHeight property becomes     smaller than the value of the MinHeight property, then     MinHeight will become equal to MaxHeight. If the value of the     Height property becomes larger than MaxHeight, then Height will     become equal to MaxHeight.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.MinHeight">
            <summary>Gets or sets the minimum height of the row in pixels.</summary>
            <remarks>    To reset the value of the MinHeight property to its     default value, DefaultMinHeight, the ResetMinHeight method must     be called.If the value of the MinHeight property becomes     larger than the value of the MaxHeight property, then MaxHeight     will become equal to MinHeight. If the value of the Height     property becomes smaller than MinHeight, then Height will     become equal to MinHeight.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.ParentGrid">
            <summary>Gets a reference to the parent grid of the row.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.ParentGroup">
            <summary>Gets a reference to the parent group of the row.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.ReportStyle">
            <summary>Gets the report style of the row.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.RowSelector">
            <summary>Gets a reference to the row's RowSelector.</summary>
        </member>
        <member name="P:Xceed.Grid.Row.ShowTreeLine">
            <summary>Gets or sets a value indicating whether or not this Row's horizontal treeline is displayed.</summary>
            <remarks>    To reset the value of the ShowTreeLine property to its     default value, DefaultShowTreeLine, the ResetShowTreeLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.Row.VisibleWhenCollapsed">
            <summary>Gets a boolean value indicating if the row is visible when its parent group is collapsed.</summary>
            <remarks>    To reset the value of the VisibleWhenCollapsed property     to its default value, DefaultVisibleWhenCollapsed, the     ResetVisibleWhenCollapsed method must be called.</remarks>
        </member>
        <member name="E:Xceed.Grid.Row.AutoHeightModeChanged">
            <summary>Raised when the value of the AutoHeightMode property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.CanBeCurrentChanged">
            <summary>Raised when the value of the CanBeCurrent property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.CanBeSelectedChanged">
            <summary>Raised when the value of the CanBeSelected property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.HeightChanged">
            <summary>Raised when the value of the Height property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.IndentedChanged">
            <summary>Raised when the value of the Indented property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.IsCurrentChanged">
            <summary>Raised when the value of the IsCurrent property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.IsSelectedChanged">
            <summary>Raised when the value of the IsSelected property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.MaxHeightChanged">
            <summary>Raised when the value of the MaxHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.MinHeightChanged">
            <summary>Raised when the value of the MinHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.QueryAccessibilityHelp">
            <summary>Raised when an Accessibility client invokes help for that element.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.ShowTreeLineChanged">
            <summary>Raised when the value of the ShowTreeLine property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Row.SiblingDataRowsChanged">
            <summary>Raised when modifications are made to the content of a cell in a sibling data row and when a sibling data row is added or removed from the parent group.</summary>
            <remarks>    Modifications made to a sibling DataRow between calls to     its BeginEdit and EndEdit methods, will not cause the     SiblingDataRowsChanged events to be raised until the EndEdit or     CancelEdit methods are called.</remarks>
        </member>
        <member name="E:Xceed.Grid.Row.VisibleWhenCollapsedChanged">
            <summary>Raised when the value of the VisibleWhenCollapsed property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.RowInsertedEventArgs">
            <summary>Provides information on the DataRow that has been inserted into a grid using the InsertionRow.</summary>
        </member>
        <member name="M:Xceed.Grid.RowInsertedEventArgs.#ctor(Xceed.Grid.DataRow)">
            <summary>Initializes a new instance of the RowInsertedEventArgs class.</summary>
            <param name="dataRow">The DataRow that has been inserted.</param>
        </member>
        <member name="P:Xceed.Grid.RowInsertedEventArgs.DataRow">
            <summary>Gets a reference to the DataRow that has been inserted.</summary>
        </member>
        <member name="T:Xceed.Grid.RowSelector">
            <summary>Represents a grid element that is used to select a row.</summary>
            <remarks>    Any value assigned to the BackColor or BackgroundImage     will only be reflected in the RowSelector when the UIStyle     property is set to UIStyle.WindowsClassic.</remarks>
        </member>
        <member name="M:Xceed.Grid.RowSelector.#ctor">
            <summary>Initializes a new instance of the RowSelector class.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.#ctor">
            <summary>Initializes a new instance of the RowSelector class.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.#ctor(Xceed.Grid.RowSelector,Xceed.Grid.Row)">
            <summary>Initializes a new instance of the RowSelector class specifying the template that will be used to create other RowSelectors.</summary>
            <param name="template">A reference to a RowSelector object that will be used to create other RowSelectors.</param>
            <param name="parentRow">A reference to a Row object representing the parent row of the RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.BringIntoView">
            <summary>Brings the RowSelector into the visible area of the grid.</summary>
            <remarks>    The RowSelector will always be brought into view, no     matter its state or its parent state. For example, if the     RowSelectorPane is not visible, it will be made visible.</remarks>
        </member>
        <member name="M:Xceed.Grid.RowSelector.CreateInstance(Xceed.Grid.Row)">
            <summary>Creates a new RowSelector object that is a copy of the current instance.</summary>
            <returns>A reference to newly create RowSelector object.</returns>
            <param name="parentRow">A reference to a Row object representing the parent row of the RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnCurrentImageIndexChanged(System.EventArgs)">
            <summary>Raises the CurrentImageIndexChanged event.</summary>
            <remarks>When overriding OnCurrentImageIndexChanged in a derived class, be sure to call the base class's OnCurrentImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnDefaultImageIndexChanged(System.EventArgs)">
            <summary>Raises the DefaultImageIndexChanged event.</summary>
            <remarks>When overriding OnDefaultImageIndexChanged in a derived class, be sure to call the base class's OnDefaultImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <remarks>When overriding OnDoubleClick in a derived class, be sure to call the base class's OnDoubleClick method so that registered delegates receive the event.</remarks>
            <param name="e">    An that contains the event     data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnEditImageIndexChanged(System.EventArgs)">
            <summary>Raises the EditImageIndexChanged event.</summary>
            <remarks>When overriding OnEditImageIndexChanged in a derived class, be sure to call the base class's OnEditImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnErrorImageIndexChanged(System.EventArgs)">
            <summary>Raises the ErrorImageIndexChanged event.</summary>
            <remarks>When overriding OnErrorImageIndexChanged in a derived class, be sure to call the base class's OnErrorImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnInsertImageIndexChanged(System.EventArgs)">
            <summary>Raises the InsertImageIndexChanged event.</summary>
            <remarks>When overriding OnInsertImageIndexChanged in a derived class, be sure to call the base class's OnInsertImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <remarks>When overriding OnMouseEnter in a derived class, be sure to call the base class's OnMouseEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnQueryAccessibilityHelp(System.Windows.Forms.QueryAccessibilityHelpEventArgs)">
            <summary>Raises the QueryAccessibilityHelp event.</summary>
            <remarks>When overriding OnQueryAccessibilityHelp in a derived class, be sure to call the base class's OnQueryAccessibilityHelp method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryAccessibilityHelpEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.OnSelectedImageIndexChanged(System.EventArgs)">
            <summary>Raises the SelectedImageIndexChanged event.</summary>
            <remarks>When overriding OnSelectedImageIndexChanged in a derived class, be sure to call the base class's OnSelectedImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the RowSelector.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the RowSelector.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the row selector in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetAccessibleDefaultActionDescription">
            <summary>Resets the value of the AccessibleDefaultActionDescription property to its default value, DefaultAccessibleDefaultActionDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetAccessibleDescription">
            <summary>Resets the value of the AccessibleDescription property to its default value, DefaultAccessibleDescription.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetAccessibleName">
            <summary>Resets the value of the AccessibleName property to its default value, DefaultAccessibleName.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetCurrentImageIndex">
            <summary>Resets the value of the CurrentImageIndex property to its default value, DefaultCurrentImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetDefaultImageIndex">
            <summary>Resets the value of the DefaultImageIndex property to its default value, DefaultDefaultImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetEditImageIndex">
            <summary>Resets the value of the EditImageIndex property to its default value, DefaultEditImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetErrorImageIndex">
            <summary>Resets the value of the ErrorImageIndex property to its default value, DefaultErrorImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetHotTracking">
            <summary>Resets the value of the HotTracking property to its default value, DefaultHotTracking.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetInsertImageIndex">
            <summary>Resets the value of the InsertImageIndex property to its default value, DefaultInsertImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.ResetSelectedImageIndex">
            <summary>Resets the value of the SelectedImageIndex property to its default value, DefaultSelectedImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelector.SetVisibleCore(Xceed.Grid.GridElement+AmbientBool)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AccessibleDefaultActionDescription">
            <summary>Gets or sets the default action description of the element for use by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDefaultActionDescription property     describes the object's primary method of manipulation from the     user's viewpoint. This property should be a verb or a short     verb phrase.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AccessibleDescription">
            <summary>Gets or sets the description of the element used by accessibility client applications.</summary>
            <remarks>    An object's AccessibleDescription property provides a     textual description about an object's visual appearance. The     description is primarily used to provide greater context for     low-vision or blind users, but can also be used for context     searching or other applications</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AccessibleName">
            <summary>Gets or sets the name of the element used by accessibility client applications.</summary>
            <remarks>    The AccessibleName property is a label that briefly     describes and identifies the object within its     container.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientBackColor">
            <summary>Gets the ambient value of the row selector's BackColor property.</summary>
            <remarks>    The ambient background color is the background color     inherited from the RowSelector's parent in the case where its     own BackColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientCurrentImageIndex">
            <summary>Gets the ambient value of the row selector's CurrentImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     CurrentImageIndex property is not explicitly set.     If the value of the IsCurrentImageIndexAmbient property     is true then both the AmbientCurrentImageIndex and     CurrentImageIndex properties will return the same value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the     DefaultCurrentImageIndex property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientDefaultImageIndex">
            <summary>Gets the ambient value of the row selector's DefaultImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     DefaultImageIndex property is not explicitly set.     If the value of the IsDefaultImageIndexAmbient property     is true then both the AmbientDefaultImageIndex and     DefaultImageIndex properties will return the same value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the     DefaultDefaultImageIndex property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientEditImageIndex">
            <summary>Gets the ambient value of the row selector's EditImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     EditImageIndex property is not explicitly set.     If the value of the IsEditImageIndexAmbient property is     true then both the AmbientEditImageIndex and EditImageIndex     properties will return the same value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the DefaultEditImageIndex     property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientErrorImageIndex">
            <summary>Gets the ambient value of the row selector's ErrorImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     ErrorImageIndex property is not explicitly set.     If the value of the IsErrorImageIndexAmbient property is     true then both the AmbientErrorImageIndex and ErrorImageIndex     properties will return the same value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the DefaultErrorImageIndex     property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientHotTracking">
            <summary>Gets the ambient value of the grid element's HotTracking property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own HotTracking property is not     explicitly set.     If the value of the IsHotTrackingAmbient property is true     then both the AmbientHotTracking and HotTracking properties     will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientInsertImageIndex">
            <summary>Gets the ambient value of the row selector's InsertImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     InsertImageIndex property is not explicitly set.     If the value of the IsInsertImageIndexAmbient property is     true then both the AmbientInsertImageIndex and InsertImageIndex     properties will return the same value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the     DefaultInsertImageIndex property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientParent">
            <summary>Gets the ambient parent of the RowSelector.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the row selector's     properties are not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.AmbientSelectedImageIndex">
            <summary>Gets the ambient value of the row selector's SelectedImageIndex property.</summary>
            <remarks>    The ambient index is the index inherited from the     RowSelectorPane in the case where the RowSelector's     SelectedImageIndex property is not explicitly set.     If the value of the IsSelectedImageIndexAmbient property     is true then both the AmbientSelectedImageIndex and     SelectedImageIndex properties will return the same     value.     If the RowSelector does not have an ambient parent     (RowSelectorPane), then the value of the     DefaultSelectedImageIndex property will be returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.Borders">
            <summary>Gets the borders of the RowSelector.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the grid element will be displayed. For     example, if a cell contains multi-line text but the height of     the cell only allows for one line of text to be displayed     properly, the second line will not be displayed. If set to     false, and the height of the cell only allows for one line to     be displayed properly, it is possible that part of the second     line will be visible in the cell.     If the IsClipPartialLineAmbient property returns true,     then the value of the ClipPartialLine property is inherited     from its parent.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.CurrentImageIndex">
            <summary>Gets or sets the index of the image to use to represent the current row.</summary>
            <remarks>    If the IsCurrentImageIndexAmbient property returns true,     then the value of the CurrentImageIndex property is inherited     from its parent.     To reset the value of the CurrentImageIndex property to     its default value, DefaultCurrentImageIndex, the     ResetCurrentImageIndex method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultAccessibleDefaultActionDescription">
            <summary>Gets the default value of the AccessibleDefaultActionDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDefaultActionDescription     in a derived class, the value returned by your implementation     of DefaultAccessibleDefaultActionDescription should not     be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultAccessibleDescription">
            <summary>Gets the default value of the AccessibleDescription property.</summary>
            <remarks>    When overriding DefaultAccessibleDescription in a derived     class, the value returned by your implementation of     DefaultAccessibleDescription should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultAccessibleName">
            <summary>Gets the default value of the AccessibleName property.</summary>
            <remarks>    When overriding DefaultAccessibleName in a derived class,     the value returned by your implementation of     DefaultAccessibleName should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultCurrentImageIndex">
            <summary>Gets the default value of the CurrentImageIndex property.</summary>
            <remarks>    When overriding DefaultCurrentImageIndex in a derived     class, IsCurrentImageIndexAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultCurrentImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultDefaultImageIndex">
            <summary>Gets the default value of the DefaultImageIndex property.</summary>
            <remarks>    When overriding DefaultDefaultImageIndex in a derived     class, IsDefaultImageIndexAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultDefaultImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultEditImageIndex">
            <summary>Gets the default value of the EditImageIndex property.</summary>
            <remarks>    When overriding DefaultEditImageIndex in a derived class,     IsEditImageIndexAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultEditImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultErrorImageIndex">
            <summary>Gets the default value of the ErrorImageIndex property.</summary>
            <remarks>    When overriding DefaultErrorImageIndex in a derived     class, IsErrorImageIndexAmbient should also be overridden to     return false.     The value returne by your implementation of     DefaultErrorImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultHotTracking">
            <summary>Gets the default value of the HotTracking property</summary>
            <remarks>    When overriding DefaultHotTracking in a derived class,     IsHotTrackingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultHotTracking should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultImageIndex">
            <summary>Gets or sets the index of the image to use by default.</summary>
            <remarks>    If the IsDefaultImageIndexAmbient property returns true,     then the value of the DefaultImageIndex property is inherited     from its parent.     To reset the value of the DefaultImageIndex property to     its default value, DefaultDefaultImageIndex, the     ResetDefaultImageIndex method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultInsertImageIndex">
            <summary>Gets the default value of the InsertImageIndex property.</summary>
            <remarks>    When overriding DefaultInsertImageIndex in a derived     class, IsInsertImageIndexAmbient should also be overridden to     return false.     The value returned by your implementation of     DefaultInsertImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.DefaultSelectedImageIndex">
            <summary>Gets the default value of the SelectedImageIndex property.</summary>
            <remarks>    When overriding DefaultSelectedImageIndex in a derived     class, IsSelectedImageIndexAmbient should also be overridden to     return false.     The value returne by your implementation of     DefaultSelectedImageIndex should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.EditImageIndex">
            <summary>Gets or sets the index of the image to use to represent the row being edited.</summary>
            <remarks>    If the IsEditImageIndexAmbient property returns true,     then the value of the EditImageIndex property is inherited from     its parent.     To reset the value of the EditImageIndex property to its     default value, DefaultEditImageIndex, the ResetEditImageIndex     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ErrorImageIndex">
            <summary>Gets or sets the index of the image to use to represent the row which contains errors.</summary>
            <remarks>    If the IsErrorImageIndexAmbient property returns true,     then the value of the ErrorImageIndex property is inherited     from its parent.     To reset the value of the ErrorImageIndex property to its     default value, DefaultErrorImageIndex, the ResetErrorImageIndex     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.Font">
            <summary>Gets or sets the font of the grid element.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     If the IsFontAmbient property returns true, then the     value of the Font property is inherited from its parent.     To reset the value of the Font property to its default     value, DefaultFont, the ResetFont method must be called or     $$NULL$$ assigned to the Font property.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ForeColor">
            <summary>Gets or sets the foreground color of the grid element.</summary>
            <remarks>    If the IsForeColorAmbient property returns true, then the     value of the ForeColor property is inherited from its     parent.     To reset the value of the ForeColor property to its     default value, DefaultForeColor, the ResetForeColor method must     be called or Empty assigned to the ForeColor property.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid element's content.</summary>
            <remarks>    If the IsHorizontalAlignmentAmbient property returns     true, then the value of the HorizontalAlignment property is     inherited from its parent.     To reset the value of the HorizontalAlignment property to     its default value, DefaultHorizontalAlignment, the     ResetHorizontalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.HotTracking">
            <summary>Gets or sets a boolean value indicating if hot tracking is enabled for the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ImageList">
            <summary>Gets or sets the list of images that will be used by the RowSelector when needed.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.InsertImageIndex">
            <summary>Gets or sets the index of the image to use to represent the insertion row.</summary>
            <remarks>    If the IsInsertImageIndexAmbient property returns true,     then the value of the InsertImageIndex property is inherited     from its parent.     To reset the value of the InsertImageIndex property to     its default value, DefaultInsertImageIndex, the     ResetInsertImageIndex method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsCurrentImageIndexAmbient">
            <summary>Gets a boolean value indicating if the CurrentImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsDefaultImageIndexAmbient">
            <summary>Gets a boolean value indicating if the DefaultImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsEditImageIndexAmbient">
            <summary>Gets a boolean value indicating if the EditImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsErrorImageIndexAmbient">
            <summary>Gets a boolean value indicating if the ErrorImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsHotTrackingAmbient">
            <summary>Gets a boolean value indicating if the HotTracking property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsInsertImageIndexAmbient">
            <summary>Gets a boolean value indicating if the InsertImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsReportStyleDefined">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.IsSelectedImageIndexAmbient">
            <summary>Gets a boolean value indicating if the SelectedImageIndex property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.MouseState">
            <summary>Value indicating if the mouse events will be handled by the RowSelector.</summary>
            <remarks>This property is typically consulted to determine if the base implementation of the OnMouseXyz methods should be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ParentGrid">
            <summary>Gets the parent grid of the RowSelector.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ReadOnly">
            <summary>Gets or sets a boolean value indicating if the content of the grid element can be edited.</summary>
            <remarks>    If the IsReadOnlyAmbient property returns true, then the     value of the ReadOnly property is inherited from its     parent.     To reset the value of the ReadOnly property to its     default value, DefaultReadOnly, the ResetReadOnly method must     be called.     If the ReadOnly property is set to true but the     ReadOnlyDataSource property is false, then the content of the     grid element can not be edited.     Although the ReadOnly property ultimately affects only     cells, it is defined in the GridElement class because of     ambientness.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.ReportStyle">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.Row">
            <summary>Gets the row associated with the RowSelector.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelector.SelectedImageIndex">
            <summary>Gets or sets the index of the image to use to represent the selected row.</summary>
            <remarks>    If the IsSelectedImageIndexAmbient property returns true,     then the value of the SelectedImageIndex property is inherited     from its parent.     To reset the value of the SelectedImageIndex property to     its default value, DefaultSelectedImageIndex, the     ResetSelectedImageIndex method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    This property is only applied when WordWrap is     true.     If the IsTrimmingAmbient property returns true, then the     value of the Trimming property is inherited from its     parent.     To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid element's content.</summary>
            <remarks>    If the IsVerticalAlignmentAmbient property returns true,     then the value of the VerticalAlignment property is inherited     from its parent.     To reset the value of the VerticalAlignment property to     its default value, DefaultVerticalAlignment, the     ResetVerticalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelector.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    If the IsWordWrapAmbient property returns true, then the     value of the WordWrap property is inherited from its     parent.     To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="E:Xceed.Grid.RowSelector.CurrentImageIndexChanged">
            <summary>Raised when the value of the CurrentImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.DefaultImageIndexChanged">
            <summary>Raised when the value of the DefaultImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.EditImageIndexChanged">
            <summary>Raised when the value of the EditImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.ErrorImageIndexChanged">
            <summary>Raised when the value of the ErrorImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.InsertImageIndexChanged">
            <summary>Raised when the value of the InsertImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.QueryAccessibilityHelp">
            <summary>Raised when an Accessibility client invokes help for that element.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelector.SelectedImageIndexChanged">
            <summary>Raised when the value of the SelectedImageIndex property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.RowSelectorPane">
            <summary>Represents the area of the grid where the RowSelector objects are displayed and exposes properties that control their behavior.</summary>
            <remarks>    It is not possible to access the RowSelectors via the     RowSelectorPane because each RowSelector belongs to its     corresponding row. To access the RowSelectors, the RowSelector     property of a Row must be used.     Any value assigned to the BackColor or BackgroundImage     will only be reflected in the RowSelectorPane when the     GridControl's UIStyle property is set to     UIStyle.WindowsClassic.</remarks>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.#ctor">
            <summary>Initializes a new instance of the RowSelectorPane class.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.#ctor">
            <summary>Initializes a new instance of the RowSelectorPane class.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.#ctor(Xceed.Grid.RowSelectorPane,Xceed.Grid.GroupBase)">
            <summary>Initializes a new instance of the RowSelectorPane class specifying the RowSelectorPane to use as a template as well as its parent group.</summary>
            <param name="template">A reference to a RowSelectorPane object representing the RowSelectorPane to use as a template.</param>
            <param name="parentGroup">A reference to a GroupBase object representing the RowSelectorPane's parent group.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.CreateInstance(Xceed.Grid.GroupBase)">
            <summary>Creates a new GroupMargin object that is a copy of the current instance.</summary>
            <returns>A reference to the newly created GroupMargin object.</returns>
            <param name="parentGroup">A reference to a Group object representing the GroupMargin's parent group.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.GetDefaultImageList">
            <summary>Retrieves the default imagelist used by the RowSelectorPane.</summary>
            <returns>A reference to an ImageList object representing the default imagelist used by the RowSelectorPane.</returns>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnAllowRowResizeChanged(System.EventArgs)">
            <summary>Raises the AllowRowResizeChanged event.</summary>
            <remarks>When overriding OnAllowRowResizeChanged in a derived class, be sure to call the base class's OnAllowRowResizeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnCurrentImageIndexChanged(System.EventArgs)">
            <summary>Raises the CurrentImageIndexChanged event.</summary>
            <remarks>When overriding OnCurrentImageIndexChanged in a derived class, be sure to call the base class's OnCurrentImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnDefaultImageIndexChanged(System.EventArgs)">
            <summary>Raises the DefaultImageIndexChanged event.</summary>
            <remarks>When overriding OnDefaultImageIndexChanged in a derived class, be sure to call the base class's OnDefaultImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnEditImageIndexChanged(System.EventArgs)">
            <summary>Raises the EditImageIndexChanged event.</summary>
            <remarks>When overriding OnEditImageIndexChanged in a derived class, be sure to call the base class's OnEditImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnErrorImageIndexChanged(System.EventArgs)">
            <summary>Raises the ErrorImageIndexChanged event.</summary>
            <remarks>When overriding OnErrorImageIndexChanged in a derived class, be sure to call the base class's OnErrorImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnImageListChanged(System.EventArgs)">
            <summary>Raises the ImageListChanged event.</summary>
            <remarks>When overriding OnImageListChanged in a derived class, be sure to call the base class's OnImageListChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnInsertImageIndexChanged(System.EventArgs)">
            <summary>Raises the InsertImageIndexChanged event.</summary>
            <remarks>When overriding OnInsertImageIndexChanged in a derived class, be sure to call the base class's OnInsertImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.OnSelectedImageIndexChanged(System.EventArgs)">
            <summary>Raises the SelectedImageIndexChanged event.</summary>
            <remarks>When overriding OnSelectedImageIndexChanged in a derived class, be sure to call the base class's OnSelectedImageIndexChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the RowSelectorPane.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the row selector pane in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetAllowRowResize">
            <summary>Resets the value of the AllowRowResize property to its default value, DefaultAllowRowResize.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetCurrentImageIndex">
            <summary>Resets the value of the CurrentImageIndex property to its default value, DefaultCurrentImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetDefaultImageIndex">
            <summary>Resets the value of the DefaultImageIndex property to its default value, DefaultImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetEditImageIndex">
            <summary>Resets the value of the EditImageIndex property to its default value, DefaultEditImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetErrorImageIndex">
            <summary>Resets the value of the ErrorImageIndex property to its default value, DefaultErrorImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetHotTracking">
            <summary>Resets the value of the HotTracking property to its default value, DefaultHotTracking.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetImageList">
            <summary>Resets the value of the ImageList property to its default value, DefaultImageList.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetInsertImageIndex">
            <summary>Resets the value of the InsertImageIndex property to its default value, DefaultInsertImageIndex.</summary>
        </member>
        <member name="M:Xceed.Grid.RowSelectorPane.ResetSelectedImageIndex">
            <summary>Resets the value of the SelectedImageIndex property to its default value, DefaultSelectedImageIndex.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.AllowRowResize">
            <summary>Gets or sets a boolean value indicating if the rows can be resized using the row selectors.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.AmbientHotTracking">
            <summary>Gets the ambient value of the grid element's HotTracking property.</summary>
            <remarks>    The ambient value is inherited from the grid element's     parent in the case where its own HotTracking property is not     explicitly set.     If the value of the IsHotTrackingAmbient property is true     then both the AmbientHotTracking and HotTracking properties     will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.Borders">
            <summary>Gets the borders of the RowSelectorPane.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.CurrentImageIndex">
            <summary>Gets or sets the index of the image to use to represent the current row.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultAllowRowResize">
            <summary>Gets the default value of the AllowRowResize property.</summary>
            <remarks>    When overriding DefaultAllowRowResize in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultBackColor">
            <summary>Gets the default value of the BackColor property.</summary>
            <remarks>    When overriding DefaultBackColor in a derived class,     IsBackColorAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultBackColor should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultCurrentImageIndex">
            <summary>Gets the default value of the CurrentImageIndex property.</summary>
            <remarks>    When overriding DefaultCurrentImageIndex in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultDefaultImageIndex">
            <summary>Gets the default value of the DefaultImageIndex property.</summary>
            <remarks>    When overriding DefaultDefaultImageIndex in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultEditImageIndex">
            <summary>Gets the default value of the EditImageIndex property.</summary>
            <remarks>    When overriding DefaultEditImageIndex in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultErrorImageIndex">
            <summary>Gets the default value of the ErrorImageIndex property.</summary>
            <remarks>    When overriding DefaultErrorImageIndex in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultHotTracking">
            <summary>Gets the default value of the HotTracking property</summary>
            <remarks>    When overriding DefaultHotTracking in a derived class,     IsHotTrackingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultHotTracking should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultImageIndex">
            <summary>Gets or sets the index of the image to use by default.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultImageList">
            <summary>Gets the default value of the ImageList property.</summary>
            <remarks>    When overriding DefaultImageList in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultInsertImageIndex">
            <summary>Gets the default value of the InsertImageIndex property.</summary>
            <remarks>    When overriding DefaultInsertImageIndex in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.DefaultSelectedImageIndex">
            <summary>Gets the default value of the SelectedImageIndex property.</summary>
            <remarks>    When overriding DefaultSelectedImageIndex in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.EditImageIndex">
            <summary>Gets or sets the index of the image to use to represent the row being edited.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.ErrorImageIndex">
            <summary>Gets or sets the index of the image displayed when a Row contains an error.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.HotTracking">
            <summary>Gets or sets a boolean value indicating if hot tracking is enabled for the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.ImageList">
            <summary>Gets or sets the list of images that will be used by each RowSelector when needed.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.InsertImageIndex">
            <summary>Gets or sets the index of the image to use to represent the insertion row.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.IsBackColorAmbient">
            <summary>Gets a boolean value indicating if the BackColor property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.IsHotTrackingAmbient">
            <summary>Gets a boolean value indicating if the HotTracking property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.RowSelectorPane.SelectedImageIndex">
            <summary>Gets or sets the index of the image displayed when a Row is selected.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.AllowRowResizeChanged">
            <summary>Raised when the value of the AllowRowResize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.CurrentImageIndexChanged">
            <summary>Raised when the value of the CurrentImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.DefaultImageIndexChanged">
            <summary>Raised when the value of the DefaultImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.EditImageIndexChanged">
            <summary>Raised when the value of the EditImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.ErrorImageIndexChanged">
            <summary>Raised when the value of the ErrorImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.ImageListChanged">
            <summary>Raised when the value of the ImageList property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.InsertImageIndexChanged">
            <summary>Raised when the value of the InsertImageIndex property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.RowSelectorPane.SelectedImageIndexChanged">
            <summary>Raised when the value of the SelectedImageIndex property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.RowValidationErrorEventArgs">
            <summary>Provides information regarding the row which failed the validation process.</summary>
        </member>
        <member name="M:Xceed.Grid.RowValidationErrorEventArgs.#ctor(System.Exception)">
            <summary>Provides information regarding the row which failed the validation process.</summary>
            <param name="exception">The Exception that was thrown.</param>
        </member>
        <member name="P:Xceed.Grid.RowValidationErrorEventArgs.CancelEdit">
            <summary>Gets or sets a boolean value indicating if the row whould exit edit mode.</summary>
        </member>
        <member name="P:Xceed.Grid.RowValidationErrorEventArgs.Exception">
            <summary>Gets the exception that was thrown.</summary>
        </member>
        <member name="T:Xceed.Grid.SpacerRow">
            <summary>Specialization of the Row class which represents a row that is used to provide spacing between rows and detail grids in the grid.</summary>
            <remarks>    Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.     Every row that contains cells derives from the CellRow     class. Theses rows will contain a cell for each column in the     grid. Each of these cells will always have the same index, name     and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.     The SpacerRow cannot be used to provide spacing     between the grid's DataRows.</remarks>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.#ctor">
            <summary>Initializes a new instance of the SpacerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.#ctor">
            <summary>Initializes a new instance of the SpacerRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the SpacerRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the rows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.#ctor(Xceed.Grid.SpacerRow)">
            <summary>Initializes a new instance of the SpacerRow class specifying the template that will be used to create other SpacerRows.</summary>
            <param name="template">A reference to a SpacerRow object that will be used to create other SpacerRows.</param>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.CreateInstance">
            <summary>Creates a new SpacerRow object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.PaintBorders(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the borders of the SpacerRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SpacerRow.SetHeightCore(System.Int32)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.AmbientParent">
            <summary>Gets the ambient parent of the SpacerRow.</summary>
            <remarks>    An ambient parent is a parent from whom property values     will be inherited in the case where the row's properties are     not explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.Borders">
            <summary>Gets the borders of the SpacerRow.</summary>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.CanBeCurrent">
            <summary>Gets or sets a boolean value indicating if the row can be the current row.</summary>
            <remarks>    To reset the value of the CanBeCurrent property to its     default value, DefaultCanBeCurrent, the ResetCanBeCurrent     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.CanBeSelected">
            <summary>Gets or sets a boolean value indicating if the row can be selected.</summary>
            <remarks>    To reset the value of the CanBeSelected property to its     default value, DefaultCanBeSelected, the ResetCanBeSelected     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed in the grid element will be displayed. For     example, if a cell contains multi-line text but the height of     the cell only allows for one line of text to be displayed     properly, the second line will not be displayed. If set to     false, and the height of the cell only allows for one line to     be displayed properly, it is possible that part of the second     line will be visible in the cell.     If the IsClipPartialLineAmbient property returns true,     then the value of the ClipPartialLine property is inherited     from its parent.     To reset the value of the ClipPartialLine property to its     default value, DefaultClipPartialLine, the ResetClipPartialLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
            <remarks>    When overriding DefaultCanBeCurrent in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.DefaultIndented">
            <summary>Gets the default value of the Indented property.</summary>
            <remarks>    When overriding DefaultIndented in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.DefaultMaxHeight">
            <summary>Gets the default value of the MaxHeight property.</summary>
            <remarks>    When overriding DefaultMaxHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.DefaultMinHeight">
            <summary>Gets the default value of the MinHeight property.</summary>
            <remarks>    When overriding DefaultMinHeight in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.DefaultShowTreeLine">
            <summary>Gets the default value of the ShowTreeLine property.</summary>
            <remarks>    When overriding DefaultShowTreeLine in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.Font">
            <summary>Gets or sets the font of the grid element.</summary>
            <remarks>    Because the Font object is immutable (meaning that you     cannot adjust any of its properties), you can only assign the     Font property a new Font object. However, you can base the new     font on the existing font.     If the IsFontAmbient property returns true, then the     value of the Font property is inherited from its parent.     To reset the value of the Font property to its default     value, DefaultFont, the ResetFont method must be called or     $$NULL$$ assigned to the Font property.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.ForeColor">
            <summary>Gets or sets the foreground color of the grid element.</summary>
            <remarks>    If the IsForeColorAmbient property returns true, then the     value of the ForeColor property is inherited from its     parent.     To reset the value of the ForeColor property to its     default value, DefaultForeColor, the ResetForeColor method must     be called or Empty assigned to the ForeColor property.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment of the grid element's content.</summary>
            <remarks>    If the IsHorizontalAlignmentAmbient property returns     true, then the value of the HorizontalAlignment property is     inherited from its parent.     To reset the value of the HorizontalAlignment property to     its default value, DefaultHorizontalAlignment, the     ResetHorizontalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.Indented">
            <summary>Gets or sets a boolean value indicating if the row is indented.</summary>
            <remarks>    If true, the row will be drawn outside of the group     margin. If false, the row will be drawn over the group margin.     This means that it will have the same indentation as the     GroupManagerRow.     To reset the value of the Indented property to its     default value, DefaultIndented, the ResetIndented method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.ReadOnly">
            <summary>Gets or sets a boolean value indicating if the content of the grid element can be edited.</summary>
            <remarks>    If the IsReadOnlyAmbient property returns true, then the     value of the ReadOnly property is inherited from its     parent.     To reset the value of the ReadOnly property to its     default value, DefaultReadOnly, the ResetReadOnly method must     be called.     If the ReadOnly property is set to true but the     ReadOnlyDataSource property is false, then the content of the     grid element can not be edited.     Although the ReadOnly property ultimately affects only     cells, it is defined in the GridElement class because of     ambientness.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.ShowTreeLine">
            <summary>Gets or sets a value indicating whether or not this Row's horizontal treeline is displayed.</summary>
            <remarks>    To reset the value of the ShowTreeLine property to its     default value, DefaultShowTreeLine, the ResetShowTreeLine     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.Trimming">
            <summary>Gets or sets a value indicating how text displayed in the cell will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    This property is only applied when WordWrap is     true.     If the IsTrimmingAmbient property returns true, then the     value of the Trimming property is inherited from its     parent.     To reset the value of the Trimming property to its     default value, DefaultTrimming, the ResetTrimming method must     be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.VerticalAlignment">
            <summary>Gets or sets the vertical alignment of the grid element's content.</summary>
            <remarks>    If the IsVerticalAlignmentAmbient property returns true,     then the value of the VerticalAlignment property is inherited     from its parent.     To reset the value of the VerticalAlignment property to     its default value, DefaultVerticalAlignment, the     ResetVerticalAlignment method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRow.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped.</summary>
            <remarks>    If the IsWordWrapAmbient property returns true, then the     value of the WordWrap property is inherited from its     parent.     To reset the value of the WordWrap property to its     default value, DefaultWordWrap, the ResetWordWrap method must     be called.</remarks>
        </member>
        <member name="T:Xceed.Grid.SpacerRowSelector">
            <summary>Represents a grid element that is used to select a row.</summary>
        </member>
        <member name="M:Xceed.Grid.SpacerRowSelector.#ctor">
            <summary>Initializes a new instance of the SpacerRowSelector class.</summary>
        </member>
        <member name="M:Xceed.Grid.SpacerRowSelector.#ctor">
            <summary>Initializes a new instance of the SpacerRowSelector class.</summary>
        </member>
        <member name="M:Xceed.Grid.SpacerRowSelector.#ctor(Xceed.Grid.SpacerRowSelector,Xceed.Grid.Row)">
            <summary>Initializes a new instance of the SpacerRowSelector class specifying the template that will be used to create other SpacerRowSelectors.</summary>
            <param name="template">A reference to a SpacerRowSelector object that will be used to create other SpacerRowSelectors.</param>
            <param name="parentRow">A reference to a Row object representing the parent row of the SpacerRowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.SpacerRowSelector.CreateInstance(Xceed.Grid.Row)">
            <summary>Creates a new SpacerRowSelector object that is a copy of the current instance.</summary>
            <returns>A reference to newly created RowSelector object.</returns>
            <param name="parentRow">A reference to a Row object representing the parent row of the SpacerRowSelector.</param>
        </member>
        <member name="P:Xceed.Grid.SpacerRowSelector.DefaultHotTracking">
            <summary>Gets the default value of the HotTracking property.</summary>
            <remarks>    When overriding DefaultHotTracking in a derived class,     IsHotTrackingAmbient should also be overridden to return     false.     The value returned by your implementation of     DefaultHotTracking should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SpacerRowSelector.IsHotTrackingAmbient">
            <summary>Gets a boolean value indicating if the HotTracking property gets its value from its parent.</summary>
        </member>
        <member name="T:Xceed.Grid.StatelessVisualGridElementStyle">
            <summary>Represents the style of a VisualGridElement.</summary>
            <remarks>If a property that modifies the appearance of the style is added to a derived class, the EventArgs) method must be called when the value of the property is modified, otherwise the grid will not be repainted to reflect the changes. This only applies to the DataRowTemplateStyles.</remarks>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.#ctor">
            <summary>Initializes a new instance of the StatelessVisualGridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.#ctor">
            <summary>Initializes a new instance of the StatelessVisualGridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.#ctor(Xceed.Grid.StatelessVisualGridElementStyle)">
            <summary>Initializes a new instance of the StatelessVisualGridElementStyle class specifying a StatelessVisualGridElementStyle from which to copy property values.</summary>
            <param name="statelessVisualGridElementStyle">A reference to a StatelessVisualGridElementStyle from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.Apply">
            <summary>Applies the style to the specified grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.Apply(Xceed.Grid.GridElement)">
            <summary>Applies the style to the specified grid element.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="element">The GridElement to which to apply the style</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.Apply(Xceed.Grid.GridControl)">
            <summary>Applies the style to the specified grid.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="grid">A reference to a GridControl object representing the grid to which to apply the style.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GridElementStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current StatelessVisualGridElementStyle.</summary>
            <returns>true if the specified object is equal to the current StatelessVisualGridElementStyle; otherwise, false.</returns>
            <param name="obj">The object to compare with the current StatelessVisualGridElementStyle.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.GetHashCode">
            <summary>Serves as a hash function for the StatelessVisualGridElementStyle object, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>An integer value representing a hash code for the current StatelessVisualGridElementStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageAlignmentChanged event.</summary>
            <remarks>When overriding OnBackgroundImageAlignmentChanged in a derived class, be sure to call the base class's OnBackgroundImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.OnBackgroundImageChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageChanged event.</summary>
            <remarks>When overriding OnBackgroundImageChanged in a derived class, be sure to call the base class's OnBackgroundImageChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.OnBackgroundImageStyleChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageStyleChanged event.</summary>
            <remarks>When overriding OnBackgroundImageStyleChanged in a derived class, be sure to call the base class's OnBackgroundImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.OnGradientMapChanged(System.EventArgs)">
            <summary>Raises the GradientMapChanged event.</summary>
            <remarks>When overriding OnGradientMapChanged in a derived class, be sure to call the base class's OnGradientMapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ResetBackgroundImage">
            <summary>Resets the value of the BackgroundImage property to its default value, DefaultBackgroundImage.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ResetBackgroundImageAlignment">
            <summary>Resets the value of the BackgroundImageAlignment property to its default value, DefaultBackgroundImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ResetBackgroundImageStyle">
            <summary>Resets the value of the BackgroundImageStyle property to its default value, DefaultBackgroundImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ResetGradientMap">
            <summary>Resets the value of the GradientMap property to its default value, DefaultGradientMap.</summary>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeBackgroundImage">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeBackgroundImageAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeBackgroundImageStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeXmlBackgroundImage">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.StatelessVisualGridElementStyle.ShouldSerializeXmlGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImage">
            <summary>Gets or sets the background image of the grid element.</summary>
            <remarks>    To reset the value of the BackgroundImage property to its     default value, DefaultBackgroundImage, the ResetBackgroundImage     method must be called or the BackgroundImage property set to     $$NULL$$.</remarks>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImageAlignment">
            <summary>Gets or sets the alignment of the grid element's background image.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImageStyle">
            <summary>Gets or sets the style of the grid element's background image.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.DefaultBackgroundImage">
            <summary>Gets the default value of the BackgroundImage property.</summary>
            <remarks>    When overriding DefaultBackgroundImage in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.DefaultBackgroundImageAlignment">
            <summary>Gets the default value of the BackgroundImageAlignment property.</summary>
            <remarks>    When overriding DefaultBackgroundImageAlignment in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.DefaultBackgroundImageStyle">
            <summary>Gets the default value of the BackgroundImageStyle property.</summary>
            <remarks>    When overriding DefaultBackgroundImageStyle in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.DefaultGradientMap">
            <summary>Gets the default GradientMap of the StatelessVisualGridElementStyle.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.GradientMap">
            <summary>Gets or sets the GradientMap of the visual grid element.</summary>
            <remarks>    To reset the value of the GradientMap property to its     default value, DefaultGradientMap, the ResetGradientMap method     must be called.     The GradientMap property cannot be null.</remarks>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.IsBackgroundImageAlignmentDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.IsBackgroundImageDefined">
            <summary>Gets a boolean value indicating if the BackgroundImage property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.IsBackgroundImageStyleDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.IsGradientMapDefined">
            <summary>Gets a boolean value indicating if the GradientMap property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.XmlBackgroundImage">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.StatelessVisualGridElementStyle.XmlGradientMap">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImageAlignmentChanged">
            <summary>Raised when the value of the BackgroundImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImageChanged">
            <summary>Raised when the value of the BackgroundImage property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.StatelessVisualGridElementStyle.BackgroundImageStyleChanged">
            <summary>Raised when the value of the BackgroundImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.StatelessVisualGridElementStyle.GradientMapChanged">
            <summary>Raised when the value of the GradientMap property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.StyleSheet">
            <summary>Represents a style that can be applied to the grid to change its overall appearance.</summary>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Clone">
            <summary>Creates a clone of the StyleSheet.</summary>
            <returns>An object representing the clone of the StyleSheet.</returns>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Load">
            <summary>Loads a XML file to create a StyleSheet object.</summary>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Load(System.String)">
            <summary>Loads a XML file to create a StyleSheet object.</summary>
            <returns>A reference to the StyleSheet object that has been created from the XML file.</returns>
            <param name="fileName">A full path to the XML to load.</param>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Load(System.IO.Stream)">
            <summary>Loads a stream to create a StyleSheet object.</summary>
            <returns>A reference to the StyleSheet object that has been created from the stream.</returns>
            <param name="stream">The stream to use to create a stylesheet.</param>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Save">
            <summary>Saves the stylesheet as a XML file specifying if an existing XML file should be replaced.</summary>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Save(System.String,System.Boolean)">
            <summary>Saves the stylesheet as a XML file specifying if an existing XML file should be replaced.</summary>
            <param name="fileName">The full path of XML file to which the stylesheet will be saved.</param>
            <param name="replaceIfExists">true if an existing file should be replaced; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.StyleSheet.Save(System.IO.Stream)">
            <summary>Saves the stylesheet as a stream.</summary>
            <param name="stream">The stream to which to save the stylesheet.</param>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Army">
            <summary>Gets a reference to the Army stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Classic">
            <summary>Gets a reference to the Classic stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.ColumnManagerRow">
            <summary>Gets or sets the style applied to each ColumnManagerRow found in the grid.</summary>
            <remarks>    If the ColumnManagerRow's style is not explicitly set,     the style of the section in which it is located will be     applied.</remarks>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.DataRows">
            <summary>Gets a list of the styles applied to each data row in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Default">
            <summary>Gets a reference to the default stylesheet.</summary>
            <remarks>    The default stylesheet gives the grid the appearance of     when it is originally dropped on a form.</remarks>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Document">
            <summary>Gets a reference to the Document stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.FixedFooter">
            <summary>Gets or sets the style applied to the rows located in the grid's fixed footer section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.FixedHeader">
            <summary>Gets or sets the style applied to the rows located in the grid's fixed header section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Gradient">
            <summary>Gets a reference to the Gradient stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Grid">
            <summary>Gets or sets the style applied to the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GridFooter">
            <summary>Gets or sets the style applied to the rows located in the grid's footer section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GridHeader">
            <summary>Gets or sets the style applied to the rows located in the grid's header section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Group">
            <summary>Gets or sets the style applied to each Group.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GroupByRow">
            <summary>Gets or sets the style applied to all GroupByRow objects currently in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GroupFooter">
            <summary>Gets or sets the style applied to the rows located in each group's footer section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GroupHeader">
            <summary>Gets or sets the style applied to the rows located in each group's header section.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GroupManagerRow">
            <summary>Gets or sets the style applied to each GroupManagerRow found in the grid.</summary>
            <remarks>    If the GroupManagerRow's style is not explicitly set, the     style of the group in which it is located will be     applied.</remarks>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.GroupMargin">
            <summary>Gets or set the style applied to the group margins.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.InsertionRow">
            <summary>Gets or sets the style applied to all InsertionRow objects currently in the grid.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.InverseGreen">
            <summary>Gets a reference to the InverseGreen stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Office2007Blue">
            <summary>Gets a reference to the Office2007Blue stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Office2007Gray">
            <summary>Gets a reference to the Office2007Gray stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.RowSelectorPane">
            <summary>Gets or sets the style of the RowSelectorPane.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Sunshine">
            <summary>Gets a reference to the Sunshine stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Tan">
            <summary>Gets a reference to the Tan stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Terminal">
            <summary>Gets a reference to the Terminal stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.TheBlues">
            <summary>Gets a reference to the TheBlues stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.TheLargeBlues">
            <summary>Gets a reference to the TheLargeBlues stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.WinForm">
            <summary>Gets a reference to the WinForm stylesheet.</summary>
        </member>
        <member name="P:Xceed.Grid.StyleSheet.Xceed">
            <summary>Gets a reference to the Xceed stylesheet.</summary>
        </member>
        <member name="T:Xceed.Grid.SummaryCell">
            <summary>Specialization of the Cell class which represents a cell that is used to display the result of a statistical function.</summary>
            <remarks>    By default, a cell whose StatFunction property is set to     StatFunction.None (default) will not be visible while a cell     whose StatFunction property is set to a value other than     StatFunction.None will be visible.     Through the TitleFormat property, a string can be     provided that will be used to dynamically create the text     displayed to the left or right of the SummaryCell, according to     the value of the TitlePosition property.              The following example demonstrates how to set the         TitleFormat property using statistical function variables.           summaryCell.TitleFormat = "A minimum of MIN units were ordered at an average price of AVG."             summaryCell.TitleFormat = "A minimum of MIN units were ordered at an average price of AVG.";            Refer to the TitleFormat property for more information on     the supported variables as well as their usage.</remarks>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the SummaryCell class specifying its parent column.</summary>
            <param name="parentColumn">A reference to the parent Column of the SummaryCell.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.#ctor(System.String)">
            <summary>Initializes a new instance of the SummaryCell class specifying its field name.</summary>
            <param name="name">The field name of the cell.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.#ctor(Xceed.Grid.SummaryCell)">
            <summary>Initializes a new instance of the SummaryCell class specifying the template that will be used to create other SummaryCells.</summary>
            <param name="template">A reference to a SummaryCell object that will be used to create other SummaryCells.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.CreateInstance">
            <summary>Creates a new SummaryCell object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.GetValue">
            <summary>Retrieves the value assigned to the cell.</summary>
            <returns>The value assigned to the cell.</returns>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.GetVariableText(System.String)">
            <summary>Retrieves the string equivalent of variableName used when dynamically resolving the variables specified in the TitleFormat property.</summary>
            <returns>The string equivalent of variableName.</returns>
            <remarks>             The following table provides a list of the supported         variables and their definitions.                                       Supported variables                 Descriptions                                           GROUPBYCOLUMNFIELDNAME                 The FieldName of the column as defined                 by the parent group's GroupBy                 property.                                           GROUPBYCOLUMNTITLE                 The Title of the column represented by                 the parent group's GroupBy property.                                           GROUPKEY                 The Key of the parent                 group.                                           GROUPTITLE                 The Title of the parent                 group.                                           DATAROWCOUNT                 The number of datarows in the parent                 group.                                           STATCOLUMNFIELDNAME                 The FieldName of the column as defined                 by the StatFieldName property.                                           STATCOLUMNTITLE                 The Title of the column represented by                 the StatFieldName property.                                           COUNT                 The result of the Count statistical                 function.                                           MAX                 The result of the Maximum statistical                 function.                                           MIN                 The result of the Minimum statistical                 function.                                           SUM                 The result of the Sum statistical                 function.                                           AVG                 The result of the Average statistical                 function.                                           STDEV                 The result of the Standard Deviation                 statistical function.                                           STDEVP                 The result of the Standard Deviation                 Population statistical function.                                           VAR                 The result of the Variance statistical                 function.                                           VARP                 The result of the Variance Population                 statistical function.                                           MEDIAN                 The result of the Median statistical                 function.                                           MODE                 The result of the Mode statistical                 function.                                           GEOMEAN                 The result of the Geometric Mean                 statistical function.                                           HARMEAN                 The result of the Harmonic Mean                 statistical function.                                           RMS                 The result of the Root Mean Square                 statistical function.                                In the case of the variables that represent statistical     functions (COUNT, MAX, MIN, SUM, AVG, STDEV, STDEVP, VAR, VARP,     MEDIAN, MODE, GEOMEAN, HARMEAN, and RMS), additional parameters     must be provided within the variable after the colon (:). These     parameters are the fieldname of the column from which the data     is retrieved, the (optional) format specifier with which the     result of the statistical function is displayed, and the     (optional) group level for which the statistical function is     calculated.                COUNT                    All items placed in square brackets [] are         optional. If the stat_fieldname and/or         format_specifier parameters contain spaces, quotes         must be used. If a running_stat_group_level is not         specified, -1 (current group) is assumed.         When overriding GetVariableText in a derived class,         base.GetVariableText( variableName ); must be called first.         If a string is returned, then the variable was successfully         resolved. If Empty is returned, then the override should be         able to resolve the variable.     </remarks>
            <param name="variableName">The name of the variable to resolve. Does not include the  characters.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnResultDataTypeChanged(System.EventArgs)">
            <summary>Raises the ResultDataTypeChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnRunningStatGroupLevelChanged(System.EventArgs)">
            <summary>Raises the RunningStatGroupLevelChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnStatFieldNameChanged(System.EventArgs)">
            <summary>Raises the StatFieldNameChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnStatFunctionChanged(System.EventArgs)">
            <summary>Raises the StatFunctionChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnTitleFormatChanged(System.EventArgs)">
            <summary>Raises the TitleFormatChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.OnTitlePositionChanged(System.EventArgs)">
            <summary>Raises the TitlePositionChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetReadOnly">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetResultDataType">
            <summary>Resets the value of the ResultDataType property to its default value, DefaultResultDataType.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetRunningStatGroupLevel">
            <summary>Resets the value of the RunningStatGroupLevel property to its default value, DefaultRunningStatGroupLevel.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetStatFieldName">
            <summary>Resets the value of the StatFieldName property to its default value, DefaultStatFieldName.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetStatFunction">
            <summary>Resets the value of the StatFunction property to its default value, DefaultStatFunction.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetTitleFormat">
            <summary>Resets the value of the TitleFormat property to its default value, DefaultTitleFormat.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.ResetTitlePosition">
            <summary>Resets the value of the TitlePosition property to its default value, DefaultTitlePosition.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryCell.SetValue(System.Object)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.AmbientResultDataType">
            <summary>Gets the ambient value of the cell's ResultDataType property.</summary>
            <remarks>    The ambient ResultDataType is the type inherited from the     cell's ParentRow in the case where its own ResultDataType     property is not explicitly set.     If the value of the IsResultDataTypeAmbient property is     true then both the AmbientResultDataType and ResultDataType     properties will return the same value.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.AmbientRunningStatGroupLevel">
            <summary>Gets the ambient value of the cell's RunningStatGroupLevel property.</summary>
            <remarks>    The ambient RunningStatGroupLevel is the value inherited     from the cell's ParentRow in the case where its own     RunningStatGroupLevel property is not explicitly set.     If the value of the IsRunningStatGroupLevelAmbient     property is true then both the AmbientRunningStatGroupLevel and     RunningStatGroupLevel properties will return the same     value.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.Borders">
            <summary>Gets the borders of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultCanBeCurrent">
            <summary>Gets the default value of the CanBeCurrent property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultReadOnly">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultResultDataType">
            <summary>Gets the default value of the ResultDataType property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultRunningStatGroupLevel">
            <summary>Gets the default value of the RunningStatGroupLevel property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultStatFieldName">
            <summary>Gets the default value of the StatFieldName property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultStatFunction">
            <summary>Gets the default value of the StatFunction property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultTitleFormat">
            <summary>Gets the default value of the TitleFormat property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultTitlePosition">
            <summary>Gets the default value of the TitlePosition property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.IsCellViewerManagerAmbient">
            <summary>Gets a boolean value indicating if the CellViewerManager property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.IsReadOnlyAmbient">
            <summary>Gets a boolean value indicating if the ReadOnly property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.IsResultDataTypeAmbient">
            <summary>Gets a boolean value indicating if the ResultDataType property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.IsRunningStatGroupLevelAmbient">
            <summary>Gets a boolean value indicating if the RunningStatGroupLevel property gets its value from its parent.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.ReadOnly">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.ResultDataType">
            <summary>Gets or sets the datatype of the statistical function result.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.RunningStatGroupLevel">
            <summary>Gets or sets a value indicating for what group Level the running statistical function will be calculated.</summary>
            <remarks>    If 0 is specified, the running stat will be calculated     for all the groups in the grid. If 1 is specified, the running     stat will be calculated for all groups of level 1. In     otherwords, all the level 1 groups beneath the parent level 0     group. Keep in mind that the value of the running statistical     function will be the accumulation of the values found before     the current SummaryCell/Row.     If the RunningStatGroupLevel property is assigned a value     that is greater than its parent group's level, the result will     be the same as if the RunningStatGroupLevel property was set to     -1; no running stat.     If a SummaryCell/Row is contained in a detail grid or one     of its child groups, its running stat will be contained within     the scope of the detail grid. This means that a SummaryCell/Row     cannot calculate a running statistical function across multiple     (run-time) detail grids.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.StatFieldName">
            <summary>Gets or sets the fieldname of the column whose values are to be used to calculate the StatFunction.</summary>
            <remarks>    The statistics for a column other than the SummaryCell's     parent column can be calculated and displayed in the cell by     setting the StatFieldName property. The StatFieldName property     indicates for which column the statistics will be     calculated.     In the case where the column fieldname specified by the     StatFieldName property does not exist, "#InvalidStatFieldName#"     will be displayed rather than the statistical result, where     "InvalidStatFieldName" represents the string passsed to the     StatFieldName property.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.StatFunction">
            <summary>Gets or sets the statistical function used by the SummaryCell to calculate its value.</summary>
            <remarks>    The values are rounded in the same manner as the     string.Format round, meaning a banker's round.     The statistics for a column other than the SummaryCell's     parent column can be calculated and displayed in the cell by     setting the StatFieldName property. The StatFieldName property     indicates for which column the statistics will be     calculated.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.Title">
            <summary>Gets the title displayed by the SummaryCell.</summary>
            <remarks>    The properties that affect the appearance of the title     (BackColor, ForeColor, Font, etc ) will be retrieved from the     ParentRow and not from the SummaryCell.     The vertical alignment of the title is determined by the     SummaryCell, while the horizontal alignment is determined by     the value of the TitlePosition property. If the title is     painted to the right of the SummaryCell, then it will be     aligned to the left; if painted to the left, then it will be     aligned to the right.     The TextFormat property allows for a summary to be     displayed across the entire SummaryRow. If the TextFormat     property of a SummaryRow is set and one or more cell's also     have a string assigned to their TitleFormat properties, there     is a chance that the SummaryRow's text and the SummaryCells'     titles will overlap. It is also possible to experience this     behavior anytime a SummaryCell's StatFunction property is     different than StatFunction.None.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.TitleFormat">
            <summary>Gets or sets a string used to dynamically create the SummaryCell's Title.</summary>
            <remarks>    In the case where the column fieldname specified by the     StatFieldName property does not exist, "#InvalidStatFieldName#"     will be displayed rather than the statistical result, where     "InvalidStatFieldName" representings the string passed to the     StatFieldName property.     The TextFormat property allows for a summary to be     displayed across the entire SummaryRow. If the TextFormat     property of a SummaryRow is set and one or more cell's also     have a string assigned to their TitleFormat properties, there     is a chance that the SummaryRow's text and the SummaryCells'     titles will overlap. It is also possible to experience this     behavior anytime a SummaryCell's StatFunction property is     different than StatFunction.None.     If the FormatProvider property has not been explicitly     set, the format provider of the column whose values are used to     calculate the statistical function (StatFieldName) will be     used.     The properties that affect the appearance of the title     (BackColor, ForeColor, Font, etc.) will be retrieved from the     ParentRow and not from the SummaryCell.     The position of the title can be modified by setting the     TitlePosition property.     To retrieve the resolved text displayed by the     SummaryCell, the Title property can be consulted.     To support custom variables, the String) method must be     overridden.     If a / is required in the text, for example to display a     percentage, then // must be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryCell.TitlePosition">
            <summary>Gets or sets the position of the SummaryCell's Title.</summary>
            <remarks>    For example, if the TitlePosition property is set to     PreferablyLeft, an attempt will be made to paint the     SummaryCell's title to the immediate left of the SummaryCell.     If the space to the immediate left of the SummaryCell is     unavailable, then an attempt will be made to the paint the     title to the immediate right of the SummaryCell. If neither     space is available, the title will not be painted.     If 2 titles try to use the same space (one is painted to     the left, while the other is painted to the right), the space     will be divided evenly and the title will be clipped according     to the settings of the SummaryCell.     The TextFormat property allows for a summary to be     displayed across the entire SummaryRow. If the TextFormat     property of a SummaryRow is set and one or more cell's also     have a string assigned to their TitleFormat properties, there     is a chance that the SummaryRow's text and the SummaryCells'     titles will overlap. It is also possible to experience this     behavior anytime a SummaryCell's StatFunction property is     different than StatFunction.None.</remarks>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.ReadOnlyChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.ResultDataTypeChanged">
            <summary>Raised when the value of the ResultDataType property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.RunningStatGroupLevelChanged">
            <summary>Raised when the value of the RunningStatGroupLevel property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.StatFieldNameChanged">
            <summary>Raised when the value of the StatFieldName property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.StatFunctionChanged">
            <summary>Raised when the value of the StatFunction property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.TitleFormatChanged">
            <summary>Raised when the value of the TitleFormat property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryCell.TitlePositionChanged">
            <summary>Raised when the value of the TitlePosition property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.SummaryRow">
            <summary>Specialization of the CellRow class which represents a row used to display the results of statistical functions.</summary>
            <remarks>    Through the TextFormat property, a string can be provided     that will be used to dynamically create the text displayed in     the SummaryRow.              The following example demonstrates how to set the         TextFormat property using statistical function variables.           summaryRow.TextFormat = "A minimum of MIN units were ordered at an average price of AVG."             summaryRow.TextFormat = "A minimum of MIN units were ordered at an average price of AVG.";            Refer to the TextFormat property for more information on     the supported variables as well as their usage.</remarks>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.#ctor">
            <summary>Initializes a new instance of the SummaryRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.#ctor">
            <summary>Initializes a new instance of the SummaryRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the SummaryRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the rows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.#ctor(Xceed.Grid.SummaryRow)">
            <summary>Initializes a new instance of the SummaryRow class specifying the template that will be used to create other rows.</summary>
            <param name="template">A reference to a SummaryRow object that will be used to create other rows.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the SummaryRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">A reference to the Column object for which to create a cell in the row.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.CreateInstance">
            <summary>Creates a new SummaryRow object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.GetVariableText(System.String)">
            <summary>Retrieves the string equivalent of variableName used when dynamically resolving the variables specified in the TextFormat property.</summary>
            <returns>The string equivalent of variableName.</returns>
            <remarks>             The following table provides a list of the supported         variables and their definitions.                                       Supported variables                 Descriptions                                           GROUPBYCOLUMNFIELDNAME                 The FieldName of the column as defined                 by the parent group's GroupBy                 property.                                           GROUPBYCOLUMNTITLE                 The Title of the column represented by                 the parent group's GroupBy property.                                           GROUPKEY                 The Key of the parent                 group.                                           GROUPTITLE                 The Title of the parent                 group.                                           DATAROWCOUNT                 The number of datarows in the parent                 group.                                           COUNT                 The result of the Count statistical                 function.                                           MAX                 The result of the Maximum statistical                 function.                                           MIN                 The result of the Minimum statistical                 function.                                           SUM                 The result of the Sum statistical                 function.                                           AVG                 The result of the Average statistical                 function.                                           STDEV                 The result of the Standard Deviation                 statistical function.                                           STDEVP                 The result of the Standard Deviation                 Population statistical function.                                           VAR                 The result of the Variance statistical                 function.                                           VARP                 The result of the Variance Population                 statistical function.                                           MEDIAN                 The result of the Median statistical                 function.                                           MODE                 The result of the Mode statistical                 function.                                           GEOMEAN                 The result of the Geometric Mean                 statistical function.                                           HARMEAN                 The result of the Harmonic Mean                 statistical function.                                           RMS                 The result of the Root Mean Square                 statistical function.                                In the case of the variables that represent statistical     functions (COUNT, MAX, MIN, SUM, AVG, STDEV, STDEVP, VAR, VARP,     MEDIAN, MODE, GEOMEAN, HARMEAN, and RMS), additional parameters     must be provided within the variable after the colon (:). These     parameters are the fieldname of the column from which the data     is retrieved, the (optional) format specifier with which the     result of the statistical function is displayed, and the     (optional) group level for which the statistical function is     calculated.                COUNT                    All items placed in square brackets [] are         optional. If the column_fieldname and/or         format_specifier parameters contain spaces, quotes         must be used. If a running_stat_group_level is not         specified, -1 (current group) is assumed.         When overriding GetVariableText in a derived class,         base.GetVariableText( variableName ); must be called first.         If a string is returned, then the variable was successfully         resolved. If Empty is returned, then the override should be         able to resolve the variable.     </remarks>
            <param name="variableName">The name of the variable to resolve. Does not include the  characters.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.OnFormatProviderChanged(System.EventArgs)">
            <summary>Raises the FormatProviderChanged event.</summary>
            <remarks>When overriding OnFormatProviderChanged in a derived class, be sure to call the base class's OnFormatProviderChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.OnRunningStatGroupLevelChanged(System.EventArgs)">
            <summary>Raises the RunningStatGroupLevelChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.OnSiblingDataRowsChanged(System.EventArgs)">
            <summary>Raises the SiblingDataRowsChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.OnTextFormatChanged(System.EventArgs)">
            <summary>Raises the TextFormatChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the SummaryRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the row will not print     correctly.     When painting, the point conversion methods such as     Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.ResetFormatProvider">
            <summary>Resets the value of the FormatProvider property to its default value, DefaultFormatProvider.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.ResetRunningStatGroupLevel">
            <summary>Resets the value of the RunningStatGroupLevel property to its default value, DefaultRunningStatGroupLevel.</summary>
        </member>
        <member name="M:Xceed.Grid.SummaryRow.ResetTextFormat">
            <summary>Resets the value of the TextFormat property to its default value, DefaultTextFormat .</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.CellType">
            <summary>Gets the Type of the cells contained in the row.</summary>
            <remarks>typeof( SummaryCell ) is always returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.DefaultFormatProvider">
            <summary>Gets the default value of the FormatProvider property.</summary>
            <remarks>    The value returned by your implementation of     DefaultFormatProvider should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.DefaultRunningStatGroupLevel">
            <summary>Gets the default value of the RunningStatGroupLevel property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.DefaultTextFormat">
            <summary>Gets the default value of the TextFormat property.</summary>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.FormatProvider">
            <summary>Gets or sets the custom Format Provider that will be used to format the variables contained in the TextFormat and TitleFormat properties.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the "Format     Specifiers and Format Providers" topic of the .NET     Framework.     If the FormatProvider property has not been explicitly     set, the format provider of the column whose values are used to     calculate the statistical function (StatFieldName) will be     used.     To reset the value of the FormatProvider property to its     default value, DefaultFormatProvider, the ResetFormatProvider     method must be called.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.ReportStyle">
            <summary>Gets the report style of the summary row.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a SummaryRowReportStyle from being created in the     case where none of the properties of the ReportStyle have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.RunningStatGroupLevel">
            <summary>Gets or sets a value indicating for what group Level the running statistical function will be calculated.</summary>
            <remarks>    If 0 is specified, the running stat will be calculated     for all the groups in the grid. If 1 is specified, the running     stat will be calculated for all groups of level 1. In     otherwords, all the level 1 groups beneath the parent level 0     group. Keep in mind that the value of the running statistical     function will be the accumulation of the values found before     the current SummaryCell/Row.     If the RunningStatGroupLevel property is assigned a value     that is greater than its parent group's level, the result will     be the same as if the RunningStatGroupLevel property was set to     -1; no running stat.     If a SummaryCell/Row is contained in a detail grid or one     of its child groups, its running stat will be contained within     the scope of the detail grid. This means that a SummaryCell/Row     cannot calculate a running statistical function across multiple     (run-time) detail grids.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.Text">
            <summary>Gets the text displayed by the SummaryRow.</summary>
            <remarks>    The TextFormat property allows for a summary to be     displayed across the entire SummaryRow. If the TextFormat     property of a SummaryRow is set and one or more cell's also     have a string assigned to their TitleFormat properties, there     is a chance that the SummaryRow's text and the SummaryCells'     titles will overlap. It is also possible to experience this     behavior anytime a SummaryCell's StatFunction property is     different than StatFunction.None.</remarks>
        </member>
        <member name="P:Xceed.Grid.SummaryRow.TextFormat">
            <summary>Gets or sets a string used to dynamically create the SummaryRow's Text.</summary>
            <remarks>    In the case where the column fieldname specified by the     column_fieldname parameter does not exist,     "#InvalidStatFieldName#" will be displayed rather than the     statistical result, where "InvalidStatFieldName" represents the     string passed to the column_fieldname parameter.     The TextFormat property allows for a summary to be     displayed across the entire SummaryRow. If the TextFormat     property of a SummaryRow is set and one or more cell's also     have a string assigned to their TitleFormat properties, there     is a chance that the SummaryRow's text and the SummaryCells'     titles will overlap. It is also possible to experience this     behavior anytime a SummaryCell's StatFunction property is     different than StatFunction.None.     If the FormatProvider property has not been explicitly     set, the format provider of the column whose values are used to     calculate the statistical function (StatFieldName) will be     used.     To retrieve the resolved text displayed by the     SummaryRow, the Text property can be consulted.     To support custom variables, the String) method must be     overridden.     If a / is required in the text, for example to display a     percentage, then // must be used.</remarks>
        </member>
        <member name="E:Xceed.Grid.SummaryRow.FormatProviderChanged">
            <summary>Raised when the value of the FormatProvider property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryRow.RunningStatGroupLevelChanged">
            <summary>Raised when the value of the RunningStatGroupLevel property is changed</summary>
        </member>
        <member name="E:Xceed.Grid.SummaryRow.TextFormatChanged">
            <summary>Raised when the value of the TextFormat property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.TextRow">
            <summary>Specialization of the Row class which represents a row that contains only text.</summary>
            <remarks>    Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.     Every row that contains cells derives from the CellRow     class. Theses rows will contain a cell for each column in the     grid. Each of these cells will always have the same index, name     and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.TextRow.#ctor">
            <summary>Initializes a new instance of the TextRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.TextRow.#ctor">
            <summary>Initializes a new instance of the TextRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.TextRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the TextRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the rows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.#ctor(System.String)">
            <summary>Initializes a new instance of the TextRow class using the specified string as its text.</summary>
            <param name="text">The text of the TextRow.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.#ctor(Xceed.Grid.TextRow)">
            <summary>Initializes a new instance of the TextRow class specifying the template that will be used to create other text rows.</summary>
            <param name="template">A reference to a TextRow object that will be used to create other text rows.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.CreateInstance">
            <summary>Creates a new TextRow object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="M:Xceed.Grid.TextRow.GetFittedDisplayHeight(Xceed.Grid.AutoHeightMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves the fitted height of the row in pixels.</summary>
            <returns>The fitted height of the row in pixels.</returns>
            <remarks>    The fitted height of the row is calculated in regards to     the current width of the columns, taking into consideration the     WordWrap property.     If the WordWrap property is set to true, then the fitted     height of the row will represent the height needed to display     all data in the row appropriately. If the WordWrap     property is set to false, then the fitted height of the row     will represent the height needed to display only one     line of data in the row.</remarks>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the row will be calculated. This parameter is not taken into consideration for a TextRow; the fitted height of a TextRow is always the height of one line of text.</param>
            <param name="graphics">The Graphics object used to paint the row.</param>
            <param name="printing">true if the row is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.OnTextChanged(System.EventArgs)">
            <summary>Raises the TextChanged event.</summary>
            <remarks>When overriding OnTextChanged in a derived class, be sure to call the base class's OnTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the TextRow.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.TextRow.ResetText">
            <summary>Resets the value of the Text property to its default value, DefaultText.</summary>
        </member>
        <member name="P:Xceed.Grid.TextRow.DefaultText">
            <summary>Gets the default value of the Text property.</summary>
            <remarks>    When overriding DefaultText in a derived class, the value     returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.TextRow.Text">
            <summary>Gets or sets the text of the TextRow.</summary>
            <remarks>    To reset the value of the Text property to its default     value, DefaultText, the ResetText method must be called or the     Text property set to $$NULL$$.</remarks>
        </member>
        <member name="E:Xceed.Grid.TextRow.TextChanged">
            <summary>Raised when the value of the Text property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.ValueCell">
            <summary>Specialization of the Cell class which represents a cell that contains non-databound data.</summary>
            <remarks>    A ValueCell can be contained within either a bound or     unbound column. In either case, unlike the DataCell, the     datatype of its content is not dependant on its parent column's     datatype.</remarks>
        </member>
        <member name="M:Xceed.Grid.ValueCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueCell.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueCell.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the ValueCell class specifying its parent column.</summary>
            <param name="parentColumn">A reference to the parent Column of the ValueCell.</param>
        </member>
        <member name="M:Xceed.Grid.ValueCell.#ctor(System.String)">
            <summary>Initializes a new instance of the ValueCell class specifying its field name.</summary>
            <param name="name">The field name of the cell.</param>
        </member>
        <member name="M:Xceed.Grid.ValueCell.#ctor(Xceed.Grid.ValueCell)">
            <summary>Initializes a new instance of the ValueCell class specifying the template that will be used to create other ValueCells.</summary>
            <param name="template">A reference to a ValueCell object that will be used to create other ValueCells.</param>
        </member>
        <member name="M:Xceed.Grid.ValueCell.CreateInstance">
            <summary>Creates a new ValueCell object that is a copy of the current instance.</summary>
            <returns>A reference to the newly create Cell object.</returns>
        </member>
        <member name="M:Xceed.Grid.ValueCell.GetValue">
            <summary>Retrieves the value assigned to the ValueCell.</summary>
            <returns>The value assigned to the ValueCell.</returns>
        </member>
        <member name="M:Xceed.Grid.ValueCell.Initialize(System.String)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueCell.SetValue(System.Object)">
            <summary>Assigns the value to the ValueCell.</summary>
            <param name="value">A reference to the value being assigned to the ValueCell.</param>
        </member>
        <member name="T:Xceed.Grid.ValueChangingEventArgs">
            <summary>Provides information on the cell whose value is about to change.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueChangingEventArgs.#ctor(System.Object)">
            <summary>Provides information in the cell whose value is being changed.</summary>
            <param name="newValue">The new value to assign to the cell.</param>
        </member>
        <member name="P:Xceed.Grid.ValueChangingEventArgs.NewValue">
            <summary>Gets or sets the new value that is to be assigned to the cell.</summary>
        </member>
        <member name="T:Xceed.Grid.ValueRow">
            <summary>Represents a row that contains a cell for each column in the grid but is not bound to a data source.</summary>
            <remarks>    Every row that contains cells will contain a cell for     each column in the grid. Each of these cells will always have     the same index, name and width as its parent column.     There are 4 specializations of the CellRow class: the     DataRow class which represents a row that is bound to a data     source or user provided data, the ValueRow class which contains     a cell for each column in the grid but is not bound to a data     source, the InsertionRow class which contains a cell for each     column in the grid and is used by the end-user to insert new     DataRow objects into the grid and the ColumnManagerRow class     which represents a row that is used to manage the columns in     the grid.     Rows that do not contain cells can be used to display     labels or manage other rows in the grid. Xceed Grid for .NET     provides 4 cell-less row classes: the TextRow class which is     used to display text, the GroupManagerRow class which is used     to manage groups, the GroupByRow class which represents a row     in which ColumnManagerCell objects can be drag and dropped in     order to group a grid's data rows and the SpacerRow class which     represents a row that is used to provide spacing between rows     and detail grids in the grid. All of these rows derive directly     from the Row class.</remarks>
        </member>
        <member name="M:Xceed.Grid.ValueRow.#ctor">
            <summary>Initializes a new instance of the ValueRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueRow.#ctor">
            <summary>Initializes a new instance of the ValueRow class.</summary>
        </member>
        <member name="M:Xceed.Grid.ValueRow.#ctor(Xceed.Grid.RowSelector)">
            <summary>Initializes a new instance of the ValueRow class specifying its RowSelector.</summary>
            <param name="rowSelector">A reference to a RowSelector object representing the rows's RowSelector.</param>
        </member>
        <member name="M:Xceed.Grid.ValueRow.#ctor(Xceed.Grid.ValueRow)">
            <summary>Initializes a new instance of the ValueRow class specifying the template that will be used to create other rows.</summary>
            <param name="template">A reference to a ValueRow object that will be used to create other rows.</param>
        </member>
        <member name="M:Xceed.Grid.ValueRow.CreateCell(Xceed.Grid.Column)">
            <summary>Creates a new Cell object in the ValueRow for the specified column.</summary>
            <returns>A reference to the newly created Cell object.</returns>
            <param name="parentColumn">A reference to the Column object for which to create a cell in the row.</param>
        </member>
        <member name="M:Xceed.Grid.ValueRow.CreateInstance">
            <summary>Creates a new ValueRow object that is a copy of the current instance.</summary>
            <returns>A reference to newly create Row object.</returns>
        </member>
        <member name="P:Xceed.Grid.ValueRow.CellType">
            <summary>Gets the Type of the cells contained in the row.</summary>
            <remarks>typeof( ValueCell ) is always returned.</remarks>
        </member>
        <member name="T:Xceed.Grid.VisualGridElement">
            <summary>Represents any visual element in the grid and exposes properties and methods that allow their manipulations. The Column and Group classes do not have a visual representation therefore, they derive directly from the GridElement class.</summary>
            <remarks>    When setting properties that modify the contents of a     grid element, for example the Font or ForeColor properties, it     is important to remember that if the grid element is a cell,     then only the cell will be modified. If the grid element is a     row or column, then all the cells in the row or column will be     modified.</remarks>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.CalculateStringFormat(System.Drawing.StringFormat)">
            <summary>Calculates the string format to apply to visual grid element.</summary>
            <returns>The calculated string format.</returns>
            <param name="stringFormat">The pre-calculated string format calculated according the visual grid element's properties.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ClientPointToGrid(System.Drawing.Point)">
            <summary>Computes the location of the specified client point into grid coordinates.</summary>
            <returns>A Point that represents the converted point in grid coordinates.</returns>
            <param name="point">The client coordinate Point to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ClientRectangleToGrid(System.Drawing.Rectangle)">
            <summary>Computes the size and location of the specified client rectangle in grid coordinates</summary>
            <returns>A Rectangle that represents the converted rectangle in grid coordinates.</returns>
            <param name="rectangle">The client rectangle Rectangle to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)">
            <summary>Begins a drag-and-drop operation.</summary>
            <returns>A value from the DragDropEffects enumeration that represents the final effect that was performed during the drag-and-drop operation.</returns>
            <param name="data">The data to drag.</param>
            <param name="allowedEffects">One of the DragDropEffects values.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetBackColorToPaint">
            <summary>OBSOLETE: The GetBackColorToPaint method is obsolete and has been replaced by VisualGridElementState). Retrieves the color that will be used as the grid element's background color depending on its state</summary>
            <returns>A Color structure representing the background color to paint. Unless overridden, BackColor.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetDisplayBackColor">
            <summary>OBSOLETE: The GetDisplayBackColor method is obsolete and has been replaced by the VisualGridElementState) method. Retrieves the grid element's background color.</summary>
            <returns>A Color structure representing the grid element's background color. Unless overridden, BackColor.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetDisplayForeColor">
            <summary>OBSOLETE: The GetDisplayForeColor method is obsolete and has been replaced by the VisualGridElementState) method. Retrieves the grid element's foreground color.</summary>
            <returns>A Color structure representing the grid element's foreground color. Unless overridden, ForeColor.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetDisplayStringFormat">
            <summary>OBSOLETE: The GetDisplayStringFormat method is obsolete and has been replaced by the VisualGridElementState) method. Retrieves the StringFormat used to paint the grid element's text.</summary>
            <returns>A reference to a StringFormat object representing the StringFormat used to paint the grid element's text.</returns>
            <remarks>    The StringFormat will be returned according to the values     of the WordWrap, HorizontalAlignment, VerticalAlignment,     Trimming and ClipPartialLine properties.     Dispose must be called on the returned object once it is     no longer needed.</remarks>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetDisplayVisualStyle(Xceed.Grid.VisualGridElementState)">
            <summary>Retrieves the grid element's visual style used to paint itself.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetForeColorToPaint">
            <summary>OBSOLETE: The GetForeColorToPaint method is obsolete and has been replaced by the VisualGridElementState) method. Retrieves the color that will be used as the grid element's foreground color depending on its state</summary>
            <returns>A Color structure representing the foreground color of the cell depending on its state. Unless overridden, ForeColor.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GetStringFormatToPaint">
            <summary>OBSOLETE: The GetStringFormatToPaint method is obsolete and has been replaced by the GetDisplayStringFormat method. Retrieves the StringFormat object that will be used to paint the grid element.</summary>
            <returns>A reference to a StringFormat object containing the layout information of the grid element's content according to the WordWrap, HorizontalAlignment, VerticalAlignment, Trimming and ClipPartialLine properties.</returns>
            <remarks>    Dispose must be called on the returned object once it is     not used anymore.</remarks>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GridPointToClient(System.Drawing.Point)">
            <summary>Computes the location of the specified grid point into client coordinates.</summary>
            <returns>A Point that represents the converted point in client coordinates.</returns>
            <param name="point">The grid coordinate Point to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.GridRectangleToClient(System.Drawing.Rectangle)">
            <summary>Computes the size and location of the specified grid rectangle in client coordinates</summary>
            <returns>A Rectangle that represents the converted rectangle in client coordinates.</returns>
            <param name="rectangle">The grid rectangle Rectangle to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.Invalidate">
            <summary>Invalidates the rectangle of the grid element and causes a paint message to be sent to the grid control.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the grid element recognizes.</summary>
            <returns>true if the character should be sent directly to the grid and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Returns a boolean value indicating if the key(s) pressed is an input key for the grid element.</summary>
            <returns>true if the key(s) pressed in an input key; false otherwise.</returns>
            <param name="keyData">A Keys value specifying the key code and modifier of the key(s) that was pressed.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnAllowDropChanged(System.EventArgs)">
            <summary>Raises the AllowDropChanged event.</summary>
            <remarks>When overriding OnAllowDropChanged in a derived class, be sure to call the base class's OnAllowDropChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageAlignmentChanged event.</summary>
            <remarks>When overriding OnBackgroundImageAlignmentChanged in a derived class, be sure to call the base class's OnBackgroundImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnBackgroundImageChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageChanged event.</summary>
            <remarks>When overriding OnBackgroundImageChanged in a derived class, be sure to call the base class's OnBackgroundImageChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnBackgroundImageStyleChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageStyleChanged event.</summary>
            <remarks>When overriding OnBackgroundImageStyleChanged in a derived class, be sure to call the base class's OnBackgroundImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnClick(System.EventArgs)">
            <summary>Raises the Click event.</summary>
            <remarks>When overriding OnClick in a derived class, be sure to call the base class's OnClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnDoubleClick(System.EventArgs)">
            <summary>Raises the DoubleClick event.</summary>
            <remarks>When overriding OnDoubleClick in a derived class, be sure to call the base class's OnDoubleClick method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragDrop event.</summary>
            <remarks>When overriding OnDragDrop in a derived class, be sure to call the base class's OnDragDrop method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragEnter event.</summary>
            <remarks>When overriding OnDragEnter in a derived class, be sure to call the base class's OnDragEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnDragLeave(System.EventArgs)">
            <summary>Raises the DragLeave event.</summary>
            <remarks>When overriding OnDragLeave in a derived class, be sure to call the base class's OnDragLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>Raises the DragOver event.</summary>
            <remarks>When overriding OnDragOver in a derived class, be sure to call the base class's OnDragOver method so that registered delegates receive the event.</remarks>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
            <summary>Raises the GiveFeedback event.</summary>
            <remarks>When overriding OnGiveFeedback in a derived class, be sure to call the base class's OnGiveFeedback method so that registered delegates receive the event.</remarks>
            <param name="e">A GiveFeedbackEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnGradientMapChanged(System.EventArgs)">
            <summary>Raises the GradientMapChanged event.</summary>
            <remarks>When overriding OnGradientMapChanged in a derived class, be sure to call the base class's OnGradientMapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnHotVisualStyleChanged(System.EventArgs)">
            <summary>Raises the HotVisualStyleChanged event.</summary>
            <remarks>When overriding OnHotVisualStyleChanged in a derived class, be sure to call the base class's OnHotVisualStyleChanged method so that the registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyUp event.</summary>
            <remarks>When overriding OnKeyUp in a derived class, be sure to call the base class's OnKeyUp method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnMouseEnter(System.EventArgs)">
            <summary>Raises the MouseEnter event.</summary>
            <remarks>When overriding OnMouseEnter in a derived class, be sure to call the base class's OnMouseEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnMouseLeave(System.EventArgs)">
            <summary>Raises the MouseLeave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnPaint(Xceed.Grid.GridPaintEventArgs)">
            <summary>Raises the Paint event.</summary>
            <remarks>When overriding OnPaint in a derived class, be sure to call the base class's OnPaint method so that registered delegates receive the event.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>Raises the QueryContinueDrag event.</summary>
            <remarks>When overriding OnQueryContinueDrag in a derived class, be sure to call the base class's OnQueryContinueDrag method so that registered delegates receive the event.</remarks>
            <param name="e">A QueryContinueDragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PaintBackground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the background of the grid element.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PaintBorders(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the borders of the grid element.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PaintForeground(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the foreground of the grid element.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs; otherwise, the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PaintHotState(Xceed.Grid.GridPaintEventArgs)">
            <summary>Paints the VisualGridElement in a hot state.</summary>
            <param name="e">A GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PointToClient(System.Drawing.Point)">
            <summary>Determines the location of the specified screen point into client coordinates. Should not be used when doing painting destined for printing.</summary>
            <returns>A Point that represents the converted Point in client coordinates.</returns>
            <param name="point">The screen coordinate Point to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.PointToScreen(System.Drawing.Point)">
            <summary>Determines the location of the specified client point into screen coordinates.</summary>
            <returns>A Point that represents the converted Point in screen coordinates.</returns>
            <param name="point">The client coordinate Point to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.RectangleToClient(System.Drawing.Rectangle)">
            <summary>Determine the size and location of the specified screen rectangle in client coordinates.</summary>
            <returns>A Rectangle that represents the converted Rectangle in client coordinates.</returns>
            <param name="rectangle">The screen coordinate Rectangle to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.RectangleToScreen(System.Drawing.Rectangle)">
            <summary>Determines the size and location of the specified client rectangle in screen coordinates.</summary>
            <returns>A Rectangle that represents the converted Rectangle in screen coordinates.</returns>
            <param name="rectangle">The client rectangle Rectangle to convert.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetAllowDrop">
            <summary>Resets the value of the AllowDrop property to its default value, DefaultAllowDrop.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetBackgroundImage">
            <summary>Resets the value of the BackgroundImage property to its default value, DefaultBackgroundImage.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetBackgroundImageAlignment">
            <summary>Resets the value of the BackgroundImageAlignment property to its default value, DefaultBackgroundImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetBackgroundImageStyle">
            <summary>Resets the value of the BackgroundImageStyle property to its default value, DefaultBackgroundImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetGradientMap">
            <summary>Resets the value of the GradientMap property to its default value, DefaultGradientMap.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetHotVisualStyle">
            <summary>Resets the hot visual style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ResetStyle">
            <summary>Resets the values of the properties affected by a GridElementStyle to their default values.</summary>
            <remarks>    Only the Font, ForeColor, BackColor, ClipPartialLine,     WordWrap, HorizontalAlignment, VerticalAlignment, Trimming,     BackgroundImage, BackgroundImageAlignment and     BackgroundImageStyle properties will be reset to their default     values.</remarks>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ShouldSerializeGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.VisualGridElement.ShouldSerializeXmlGradientMap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.AllowDrop">
            <summary>Gets or sets a boolean value indicating whether the grid element can accept data that the user drags onto it.</summary>
            <remarks>    In order for the DragXYZ events to be raised, AllowDrop     and the grid's AllowDrop property must both be set to     true.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.AmbientBackColor">
            <summary>Gets the ambient value of the visual grid element's BackColor property.</summary>
            <remarks>    The ambient background color is the background color     inherited from the grid element's parent in the case where its     own BackColor property is not explicitly set.     If the value of the IsBackColorAmbient property is true     then both the AmbientBackColor and BackColor properties will     return the same value.     If the grid element does not have an ambient parent, then     the value of the DefaultBackColor property will be     returned.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.BackgroundImage">
            <summary>Gets or sets the background image of the grid element.</summary>
            <remarks>    The appearance of the background image can be modified     via the BackgroundImageStyle and BackgroundImageAlignment     properties.     To reset the value of the BackgroundImage property to its     default value, DefaultBackgroundImage, the ResetBackgroundImage     method must be called or the BackgroundImage property set to     $$NULL$$.     ColumnManagerRow objects will not display a background     image if the UIStyle property is set to     UIStyle.WindowsXP.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.BackgroundImageAlignment">
            <summary>Gets or sets the alignment of the grid element's background image.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.BackgroundImageStyle">
            <summary>Gets or sets the style of the grid element's background image.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.Borders">
            <summary>Gets the borders of the grid element.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.Bounds">
            <summary>Gets a Rectangle structure that represents the grid element's bounds. The X and Y coordinates are relative to the grid's client rectangle and can be negative if the grid is scrolled.</summary>
            <remarks>    The X and Y coordinates are relative to the grid's and     can be negative if the grid is scrolled.     If Empty, no part of the grid element is visible.     The width and height of this rectangle include the     Borders.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.Capture">
            <summary>Gets or sets a boolean value indicating if the grid element will receive all mouse events.</summary>
            <remarks>    Note that setting Capture will also set the grid's     Capture property.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.ClientRectangle">
            <summary>Gets the client rectangle of the grid element. The rectangle represents the visible portion of the grid element and is in client coordinates. The X and Y coordinates are always 0,0.</summary>
            <remarks>    The rectangle represents the visible portion of the grid     element and is in client coordinates. The X and Y coordinates     are always 0,0. The width and height of the client rectangle     vary depending on how much of the grid element is visible in     the grid.     The client rectangle of the grid element does not     include the Borders.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultAllowDrop">
            <summary>Gets the default value of the AllowDrop property.</summary>
            <remarks>    When overriding DefaultAllowDrop in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultBackgroundImage">
            <summary>Gets the default value of the BackgroundImage property.</summary>
            <remarks>    When overriding DefaultBackgroundImage in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultBackgroundImageAlignment">
            <summary>Gets the default value of the BackgroundImageAlignment property.</summary>
            <remarks>    When overriding DefaultBackgroundImageAlignment in a     derived class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultBackgroundImageStyle">
            <summary>Gets the default value of the BackgroundImageStyle property.</summary>
            <remarks>    When overriding DefaultBackgroundImageStyle in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultGradientMap">
            <summary>Gets the default GradientMap of the VisualGridElement.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DefaultHotVisualStyle">
            <summary>Gets the default visual style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.DisplayRectangle">
            <summary>Gets the display rectangle of the grid element. The rectangle is in client coordinates and the X and Y coordinates can be negative if the grid is scrolled.</summary>
            <remarks>    The rectangle is in client coordinates and the X and Y     coordinates can be negative if the grid is scrolled. The width     and height of the display rectangle never vary.     The display rectangle of the grid element does not     include the Borders.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.GradientMap">
            <summary>Gets or sets the GradientMap of the visual grid element.</summary>
            <remarks>    To reset the value of the GradientMap property to its     default value, DefaultGradientMap, the ResetGradientMap method     must be called.     The GradientMap property cannot be null.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.HotVisualStyle">
            <summary>Gets or sets the style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.IsMouseOver">
            <summary>Gets a boolean value indicating whether the mouse is over the current VisualGridElement.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.ReportStyle">
            <summary>Gets the report style of the grid element.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     Each element's report style can be used to provide a     specific style for that element when it is printed in a     report.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a VisualGridElementReportStyle from being created     in the case where none of the properties of the ReportStyle     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.VisualGridElement.XmlGradientMap">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.AllowDropChanged">
            <summary>Raised when the value of the AllowDrop property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.BackgroundImageAlignmentChanged">
            <summary>Raised when the value of the BackgroundImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.BackgroundImageChanged">
            <summary>Raised when the value of the BackgroundImage property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.BackgroundImageStyleChanged">
            <summary>Raised when the value of the BackgroundImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.Click">
            <summary>Raised when the grid element is clicked.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.DoubleClick">
            <summary>Raised when the grid element is double clicked.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.DragDrop">
            <summary>Raised when a drag-and-drop operation is completed.</summary>
            <remarks>    In order for the DragDrop event to be raised,     AllowDropand the grid's AllowDrop property must both be     set to true.</remarks>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.DragEnter">
            <summary>Raised when an object is dragged into the grid element's bounds.</summary>
            <remarks>    In order for the DragEnter event to be raised,     AllowDropand the grid's AllowDrop property must both be     set to true.</remarks>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.DragLeave">
            <summary>Raised when an object is dragged out of the grid element's bounds.</summary>
            <remarks>    In order for the DragLeave event to be raised,     AllowDropand the grid's AllowDrop property must both be     set to true.</remarks>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.DragOver">
            <summary>Raised when an object is dragged over the grid element's bounds.</summary>
            <remarks>    In order for the DragOver event to be raised,     AllowDropand the grid's AllowDrop property must both be     set to true.</remarks>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.GiveFeedback">
            <summary>Raised during a drag operation.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.GradientMapChanged">
            <summary>Raised when the value of the GradientMap property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.HotVisualStyleChanged">
            <summary>Raised when the value of the HotVisualStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.KeyDown">
            <summary>Raised when a key is pressed while the grid element has focus.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.KeyPress">
            <summary>Raised when a key is pressed while the grid element has focus.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.KeyUp">
            <summary>Raised when a key is released while the grid element has focus.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.MouseDown">
            <summary>Raised when the mouse pointer is over the grid element and a mouse button is pressed.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.MouseEnter">
            <summary>Raised when the mouse pointer enters the grid element.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.MouseLeave">
            <summary>Raised when the mouse pointer leaves the grid element.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.MouseMove">
            <summary>Raised when the mouse pointer is moved over the grid element.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.MouseUp">
            <summary>Raised when the mouse pointer is over the grid element and a mouse button is released.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.Paint">
            <summary>Raised after the grid element's background and foreground have been painted.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.When painting, the point conversion methods     such as Point) should not be used.</remarks>
        </member>
        <member name="E:Xceed.Grid.VisualGridElement.QueryContinueDrag">
            <summary>Raised during a drag-and-drop operation and allows the drag source to determine whether the drag-and-drop operation should be cancelled.</summary>
        </member>
        <member name="T:Xceed.Grid.VisualGridElementStyle">
            <summary>Represents the style of a VisualGridElement.</summary>
            <remarks>If a property that modifies the appearance of the style is added to a derived class, the EventArgs) method must be called when the value of the property is modified, otherwise the grid will not be repainted to reflect the changes. This only applies to the DataRowTemplateStyles.</remarks>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.#ctor">
            <summary>Initializes a new instance of the VisualGridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.#ctor">
            <summary>Initializes a new instance of the VisualGridElementStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.#ctor(Xceed.Grid.VisualGridElementStyle)">
            <summary>Initializes a new instance of the VisualGridElementStyle class specifying a VisualGridElementStyle from which to copy property values.</summary>
            <param name="visualGridElementStyle">A reference to a VisualGridElementStyle from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.Apply">
            <summary>Applies the style to the specified grid element.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.Apply(Xceed.Grid.GridElement)">
            <summary>Applies the style to the specified grid element.</summary>
            <remarks>When overriding Apply, the base implementation must be called before your own.</remarks>
            <param name="element">The GridElement to which to apply the style</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GridElementStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current VisualGridElementStyle.</summary>
            <returns>true if the specified object is equal to the current VisualGridElementStyle; otherwise, false.</returns>
            <param name="obj">The object to compare with the current VisualGridElementStyle.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.GetHashCode">
            <summary>Serves as a hash function for the VisualGridElementStyle object, suitable for use in hashing algorithms and data structures such as a hash table.</summary>
            <returns>An integer value representing a hash code for the current VisualGridElementStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.OnHotVisualStyleChanged(System.EventArgs)">
            <summary>Raises the HotVisualStyleChanged event.</summary>
            <remarks>When overriding OnHotVisualStyleChanged in a derived class, be sure to call the base class's OnHotVisualStyleChanged method so that the registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.ResetHotVisualStyle">
            <summary>Resets the hot visual style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="M:Xceed.Grid.VisualGridElementStyle.ShouldSerializeHotVisualStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.VisualGridElementStyle.DefaultHotVisualStyle">
            <summary>Gets the default visual style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElementStyle.HotVisualStyle">
            <summary>Gets or sets the style of a VisualGridElement that is in a hot state.</summary>
        </member>
        <member name="P:Xceed.Grid.VisualGridElementStyle.IsHotVisualStyleDefined">
            <summary>Gets a boolean value indicating if the HotVisualStyle property has been explicitly set.</summary>
        </member>
        <member name="E:Xceed.Grid.VisualGridElementStyle.HotVisualStyleChanged">
            <summary>Raised when the value of the HotVisualStyle property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.AddingDataRowEventHandler">
            <summary>Represents the method that will handle the DetailGrid's AddingDataRow event and the grid's AddingDataRow events.</summary>
            <remarks>    When bound to a data source, the DetailGrid's     AddingDataRow event and the grid's AddingDataRow event are     raised for each row found in the data source. When in unbound     mode (providing data manually), it is raised once for each     DataRow added using the AddNew method afterEndEdit is     called in order to provide data to each cell in the row.</remarks>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An AddingDataRowEventArgs containing the event data.</param>
        </member>
        <member name="T:Xceed.Grid.CellValidationErrorEventHandler">
            <summary>Represents the method that will handle the ValidationError event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An CellValidationErrorEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.ColumnAddedEventHandler">
            <summary>Represents the method that will handle the ColumnAdded and ColumnAdded events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ColumnAddedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.ColumnRemovedEventHandler">
            <summary>Represents the method that will handle the ColumnRemoved and ColumnRemoved events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ColumnRemovedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.EditLeftEventHandler">
            <summary>Represents the method that will handle the EditLeft event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An EditLeftEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.EnteringEditEventHandler">
            <summary>Represents the method that will handle the EnteringEdit event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An EnteringEditEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.GridPaintEventHandler">
            <summary>Represents the method that will handle the paint events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An GridPaintEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.GroupAddedEventHandler">
            <summary>Represents the method that will handle the GroupAdded event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An LeavingEditEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.InitializingDetailGridEventHandler">
            <summary>Represents the method that will handle the InitializingDetailGridEventArgs event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An InitializingDetailGridEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.InitializingNewDataRowEventHandler">
            <summary>Represents the method that will handle the InitializingNewDataRow event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An InitializingNewDataRowEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.LeavingEditEventHandler">
            <summary>Represents the method that will handle the LeavingEdit event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An LeavingEditEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.QueryGroupKeysEventHandler">
            <summary>Represents the method that will handle the QueryGroupKeys event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An QueryGroupKeysEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.QueryPrintPageEventHandler">
            <summary>Represents the method that will handle the QueryPrintPage event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryPrintPageEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.RowInsertedEventHandler">
            <summary>Represents the method that will handle the RowInserted event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A RowInsertedEventArgs containing the event data.</param>
        </member>
        <member name="T:Xceed.Grid.RowValidationErrorEventHandler">
            <summary>Represents the method that will handle the ValidationError event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An RowValidationErrorEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.ValueChangingEventHandler">
            <summary>Represents the method that will handle the ValueChanging event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ValueChangingEventArgs that contains the event data.</param>
        </member>
        <member name="N:Xceed.Grid.Collections">
            <summary>The Xceed.Grid.Collections namespace regroups a variety of object collections that are used throughout Xceed Grid for .NET by various class.</summary>
        </member>
        <member name="T:Xceed.Grid.Collections.CellEditorManagerDictionary">
            <summary>Contains a list of CellEditorManagers and their associated datatypes.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Add">
            <summary>Adds an entry to the hashtable specifying the type (key) and CellEditorManager (value) that will be used to edit cells of the specified datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Add(System.Object,System.Object)">
            <summary>Adds an entry to the hashtable specifying the type (key) and CellEditorManager (value) that will be used to edit cells of the specified datatype.</summary>
            <remarks>    If key is $$NULL$$, then the CellEditorManager will be     used to edit all the cells for whose datatypes a     CellEditorManager has not been specified.</remarks>
            <param name="key">A type representing the datatype of the cells that will be edited by the specified CellEditorManager.</param>
            <param name="value">A reference to a CellEditorManager representing the CellEditorManager that will be used to edit cells with the specified datatype.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Add(System.Type,Xceed.Grid.Editors.CellEditorManager)">
            <summary>Adds an entry to the hashtable specifying the type and CellEditorManager that will be used to edit cells of the specified datatype.</summary>
            <remarks>    If type is $$NULL$$, then the cellEditorManager will be     used to edit all the cells for whose datatypes a     CellEditorManager has not been specified.</remarks>
            <param name="type">A type representing the datatype of the cells that will be edited by the specified cellEditorManager.</param>
            <param name="cellEditorManager">A reference to a CellEditorManager representing the CellEditorManager that will be used to edit cells with the specified datatype.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Clear">
            <summary>Clears all entries from the hashtable.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Clone">
            <summary>Creates a shallow copy of the hashtable.</summary>
            <returns>An Object representing the shallow copy of the hashtable.</returns>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Contains">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Contains(System.Type)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Contains(System.Object)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.ContainsKey">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.ContainsKey(System.Type)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.ContainsValue">
            <summary>Determines if the hashtable contains an entry for the specified CellEditorManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.ContainsValue(Xceed.Grid.Editors.CellEditorManager)">
            <summary>Determines if the hashtable contains an entry for the specified CellEditorManager.</summary>
            <returns>true if the hashtable contains an entry for the specified CellEditorManager; false otherwise.</returns>
            <param name="cellEditorManager">The CellEditorManager to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Remove">
            <summary>Removes the entry with the specified type from the hashtable.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellEditorManagerDictionary.Remove(System.Type)">
            <summary>Removes the entry with the specified type from the hashtable.</summary>
            <param name="type">The Type of the entry to remove.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellEditorManagerDictionary.Item">
            <summary>Gets or sets the value associated with the specified key.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.CellEditorManagerDictionary.Item(System.Object)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="key">The key whose value to retrieve.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellEditorManagerDictionary.Item(System.Type)">
            <summary>Gets or sets the CellEditorManager associated with the specified type.</summary>
            <param name="type">The type whose associated CellEditorManager to retrieve.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.CellList">
            <summary>Contains a readonly list of cells.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.Add(Xceed.Grid.Cell)">
            <summary>Adds a cell to the list.</summary>
            <returns>The index at which the cell was added.</returns>
            <param name="value">A reference to the Cell object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.Clear">
            <summary>Removes all cells from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.Contains(Xceed.Grid.Cell)">
            <summary>Retrieves a boolean value indicating if a specific cell exists in the list.</summary>
            <returns>true if the cell exists in the list; false otherwise.</returns>
            <param name="value">A reference to the Cell object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.CreateItemFromTemplate(System.Int32)">
            <summary>Creates a cell from from a template.</summary>
            <returns>A Cell, cast as an object.</returns>
            <param name="index">The zero-based index at which to retrieve the cell template that will be used as the basis of the created cell.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.IndexOf">
            <summary>Searches for the specified Cell object and returns the zero-based index of the first occurrence within the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.IndexOf(Xceed.Grid.Cell)">
            <summary>Searches for the specified Cell object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the Cell object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.IndexOf(System.String)">
            <summary>Searches for the specified string and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of name within the entire list, if found; otherwise, returns -1.</returns>
            <param name="name">The name of the cell to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.Insert(System.Int32,Xceed.Grid.Cell)">
            <summary>Inserts a cell into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the cell.</param>
            <param name="value">A reference to the Cell object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the CellList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new element into the CellList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after inserting a new element into the CellList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnPlaceHolderInserted(System.Int32)">
            <summary>Performs additional custom processes when a place holder has been inserted.</summary>
            <param name="index">The zero-based index at which the place holder is inserted.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnRemove(System.Int32,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes when removing an element from the CellList instance.</summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after removing an element from the CellList instance.</summary>
            <remarks>    If the position of the element is unknown, index is -1.     In that case, the Object) method needs to be called with the     value to retrieve the position.</remarks>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before setting a value in the CellList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.Remove(Xceed.Grid.Cell)">
            <summary>Removes the cell from the list.</summary>
            <param name="value">A reference to the Cell object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellList.RemoveAt(System.Int32)">
            <summary>Removes the cell from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the cell.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellList.IsFixedSize">
            <summary>Gets a value indicating whether the CellList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.CellList.IsReadOnly">
            <summary>Gets a value indicating whether the CellList is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.CellList.Item">
            <summary>Gets the cell at the specified index.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.CellList.Item(System.Int32)">
            <summary>Gets the cell at the specified index.</summary>
            <param name="index">The zero-based index at which to get the cell.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellList.Item(System.String)">
            <summary>Gets or sets the cell that corresponds to name.</summary>
            <param name="name">The name of the cell to retrieve.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.CellViewerManagerDictionary">
            <summary>Contains a list of CellViewerManagers and their associated datatypes.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Add">
            <summary>Adds an entry to the hashtable specifying the type (key) and CellViewerManager (value) that will be used to display the content of cells of the specified datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Add(System.Object,System.Object)">
            <summary>Adds an entry to the hashtable specifying the type (key) and CellViewerManager (value) that will be used to display the content of cells of the specified datatype.</summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value must be a CellViewerManager instance.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Add(System.Type,Xceed.Grid.Viewers.CellViewerManager)">
            <summary>Adds an entry to the hashtable specifying the type (type) and CellViewerManager (cellViewerManager) that will be used to display the content of cells of the specified datatype.</summary>
            <param name="type">The key of the element to add.</param>
            <param name="cellViewerManager">The value of the element to add.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Clear">
            <summary>Clears all entries from the hashtable.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Clone">
            <summary>Creates a shallow copy of the hashtable.</summary>
            <returns>An Object representing the shallow copy of the hashtable.</returns>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Contains">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Contains(System.Type)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Contains(System.Object)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.ContainsKey">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.ContainsKey(System.Type)">
            <summary>Determines if the hashtable contains an entry of the specified type.</summary>
            <returns>true if the hashtable contains an entry for the specified type; false otherwise.</returns>
            <param name="type">The Type to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.ContainsValue">
            <summary>Determines if the hashtable contains an entry for the specified CellViewerManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.ContainsValue(Xceed.Grid.Viewers.CellViewerManager)">
            <summary>Determines if the hashtable contains an entry for the specified CellViewerManager.</summary>
            <returns>true if the hashtable contains an entry for the specified CellViewerManager; false otherwise.</returns>
            <param name="cellViewerManager">The CellViewerManager to find.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Remove">
            <summary>Removes the entry with the specified type from the hashtable.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.CellViewerManagerDictionary.Remove(System.Type)">
            <summary>Removes the entry with the specified type from the hashtable.</summary>
            <param name="type">The Type of the entry to remove.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellViewerManagerDictionary.Item">
            <summary>Gets or sets the value associated with the specified key.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.CellViewerManagerDictionary.Item(System.Object)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="key">The key whose value to retrieve.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.CellViewerManagerDictionary.Item(System.Type)">
            <summary>Gets or sets the CellViewerManager associated with the specified type.</summary>
            <param name="type">The type whose associated CellViewerManager to retrieve.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.ColumnList">
            <summary>Contains a list of columns.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.#ctor(Xceed.Grid.DetailGrid)">
            <summary>Initializes a new instance of the ColumnList class specifying the GridControl class to which it belongs.</summary>
            <param name="grid">A reference to the GridControl class to which the ColumnList belongs.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Add(Xceed.Grid.Column)">
            <summary>Adds a column to the list.</summary>
            <returns>The index at which the column was added.</returns>
            <param name="value">A reference to the Column object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Clear">
            <summary>Removes all the columns from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Clear">
            <summary>Removes all the columns from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Clear(Xceed.Grid.ColumnTypes)">
            <summary>Removes the specified types of columns from the list.</summary>
            <param name="columnType">A ColumnTypes value representing the types of columns will be cleared from the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Contains(Xceed.Grid.Column)">
            <summary>Retrieves a boolean value indicating if a specific column exists in the list.</summary>
            <returns>true if the column exists in the list; false otherwise.</returns>
            <param name="value">A reference to the Column object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.GenerateFromType(System.Type)">
            <summary>Generates a list of bound columns based on the specified type.</summary>
            <remarks>    The result will be the equivalent of binding the grid to     an array of type.     A column will be created for each public property that     has the Browsable attribute set to true.</remarks>
            <param name="type">The type from which to generate the columns.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.GetColumnAtDisplayableIndex(System.Int32)">
            <summary>Retrieves a reference to the column at the specified displayable index.</summary>
            <returns>A reference to a Column object at the specified displayable index.</returns>
            <param name="displayableIndex">The displayable index at which to retrieve the column.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.GetColumnAtVisibleIndex(System.Int32)">
            <summary>Retrieves a reference to the column at the specified visible index.</summary>
            <returns>A reference to a Column object at the specified visible index.</returns>
            <param name="visibleIndex">The visible index at which to retrieve the column.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.IndexOf">
            <summary>Searches for the specified Column object and returns the zero-based index of the first occurrence within the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.IndexOf(Xceed.Grid.Column)">
            <summary>Searches for the specified Column object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the Column object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.IndexOf(System.String)">
            <summary>Searches for the specified column name and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of name within the entire list, if found; otherwise, returns -1.</returns>
            <param name="fieldName">The field name of the column to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Insert(System.Int32,Xceed.Grid.Column)">
            <summary>Inserts a column into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="value">A reference to the Column object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the ColumnList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnClearComplete">
            <summary>Performs additional custom processes when clearing the contents of the ColumnList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new column into the ColumnList instance.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="value">The new value of the column at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after insertion of a new column into the ColumnList instance.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="value">The new value of the column at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes when removing a column from the the ColumnList instance.</summary>
            <param name="index">The zero-based index at which the column can be found.</param>
            <param name="value">The value of the column to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before setting a value in the ColumnList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.OnValidate(System.Object)">
            <summary>Performs validation of value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.Remove(Xceed.Grid.Column)">
            <summary>Removes the column from the list.</summary>
            <param name="value">A reference to the Column object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ColumnList.RemoveAt(System.Int32)">
            <summary>Removes the column from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the column.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.ColumnList.DisplayableColumnCount">
            <summary>Gets the number of displayable columns.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ColumnList.Item">
            <summary>Gets the column at the specified index.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ColumnList.Item(System.Int32)">
            <summary>Gets the column at the specified index.</summary>
            <param name="index">The zero-based index at which to get the column.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.ColumnList.Item(System.String)">
            <summary>Gets the column that corresponds to name.</summary>
            <param name="fieldName">The field name of the column to retrieve.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.DataRowList">
            <summary>Contains an editable list of DataRow objects used by the Boolean).</summary>
            <remarks>    This collection of data rows is directly related with the     data binding. Modifying, adding, deleting, etc.. in this     collection will automatically affect the corresponding rows in     the data source to which the grid is bound. For example, if a     row is deleted, it will also be deleted in the data source. If     an operation is not permitted the appropriate error will be     thrown.</remarks>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.AddNew">
            <summary>Adds a new row to the list with its cells initialized to their default values. EndEdit must be called after AddNew in order to add the data row to the grid.</summary>
            <returns>A reference to the newly added DataRow object.</returns>
            <remarks>    When adding a row using the AddNew method, it is added     with its cells initialized to their default values. The row is     in the same state as it would be if BeginEdit was called but     BeginEdit is not called.     If CancelEdit is called then the row will be removed from     the list. If EndEdit is called or a new row is added using     AddNew, then the row is added to the grid.</remarks>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.Clear">
            <summary>Removes all rows from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the DataRowList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnClearComplete">
            <summary>Performs additional custom processes when clearing the contents of the DataRowList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new row into the DataRowList instance.</summary>
            <param name="index">The zero-based index at which to insert the row.</param>
            <param name="value">The new value of the row at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after insertion of a new row into the DataRowList instance.</summary>
            <param name="index">The zero-based index at which to insert the row.</param>
            <param name="value">The new value of the row at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnRemove(System.Int32,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes when removing an element from the DataRowList instance.</summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes when removing a row from the the DataRowList instance.</summary>
            <param name="index">The zero-based index at which the row can be found.</param>
            <param name="value">The value of the row to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before setting a value in the DataRowList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.Remove(Xceed.Grid.DataRow)">
            <summary>Removes the row from the list.</summary>
            <param name="value">A reference to the Row object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DataRowList.RemoveAt(System.Int32)">
            <summary>Removes the row from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the row.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.DataRowList.IsFixedSize">
            <summary>Gets a value indicating whether the DataRowList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.DataRowList.IsReadOnly">
            <summary>Gets a value indicating whether the DataRowList is readonly.</summary>
        </member>
        <member name="T:Xceed.Grid.Collections.DetailGridList">
            <summary>Contains a list of detail grids.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.Add(Xceed.Grid.DetailGrid)">
            <summary>Adds a detail grid to the list.</summary>
            <returns>The index at which the detail grid was added.</returns>
            <param name="value">A reference to the DetailGrid object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.Clear">
            <summary>Removes all the detail grids from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.Contains(Xceed.Grid.DetailGrid)">
            <summary>Retrieves a boolean value indicating if a specific detail grid exists in the list.</summary>
            <returns>true if the detail grid exists in the list; false otherwise.</returns>
            <param name="value">A reference to the DetailGrid object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.IndexOf(Xceed.Grid.DetailGrid)">
            <summary>Searches for the specified DetailGrid object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the DetailGrid object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.Insert(System.Int32,Xceed.Grid.DetailGrid)">
            <summary>Inserts a detail grid into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the detail grid.</param>
            <param name="value">A reference to the DetailGrid object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.Remove(Xceed.Grid.DetailGrid)">
            <summary>Removes the detail grid from the list.</summary>
            <param name="value">A reference to the DetailGrid object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.DetailGridList.RemoveAt(System.Int32)">
            <summary>Removes the detail grid from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the detail grid.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.DetailGridList.IsFixedSize">
            <summary>Gets a value indicating whether the DetailGridList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.DetailGridList.IsReadOnly">
            <summary>Gets a value indicating whether the DetailGridList is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.DetailGridList.Item(System.Int32)">
            <summary>Gets or sets the detail grid at the specified index.</summary>
            <param name="index">The zero-based index at which to get the detail grid.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.EventHandlerTable">
            <summary>Provides a list of delegates.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.#ctor">
            <summary>Initializes a new instance of the EventHandlerTable class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.#ctor">
            <summary>Initializes a new instance of the EventHandlerTable class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.#ctor(Xceed.Grid.Collections.EventHandlerTable)">
            <summary>Initializes a new instance of the EventHandlerTable class specifying the EventHandlerTable that will be used as a template.</summary>
            <param name="template">A reference to an EventHandlerTable object that will be used to create other EventHandlerTables.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.AddHandler(System.Object,System.Delegate)">
            <summary>Adds a delegate to the list.</summary>
            <param name="eventKey">The object that owns the event.</param>
            <param name="handler">The delegate to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.Clone">
            <summary>Creates an exact copy of the EventHandlerTable.</summary>
            <returns>An object representing the newly cloned EventHandlerTable.</returns>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.Combine(Xceed.Grid.Collections.EventHandlerTable)">
            <summary>Adds the delegates contained in eventHandlerTable into the current EventHandlerTable.</summary>
            <param name="eventHandlerTable">A reference to a EventHandlerTable object representing the EventHandlerTable whose delegates are to be added to the current EventHandlerTable.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.EventHandlerTable.RemoveHandler(System.Object,System.Delegate)">
            <summary>Removes a delegate from the list.</summary>
            <param name="eventKey">The object that owns the event.</param>
            <param name="handler">The delegate to remove from the list.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.EventHandlerTable.Item(System.Object)">
            <summary>Gets or sets the Delegate for the specified object.</summary>
            <param name="eventKey">An object to find in the list.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.GroupKeyList">
            <summary>Contains a list of objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupKeyList.#ctor">
            <summary>Calls the constructor ListBase class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupKeyList.Contains(System.Object)">
            <summary>Retrieves a boolean value indicating if a specific object exists in the list.</summary>
            <returns>true if the object exists in the list; false otherwise.</returns>
            <param name="value">A reference to the object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupKeyList.IndexOf(System.Object)">
            <summary>Searches for the specified object and returns the zero-based group level of the first occurrence within the list.</summary>
            <returns>The zero-based group level of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupKeyList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.GroupKeyList.IsFixedSize">
            <summary>Gets a value indicating whether the GroupKeyList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.GroupKeyList.IsReadOnly">
            <summary>Gets a value indicating whether the GroupKeyList is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.GroupKeyList.Item(System.Int32)">
            <summary>Gets the object at the specified group level.</summary>
            <param name="groupLevel">The zero-based group level at which to get the object.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.GroupList">
            <summary>Contains a list of groups.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.#ctor">
            <summary>Calls the constructor ReadOnlyGroupList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.Add(Xceed.Grid.Group)">
            <summary>Adds a group to the list.</summary>
            <returns>The index at which the group was added.</returns>
            <param name="value">A reference to the Group object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.Clear">
            <summary>Removes all groups from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.Insert(System.Int32,Xceed.Grid.Group)">
            <summary>Inserts a group into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the group.</param>
            <param name="value">A reference to the Group object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.Remove(Xceed.Grid.Group)">
            <summary>Removes the group from the list.</summary>
            <param name="value">A reference to the Group object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.GroupList.RemoveAt(System.Int32)">
            <summary>Removes the group from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the group.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.GroupList.IsFixedSize">
            <summary>Gets a value indicating whether the GroupList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.GroupList.IsReadOnly">
            <summary>Gets a value indicating whether the GroupList is readonly.</summary>
        </member>
        <member name="T:Xceed.Grid.Collections.ReadOnlyDataRowList">
            <summary>Contains a readonly list of DataRow objects used by the Boolean) method.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDataRowList.Contains(Xceed.Grid.DataRow)">
            <summary>Retrieves a boolean value indicating if a specific data row exists in the list.</summary>
            <returns>true if the data row exists in the list; false otherwise.</returns>
            <param name="value">A reference to the DataRow object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDataRowList.IndexOf(Xceed.Grid.DataRow)">
            <summary>Searches for the specified DataRow object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the DataRow object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDataRowList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDataRowList.IsFixedSize">
            <summary>Gets a value indicating whether the IList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDataRowList.IsReadOnly">
            <summary>Gets a value indicating whether the IList is read-only.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDataRowList.Item(System.Int32)">
            <summary>Gets the DataRow at the specified index.</summary>
            <param name="index">The zero-based index at which to get the data row.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.ReadOnlyDetailGridList">
            <summary>Contains a readonly list of DetailGrid objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDetailGridList.#ctor">
            <summary>Calls the constructor ListBase class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDetailGridList.Contains(Xceed.Grid.DetailGrid)">
            <summary>Retrieves a boolean value indicating if a specific detail grid exists in the list.</summary>
            <returns>true if the detail grid exists in the list; false otherwise.</returns>
            <param name="value">A reference to the DetailGrid object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDetailGridList.IndexOf(Xceed.Grid.DetailGrid)">
            <summary>Searches for the specified DetailGrid object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the DetailGrid object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyDetailGridList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDetailGridList.IsFixedSize">
            <summary>Gets a value indicating whether the list has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDetailGridList.IsReadOnly">
            <summary>Gets a value indicating whether the list is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyDetailGridList.Item(System.Int32)">
            <summary>Gets the detail grid at the specified index.</summary>
            <param name="index">The zero-based index at which to get the detail grid.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.ReadOnlyGroupList">
            <summary>Contains a readonly list of Group objects used by the Groups property.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyGroupList.#ctor">
            <summary>Calls the constructor ListBase class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyGroupList.Contains(Xceed.Grid.Group)">
            <summary>Retrieves a boolean value indicating if a specific group exists in the list.</summary>
            <returns>true if the group exists in the list; false otherwise.</returns>
            <param name="value">A reference to the Group object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyGroupList.IndexOf(Xceed.Grid.Group)">
            <summary>Searches for the specified Group object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the Group object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.ReadOnlyGroupList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyGroupList.IsFixedSize">
            <summary>Gets a value indicating whether the list has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyGroupList.IsReadOnly">
            <summary>Gets a value indicating whether the list is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.ReadOnlyGroupList.Item(System.Int32)">
            <summary>Gets the group at the specified index.</summary>
            <param name="index">The zero-based index at which to get the group.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.RowList">
            <summary>Contains a list of rows.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.Add(Xceed.Grid.Row)">
            <summary>Adds a row to the list.</summary>
            <returns>The index at which the row was added.</returns>
            <param name="value">A reference to the Row object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.Clear">
            <summary>Removes all rows from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.Contains(Xceed.Grid.Row)">
            <summary>Retrieves a boolean value indicating if a specific row exists in the list.</summary>
            <returns>true if the row exists in the list; false otherwise.</returns>
            <param name="value">A reference to the Row object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.IndexOf(Xceed.Grid.Row)">
            <summary>Searches for the specified Row object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the Row object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.Insert(System.Int32,Xceed.Grid.Row)">
            <summary>Inserts a row into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the row.</param>
            <param name="value">A reference to the Row object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.Remove(Xceed.Grid.Row)">
            <summary>Removes the row from the list.</summary>
            <param name="value">A reference to the Row object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.RowList.RemoveAt(System.Int32)">
            <summary>Removes the row from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the row.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.RowList.IsFixedSize">
            <summary>Gets a value indicating whether the RowList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.RowList.IsReadOnly">
            <summary>Gets a value indicating whether the RowList is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.RowList.Item(System.Int32)">
            <summary>Gets the row at the specified index.</summary>
            <param name="index">The zero-based index at which to get the row.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.SelectedRowList">
            <summary>Contains a list of selected rows.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.#ctor(Xceed.Grid.MasterGrid)">
            <summary>Calls the constructor of the RowList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.AddRange(Xceed.Grid.Row,Xceed.Grid.Row,System.Boolean)">
            <summary>Selects a contiguous range of rows.</summary>
            <remarks>    Both the starting row and the ending row are included in     the selection.     The rows will be ordered in the collection according to     the order in which they were added.     The collection will not contain duplicate rows. For     example, if DataRows 1, 2 and 3 are added to the selection and     then 3, 4 and 5, the collection will contain 1, 2, 3, 4 and     5.     The rows will be added recursively to the collection.     Therefore, if a DataRow that contains a DetailGrid is added to     the collection, all the rows contained within the DetailGrid     will also be added to the collection.</remarks>
            <param name="startingRow">A reference to a Row object representing the row from which the selection begins.</param>
            <param name="endingRow">A reference to a Row object representing the row at which the selection ends.</param>
            <param name="keepCurrentSelection">true if the rows that have previously been selected should remain in the selection; false if only the newly selected rows should be selected.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the SelectedRowList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnClearComplete">
            <summary>Performs additional custom processes after clearing the contents of the SelectedRowList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new element into the SelectedRowList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after inserting a new element into the SelectedRowList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after removing an element from the SelectedRowList instance.</summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before setting a value in the SelectedRowList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SelectedRowList.ResetTo(Xceed.Grid.Row)">
            <summary>Clears the current selection of row and selects the specified Row.</summary>
            <param name="row">A reference to the Row to select.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.SortedColumnList">
            <summary>Represents the list of columns by which the data rows in the grid are sorted.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Add">
            <summary>Adds a column to the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Add(Xceed.Grid.Column)">
            <summary>Adds a column to the list.</summary>
            <returns>The index at which the column was added.</returns>
            <param name="column">A reference to the Column object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Add(Xceed.Grid.Column,System.Boolean)">
            <summary>Adds a column to the list.</summary>
            <returns>The index at which the column was added.</returns>
            <param name="column">A reference to the Column object to add to the list.</param>
            <param name="ascending">true if the column will sort the data rows in an ascending direction; false if the data rows are to be sorted in a descending direction.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Add(System.String)">
            <summary>Adds a column with the specified fieldname to the list.</summary>
            <remarks>    The data rows that are sorted by the newly added column     will be sorted in an ascending direction.</remarks>
            <param name="fieldName">A string representing the name of the column to add.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Add(System.String,System.Boolean)">
            <summary>Adds a column with the specified fieldname to the list.</summary>
            <param name="fieldName">A string representing the name of the column to add.</param>
            <param name="ascending">true if the column will sort the data rows in an ascending direction; false if the data rows are to be sorted in a descending direction.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.AddRange(Xceed.Grid.Column[])">
            <summary>Adds the elements of a column array to the end of the SortedColumnList collection.</summary>
            <param name="columns">An array of Column objects representing the columns to add to the end of the SortedColumnList collection.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Clear">
            <summary>Removes all columns from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Contains(Xceed.Grid.Column)">
            <summary>Retrieves a boolean value indicating if a specific column exists in the list.</summary>
            <returns>true if the column exists in the list; false otherwise.</returns>
            <param name="column">A reference to the Column object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.IndexOf(Xceed.Grid.Column)">
            <summary>Searches for the specified Column object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="column">A reference to the Column object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Insert">
            <summary>Inserts a column into the list at the specified index.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Insert(System.Int32,Xceed.Grid.Column)">
            <summary>Inserts a column into the list at the specified index.</summary>
            <remarks>    The data rows that are sorted by the newly inserted     column will be sorted in an ascending direction.</remarks>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="column">A reference to the Column object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Insert(System.Int32,Xceed.Grid.Column,System.Boolean)">
            <summary>Inserts a column into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="column">A reference to the Column object to insert.</param>
            <param name="ascending">true if the column will sort the data rows in an ascending direction; false if the data rows are to be sorted in a descending direction.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Insert(System.Int32,System.String)">
            <summary>Inserts a column into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="fieldName">A name of the column to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Insert(System.Int32,System.String,System.Boolean)">
            <summary>Inserts a the column with the specified fieldname into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the column.</param>
            <param name="fieldName">A string representing the name of the column to insert.</param>
            <param name="ascending">true if the column will sort the data rows in an ascending direction; false if the data rows are to be sorted in a descending direction.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the SortedColumnList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnClearComplete">
            <summary>Performs additional custom processes after clearing the contents of the SortedColumnList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new element into the SortedColumnList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after inserting a new element into the SortedColumnList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after removing an element from the SortedColumnList instance.</summary>
            <remarks>    If the position of the element is unknown, index is -1.     In that case, the Column) method needs to be called with the     value to retrieve the position.</remarks>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnSet(System.Int32,System.Object,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before setting a value in the SortedColumnList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>Performs additional custom processes after setting a value in the SortedColumnList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.Remove(Xceed.Grid.Column)">
            <summary>Removes the column from the list.</summary>
            <param name="column">A reference to the Column object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.RemoveAt(System.Int32)">
            <summary>Removes the column from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the column.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.SortedColumnList.ToString">
            <summary>Retrieves an SQL query-like string representing the OrderBy clause.</summary>
            <returns>An SQL query-like string representing the OrderBy clause.</returns>
        </member>
        <member name="P:Xceed.Grid.Collections.SortedColumnList.Item(System.Int32)">
            <summary>Gets the column at the specified index.</summary>
            <param name="index">The zero-based index at which to get the column.</param>
        </member>
        <member name="T:Xceed.Grid.Collections.VirtualListBase">
            <summary>Represents a list of virtualized grid elements.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VirtualListBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the list to the specified array.</summary>
            <param name="array">The array to which to copy the items.</param>
            <param name="startIndex">The zero-based index at which to start copying the items.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.VirtualListBase.Count">
            <summary>Gets the number of items contained in the list.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.VirtualListBase.IsFixedSize">
            <summary>Gets a value indicating if the list has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.VirtualListBase.IsReadOnly">
            <summary>Gets a value indicating if the list is read-only.</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.VirtualListBase.IsSynchronized">
            <summary>Gets a boolean value indicating if access to the list is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Xceed.Grid.Collections.VirtualListBase.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the list.</summary>
        </member>
        <member name="T:Xceed.Grid.Collections.VisualGridElementStyleList">
            <summary>Contains a list of VisualGridElementStyle objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.#ctor">
            <summary>Initializes a new instance of the VisualGridElementStyleList class specifying the VisualGridElementStyleList that will be used as a template to create the VisualGridElementStyleLists.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.#ctor">
            <summary>Initializes a new instance of the VisualGridElementStyleList class</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.#ctor(Xceed.Grid.Collections.VisualGridElementStyleList)">
            <summary>Initializes a new instance of the VisualGridElementStyleList class specifying the VisualGridElementStyleList that will be used as a template to create the VisualGridElementStyleLists.</summary>
            <param name="template">A reference to a VisualGridElementStyleList object that will be used as a template to create the VisualGridElementStyleLists.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.Add(Xceed.Grid.VisualGridElementStyle)">
            <summary>Adds a style to the list.</summary>
            <returns>The index at which the style was added.</returns>
            <param name="value">A reference to the VisualGridElementStyle object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.Clear">
            <summary>Removes all the styles from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.Contains(Xceed.Grid.VisualGridElementStyle)">
            <summary>Retrieves a boolean value indicating if a specific style exists in the list.</summary>
            <returns>true if the style exists in the list; false otherwise.</returns>
            <param name="value">A reference to the VisualGridElementStyle object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.IndexOf(Xceed.Grid.VisualGridElementStyle)">
            <summary>Searches for the specified VisualGridElementStyle object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the VisualGridElementStyle object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.Insert(System.Int32,Xceed.Grid.VisualGridElementStyle)">
            <summary>Inserts a style into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the style.</param>
            <param name="value">A reference to the VisualGridElementStyle object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnClear(System.Boolean@)">
            <summary>Performs additional custom processes when clearing the contents of the VisualGridElementStyleList instance.</summary>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnClearComplete">
            <summary>Performs additional custom processes when clearing the contents of the VisualGridElementStyleList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after insertion of a new style into the VisualGridElementStyleList instance.</summary>
            <param name="index">The zero-based index at which to insert the style.</param>
            <param name="value">The new value of the style at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes when removing a style from the the VisualGridElementStyleList instance.</summary>
            <param name="index">The zero-based index at which the style can be found.</param>
            <param name="value">The value of the style to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>Performs additional custom processes after setting a value in the VisualGridElementStyleList instance.</summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the style at index.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnStyleChanged(System.EventArgs)">
            <summary>Raises the StyleChanged event.</summary>
            <remarks>When overriding OnStyleChanged in a derived class, be sure to call the base class's OnStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.OnValidate(System.Object)">
            <summary>Performs validation of value.</summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.Remove(Xceed.Grid.VisualGridElementStyle)">
            <summary>Removes the style from the list.</summary>
            <param name="value">A reference to the VisualGridElementStyle object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Collections.VisualGridElementStyleList.RemoveAt(System.Int32)">
            <summary>Removes the style from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the style.</param>
        </member>
        <member name="P:Xceed.Grid.Collections.VisualGridElementStyleList.Item(System.Int32)">
            <summary>Gets or sets the style at the specified index.</summary>
            <param name="index">The zero-based index at which to get the style.</param>
        </member>
        <member name="E:Xceed.Grid.Collections.VisualGridElementStyleList.StyleChanged">
            <summary>Raised when a property value of one of the elements in the list has been changed or when a style is added or removed from the list.</summary>
        </member>
        <member name="N:Xceed.Grid.Editors">
            <summary>The Xceed.Grid.Editors namespace regroups all the classes which can be used to edit the content of cells.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.DisplayStyle">
            <summary>Value indicating how the contents of various cell editors are displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.DisplayStyle.Text">
            <summary>Only text is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.DisplayStyle.Image">
            <summary>Only an image is displayed.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.DisplayStyle.TextAndImage">
            <summary>Both an image and text are displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.Signs">
            <summary>Value representing the accepted sign(s), negative, positive or either, of the value entered in the GridNumericTextBox editor.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.Signs.Negative">
            <summary>Only the negative sign is accepted.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.Signs.Positive">
            <summary>Only the positive sign is accepted.</summary>
        </member>
        <member name="F:Xceed.Grid.Editors.Signs.Both">
            <summary>Both the negative and positive signs are accepted.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ActivatingControlEventArgs">
            <summary>Provides information regarding the cell whose content the control is about to edit.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ActivatingControlEventArgs.Cell">
            <summary>Gets a reference to the cell whose content is about to be edited.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.CellEditorEventArgs">
            <summary>Provides information on the Cell currently being edited as well as the Control used to edit the cell's content.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorEventArgs.#ctor">
            <summary>Initializes a new instance of the CellEditorEventArgs class specifying the Cell currently being edited as well as the Control used to edit the cell's content.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Initializes a new instance of the CellEditorEventArgs class specifying the Cell currently being edited as well as the Control used to edit the cell's content.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell currently being edited.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Boolean)">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorEventArgs.Cell">
            <summary>Gets the Cell being edited.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorEventArgs.Control">
            <summary>Gets the Control used to edit the cell's content.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.CellEditorManager">
            <summary>The CellEditorManager class allows for any control to be used as an editor to edit the content of a cells.</summary>
            <remarks>    CellEditorManagers can be created by deriving from the     CellEditorManager class and implementing the required     functionalities, by handling the events that are raised by the     CellEditorManager class, or by wrapping a control within an     instance of the CellEditorManager class.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.#ctor">
            <summary>Initializes a new instance of the CellEditorManager class specifying the control that will be used as a template to edit the content of cells, as well as other characteristics that will apply to the editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.#ctor(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the CellEditorManager class specifying the control that will be used as a template to edit the content of cells, as well as other characteristics that will apply to the editor.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="templateControl">A reference to a Control representing the control that will be used as a template to create the controls that will edit the content of cells.</param>
            <param name="inPlace">true if the Control is painted within the bounds of the cell; false otherwise.</param>
            <param name="handleActivationClick">Indicates if the control should handle the mouse click once it is activated. Only in the case where inPlace is set to true does it make sense for handleActivationClick to also be set to true.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.#ctor(System.Windows.Forms.Control,System.String,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the CellEditorManager class specifying the control that will be used as a template to edit the content of cells, as well as other characteristics that will apply to the editor.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="templateControl">A reference to a Control representing the control that will be used as a template to create the controls that will edit the content of cells.</param>
            <param name="propertyName">A string representing the property used to get the control's value.</param>
            <param name="inPlace">true if the Control is painted within the bounds of the cell; false otherwise.</param>
            <param name="handleActivationClick">Indicates if the control should handle the mouse click once it is activated. Only in the case where inPlace is set to true does it make sense for handleActivationClick to also be set to true.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.ActivateControl(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Activates the control that will be used to edit the content of the cell and raises the ActivatingControl event. Activates the control that will be used to edit the content of a cell.</summary>
            <remarks>    ActivateControl is called beforeIFormatProvider)     and before the control is visible.</remarks>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.A reference to a Cell object representing the cell to be edited.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.ActivateControlCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Activates the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.CalculateEditorBounds(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the editor and raises the QueryEditorBounds event.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the editor.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.CalculateEditorBoundsCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the editor.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the editor.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.CreateControl">
            <summary>Creates the Control that will be used to edit the content of cells.</summary>
            <returns>A Control that will be used to edit the content of cells. If CreateControlMode is set to CreateControlMode.ClonedInstance, a new instance of the control should be returned.</returns>
            <remarks>    In the case where CreateControlMode is overridden to     returned to CreateControlMode.SingleInstance (default), the     TemplateControl will be used directly. If CreateControlMode is     overridden to returned ClonedInstance, CreateControl should     also be overridden to return a cloned instance of the     TemplateControl.     To clone a control that does not expose or implement the     Clone method, the generic Control) method can be used.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.DeactivateControl(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Deactivates the control that will be used to edit the content of the cell and raises the DeactivatingControl event.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.DeactivateControlCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Deactivates the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.Dispose">
            <summary>Releases all resources.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.Dispose">
            <summary>Releases all resources.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.Dispose(System.Boolean)">
            <summary>Releases all resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.Finalize">
            <summary>Allows the object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetControlValue(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control and raises the GettingControlValue event. Retrieves the value assigned to the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.A reference to the value assigned to the control.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.     GetControlValueCore must return the value of the control     that is currently editing the cell and not the     TemplateControl.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetFittedHeight(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted height of the editor in pixels and raises the QueryFittedHeight event. Retrieves a value representing the fitted height of the cell editor in pixels.</summary>
            <returns>A value representing the fitted height of the editor in pixels. If -1, then no fitted height is required or desired.A value representing the fitted height of the cell editor in pixels.</returns>
            <param name="control">The Control that will be used to edit the content of the cell. Can be $$NULL$$ if the editor is not displayed.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the editor will be calculated.A value indicating in regards to what factors the fitted height of the row will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetFittedHeightCore(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted height of the editor in pixels.</summary>
            <returns>A value representing the fitted height of the editor in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="control">The Control that will be used to edit the content of the cell. Can be $$NULL$$ if the editor is not displayed.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the editor will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetFittedWidth(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted width of the editor in pixels and raises the QueryFittedWidth event. Retrieves a value representing the fitted width of the cell editor in pixels.</summary>
            <returns>A value representing the fitted width of the cell editor in pixels. If -1, then no fitted width is required or desired.A value representing the fitted width of the cell editor in pixels.</returns>
            <remarks>    The GetFittedWidth method must be called outside of the     calls to BeginInit and EndInit methods because the data is not     loaded into the grid until EndInit is called therefore, the     fitted width cannot be calculated until that moment.</remarks>
            <param name="control">The Control that will be used to edit the content of the cell. Can be $$NULL$$ if the editor is not displayed.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetFittedWidthCore(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted width of the editor in pixels.</summary>
            <returns>A value representing the fitted width of the cell editor in pixels. If -1, then no fitted width is required or desired.</returns>
            <param name="control">The Control that will be used to edit the content of the cell. Can be $$NULL$$ if the editor is not displayed.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.GetService(System.Type)">
            <summary>Returns an object that represents a service provided by the Component or by its Container.</summary>
            <returns>    An Object that represents a service provided by the     Component.     This value is $$NULL$$ if the Component does not provide     the specified service.</returns>
            <param name="service">A service provided by the Component.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.HandleActivationClick(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Point)">
            <summary>Gets a boolean value indicating if the control should handle the mouse click once it is activated.</summary>
            <returns>true if the control should handle the mouse click once it is activated; false otherwise.</returns>
            <remarks>    Only in the case where InPlace returns true should     HandleActivationClick return true.</remarks>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mousePosition">The position of the mouse in screen coordinates.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsActivationChar(Xceed.Grid.Cell,System.Char)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the char and raises the QueryActivationChar event. Retrieves a boolean value indicating if the control is activated by the char.</summary>
            <returns>true if the editor is activated by the char; false otherwise.true if the control is activated by the char; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that char.     If true, the control is activated and will immediately     receive an KeyEventArgs) event for that char.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="charCode">The character to test.The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsActivationCharCore(Xceed.Grid.Cell,System.Char)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the char.</summary>
            <returns>true if the editor is activated by the char; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that char.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsActivationKey(Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the key and raises the QueryActivationKey event. Retrieves a boolean value indicating if the control is activated by the key.</summary>
            <returns>true if the editor is activated by the key; false otherwise.true if the control is activated by the key; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that key.     If true, the control is activated and will immediately     receive an KeyEventArgs) event for that key.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="keyData">One of the Keys values.One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsActivationKeyCore(Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the key.</summary>
            <returns>true if the editor is activated by the key; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that key.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsInputChar(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Char)">
            <summary>Determines if a character is an input character that the editor recognizes and raises the QueryInputChar event. Determines if a character is an input character that the control recognizes.</summary>
            <returns>true if the character should be sent directly to the editor and not preprocessed; false otherwise.true if the character should be sent directly to the control and not preprocessed; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="charCode">The character to test.The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsInputCharCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Char)">
            <summary>Determines if a character is an input character that the editor recognizes.</summary>
            <returns>true if the character should be sent directly to the editor and not preprocessed; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsInputKey(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing and raises the QueryInputKey event. Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.true if the specified key is a regular input key; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="keyData">One of the Keys values.One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsInputKeyCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating if the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.RaiseEvent(System.Object,System.EventArgs)">
            <summary>Raises the specified event.</summary>
            <param name="eventKey">The object that owns the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.SetControlAppearance(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell and raises the SettingControlAppearance event.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <remarks>    Only in the case where the appearance of the underyling     TemplateControl is different depending on the cell should the     appearance properties of the control be changed in the     SetControlAppearanceCore method. In all other cases, the     properties of the underlying control should be changed in the     constructor.</remarks>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.SetControlValue(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control and raises the SettingControlValue event. Assigns a value to the control.</summary>
            <remarks>SetControlValue is called after Cell).</remarks>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.Validate(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Validates if the editor's value is valid and can be assigned to its underlying cell as well as raises the Validating event.</summary>
            <returns>true if the value is valid; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CellEditorManager.ValidateCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Validates if the editor's value is valid and can be assigned to its underlying cell.</summary>
            <returns>true if the value is valid; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.Container">
            <summary>Gets the IContainer associated with the ISite when implemented by a class.</summary>
            <remarks>    $$NULL$$ for the Container property indicates that the     IComponent instance does not have an ISite.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.CreateControlMode">
            <summary>Gets a value representing the mode in which the control used to edit the content of cells is created.</summary>
            <remarks>    The CellEditorDisplayConditions properties do not support     the CellEditorDisplayConditions.MouseOverCell, MouseOverRow,     and Always values in the case where CreateControlMode is set to     SingleInstance.     In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the TemplateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the TemplateControl when needed.     If CreateControlMode is overridden to returned     ClonedInstance, CreateControl should also be overridden to     return a cloned instance of the TemplateControl.     To clone a control that does not expose or implement the     Clone method, the generic Control) method can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.DesignMode">
            <summary>Gets a value that indicates whether the Component is currently in design mode.</summary>
            <remarks>    The design mode indicator is stored in the ISite;     therefore, if the Component does not have an ISite associated     with it, this property is always false.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.Events">
            <summary>Gets a list of the events to which the CellEditorManager is subscribed.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.InPlace">
            <summary>Gets a boolean value indicating if the Control is painted within the bounds of the cell.</summary>
            <remarks>If InPlace is false, Point) will be ignored.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.Site">
            <summary>Gets or sets the ISite associated with the IComponent.</summary>
            <remarks>    Sites can also serve as a repository for     container-specific, per-component information, such as the     component name.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CellEditorManager.TemplateControl">
            <summary>Gets the Control that will be used as a template to create the controls that will edit the content of cells.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.ActivatingControl">
            <summary>Raised to activate the control that will be used to edit the content of its corresponding cell.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.DeactivatingControl">
            <summary>Raised to deactivate the control that was used to edit the content of its corresponding cell.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.Disposed">
            <summary>Represents the method that handles the Disposed event of a component.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.GettingControlValue">
            <summary>Raised when retrieving the value assigned to the editor.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryActivationChar">
            <summary>Raised when a character is pressed to determine if it the editor is activated by the character.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryActivationKey">
            <summary>Raised when a key is pressed to determine if it the editor is activated by the key.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryEditorBounds">
            <summary>Raised when calculating the bounds of the editor.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryFittedHeight">
            <summary>Raised to calculate the fitted height of the editor in pixels.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryFittedWidth">
            <summary>Raised to calculate the fitted width of the editor in pixels.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryInputChar">
            <summary>Raised to determine if a character is an input character that the editor recognizes.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.QueryInputKey">
            <summary>Raised to determine whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.SettingControlAppearance">
            <summary>Raised to set the appearance of the control that will be used to edit the content of its corresponding cell.</summary>
            <remarks>    Only in the case where the appearance of the underyling     control is different depending on the cell should the     appearance properties of the control be changed in the     SettingControlAppearance event.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.SettingControlValue">
            <summary>Raised when the value of a cell is about to be assigned to the control used to edit its content.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CellEditorManager.Validating">
            <summary>Raised when validating the editor's value to determine if it can be assigned to its underlying cell.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.CheckBoxEditor">
            <summary>The CheckBoxEditor class represents an editor that can be used to edit the content of cells which have a boolean datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.#ctor">
            <summary>Initializes a new instance of the CheckBoxEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.#ctor">
            <summary>Initializes a new instance of the CheckBoxEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.#ctor(Xceed.Editors.WinCheckBox)">
            <summary>Initializes a new instance of the CheckBoxEditor class specifying the WinCheckBox control that will be used as a template.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="template">The WinCheckBox to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.#ctor(Xceed.Editors.WinCheckBox,System.Boolean)">
            <summary>Initializes a new instance of the CellEditorManager class specifying the control that will be used as a template to edit the content of boolean cells, as well as other characteristics that will apply to the editor.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="templateControl">A reference to a Control representing the control that will be used as a template to create the controls that will edit the content of boolean cells.</param>
            <param name="handleActivationClick">Indicates if the control should handle the mouse click once it is activated.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.CalculateEditorBoundsCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the editor.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="bounds">A Rectangle representing the bounds of the editor.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.CreateControl">
            <summary>Creates the Control that will be used to edit the content of cells.</summary>
            <returns>A Control that will be used to edit the content of cells. If CreateControlMode is set to CreateControlMode.ClonedInstance, a new instance of the control should be returned.</returns>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the TemplateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the TemplateControl when needed.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.IsActivationCharCore(Xceed.Grid.Cell,System.Char)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the char.</summary>
            <returns>true if the editor is activated by the char; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that char.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.IsActivationKeyCore(Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the key.</summary>
            <returns>true if the editor is activated by the key; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that key.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.OnFitSizeToCellChanged(System.EventArgs)">
            <summary>Raises the FitSizeToCellChanged event.</summary>
            <remarks>When overriding OnFitSizeToCellChanged in a derived class, be sure to call the base class's OnFitSizeToCellChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.ResetFitSizeToCell">
            <summary>Resets the value of the FitSizeToCell property to its default value, DefaultFitSizeToCell.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CheckBoxEditor.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.CheckBoxEditor.CreateControlMode">
            <summary>Gets a value representing the mode in which the control used to edit the content of cells is created.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the TemplateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the TemplateControl when needed.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CheckBoxEditor.DefaultFitSizeToCell">
            <summary>Gets the default value of the FitSizeToCell property.</summary>
            <remarks>    When overriding DefaultFitSizeToCell in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CheckBoxEditor.FitSizeToCell">
            <summary>Gets or sets a boolean value indicating if the control should completely occupy the cell.</summary>
            <remarks>    If true, the check box's state (checked/unchecked) will     change wherever the users clicks in the cell. If false, the     check box will only occupy a 13 by 13 rectangle that will let     the cell's background show and the check will change only if     you click on the check box.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CheckBoxEditor.TemplateControl">
            <summary>Gets the Control that will be used as a template to create the controls that will edit the content of boolean cells.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.CheckBoxEditor.FitSizeToCellChanged">
            <summary>Raised when the value of the FitSizeToCell property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ComboBoxEditor">
            <summary>The ComboBoxEditor class represents an editor that can be used to edit the content of cells which have an ID/Value mapping.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor">
            <summary>Initializes a new instance of the ComboBoxEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor">
            <summary>Initializes a new instance of the ComboBoxEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor(System.Object,System.String,System.String)">
            <summary>Initializes a new instance of the ComboBoxEditor class specifying its data binding information.</summary>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the ComboBoxEditor class specifying its data binding information.</summary>
            <remarks>    Only the column names specified by displayFormat and the     valueMember parameters will be created in the dropdown. For     example, setting displayFormat to "FirstName LastName" will     result in only the "FirstName" and "LastName" columns being     created in the dropdown and, for example, "Naomi Robitaille"     when the item is selected. The column specified by valueMember     will also be created, however it will not visible unless it is     also part of the displayFormat.</remarks>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
            <param name="displayFormat">The format with which the selected item is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor(System.Object,System.String,System.String,System.String,Xceed.Editors.ImagePosition,System.Drawing.Size,System.String)">
            <summary>Initializes a new instance of the ComboBoxEditor class specifying its data binding information.</summary>
            <remarks>    Only the column names specified by displayFormat and the     valueMember parameters will be created in the dropdown. For     example, setting displayFormat to "FirstName LastName" will     result in only the "FirstName" and "LastName" columns being     created in the dropdown and, for example, "Naomi Robitaille"     when the item is selected. The column specified by valueMember     will also be created, however it will not visible unless it is     also part of the displayFormat.</remarks>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">The field of the dataSource from which to draw the value.</param>
            <param name="imageMember">A string that specifies the field of the dataSource from which to draw the image.</param>
            <param name="imagePosition">An ImagePosition value representing the position of the image.</param>
            <param name="imageSize">A Size structure representing the size of the editors's image.</param>
            <param name="displayFormat">The format with which the selected item is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.#ctor(Xceed.Editors.WinComboBox)">
            <summary>Initializes a new instance of the ComboBoxEditor class specifying the WinComboBox control that will be used as a template.</summary>
            <param name="template">The WinComboBox to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.IsInputKeyCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetDisplayFormat">
            <summary>Resets the value of the DisplayFormat property to its default value, DefaultDisplayFormat.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImageAlignment">
            <summary>Resets the value of the ImageAlignment property to its default value, DefaultImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImageMember">
            <summary>Resets the value of the ImageMember property to its default value, DefaultImageMember.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImagePadding">
            <summary>Resets the value of the ImagePadding property to its default value, DefaultImagePadding.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImagePosition">
            <summary>Resets the value of the ImagePosition property to its default value, DefaultImagePosition.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImageSize">
            <summary>Resets the value of the ImageSize property to its default value, DefaultImageSize.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetImageStyle">
            <summary>Resets the value of the ImageStyle property to its default value, DefaultImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetPreserveImageAspectRatio">
            <summary>Resets the value of the PreserveImageAspectRatio property to its default value, DefaultPreserveImageAspectRatio.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.ResetValueMember">
            <summary>Resets the value of the ValueMember property to its default value, DefaultValueMember.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ComboBoxEditor.SetDataBinding(System.Object,System.String)">
            <summary>Sets the DataSource and DataMember properties at run time.</summary>
            <remarks>    The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the     WinComboBox, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the WinComboBox.</remarks>
            <param name="dataSource">The data source used to populate the WinComboBox, typed as Object.</param>
            <param name="dataMember">A string that specifies the table to bind to within the object returned by the DataSource property.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.Columns">
            <summary>Gets a list representing the collection of the columns contained in the ComboBoxEditor.</summary>
            <remarks>    This property enables you to obtain a reference to the     list of columns that are currently stored in the     ComboBoxEditor. With this reference, you can add columns,     remove columns, and obtain a count of the columns in the     collection.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.DataMember">
            <summary>Gets or sets the table to bind to within the object returned by the DataSource property.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.DataSource">
            <summary>Gets or sets the data source used to populate the ComboBoxEditor</summary>
            <remarks>    If the DataSource contains more than one table, you must     set the DataMember property to a string that represents the     name of the table to bind to.     The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                                If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the     ComboBoxEditor, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the ComboBoxViewer.     If an existing value is changed in the jagged array from     outside of the ComboBoxEditor, for example the text of one of     the elements, in order for the changes to be reflected in the     ComboBoxEditor, the jagged array must be reassigned to     viewer.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.DisplayFormat">
            <summary>Gets or sets the format with which the selected item is displayed in the ComboBoxEditor.</summary>
            <remarks>    The default display format is the names (Name) of each     column separated by a comma (,). For example, if the combobox     contains 3 columns named "LastName", "FirstName", and "Age",     the display format will be "LastName, FirstName, Age". When an     item is selected, the display format will be resolved to the     values of the correspond columns. For example: "Robitaille,     Naomi, 2".</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImageAlignment">
            <summary>Gets or sets the alignment of the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImageMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImagePadding">
            <summary>Gets or sets the padding surrounding the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImagePosition">
            <summary>Gets or sets the position of the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImageSize">
            <summary>Gets or sets the size of the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ImageStyle">
            <summary>Gets or sets the style with which the image is displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.Items">
            <summary>Gets a list representing the collection of the items contained in the ComboBoxEditor.</summary>
            <remarks>    This property enables you to obtain a reference to the     list of items that are currently stored in the ComboBoxEditor.     With this reference, you can add items, remove items, and     obtain a count of the items in the collection.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.MaskPromptChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.TemplateControl">
            <summary>Gets the Control that will be used as a template to create the controls that will edit the content of cells.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ComboBoxEditor.ValueMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the value.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.ComboBoxEditor.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.ComboBoxEditor.MaskPromptCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ControlViewer">
            <summary>OBSOLETE: The ControlViewer class is obsolete and has been replaced by the CellViewerManager class. Allows for any control to be used as a cell viewer.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ControlViewer.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>Initializes a new instance of the ControlViewer class specifying the control to use to view the content of a cell as well as the property used to set the control's value.</summary>
            <param name="control">A reference to a Control that will be used to view the content of a cell.</param>
            <param name="propertyName">A string representing the property used to set the control's value.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ControlViewer.OnSettingControlValue(Xceed.Grid.Editors.SettingControlValueEventArgs)">
            <summary>Raises the SettingControlValue event.</summary>
            <remarks>When overriding OnSettingControlValue in a derived class, the base implementation must be called first and then check if e.Handled is truebefore calling your own implementation.</remarks>
            <param name="e">A SettingControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.ControlViewer.Control">
            <summary>Gets a reference to the underlining control used to view the content of a cell.</summary>
            <remarks>    Properties of the control should be set after the     viewer has been assigned to a cell or column.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.ControlViewer.PropertyName">
            <summary>Gets a value representing the property used to set the control's value.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.ControlViewer.SettingControlValue">
            <summary>Raised when the property used to set the control's value is being set.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.CustomEditor">
            <summary>OBSOLETE: The CustomEditor class is obsolete and has been replaced by the CellEditorManager class. Allows for any control to be used as a cell editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.#ctor(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>Initializes a new instance of the CustomEditor class specifying the control to use to edit the content of a cell, the property used to get or set the control's value as well as if the control should appear inplace.</summary>
            <param name="control">A reference to a Control that will be used to edit the content of a cell.</param>
            <param name="propertyName">A string representing the property used to set the control's value.</param>
            <param name="inPlace">true if the control should appear within the boundaries of the cell it is editing; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.IsActivationChar(System.Char)">
            <summary>Retrieves a boolean value indicating if the control is activated by the char.</summary>
            <returns>true if the control is activated by the char; false otherwise.</returns>
            <remarks>    If true, the control is activated and will immediately     receive a KeyDown event for that char.</remarks>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.IsActivationKey(System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the control is activated by the key.</summary>
            <returns>true if the control is activated by the key; false otherwise.</returns>
            <remarks>    If true, the control is activated and will immediately     receive a KeyDown event for that key.</remarks>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the control recognizes.</summary>
            <returns>true if the character should be sent directly to the control and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.OnActivatingControl(Xceed.Grid.Editors.ActivatingControlEventArgs)">
            <summary>Raises the ActivatingControl event.</summary>
            <remarks>When overriding OnActivatingControl in a derived class, be sure to call the base class's OnActivatingControl method so that registered delegates receive the event.</remarks>
            <param name="e">An ActivatingControlEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.OnGettingControlValue(Xceed.Grid.Editors.GettingControlValueEventArgs)">
            <summary>Raises the GettingControlValue event.</summary>
            <remarks>When overriding OnGettingControlValue in a derived class, the base implementation must be called first and then check if e.Handled is truebefore calling your own implementation.</remarks>
            <param name="e">A GettingControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.OnHandleActivationClickChanged(System.EventArgs)">
            <summary>Raises the HandleActivationClickChanged event.</summary>
            <remarks>When overriding OnHandleActivationClickChanged in a derived class, be sure to call the base class's OnHandleActivationClickChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.CustomEditor.OnSettingControlValue(Xceed.Grid.Editors.SettingControlValueEventArgs)">
            <summary>Raises the SettingControlValue event.</summary>
            <remarks>When overriding OnSettingControlValue in a derived class, the base implementation must be called first and then check if e.Handled is truebefore calling your own implementation.</remarks>
            <param name="e">A SettingControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.CustomEditor.Control">
            <summary>Gets the control used to edit cells.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.CustomEditor.HandleActivationClick">
            <summary>Gets or sets a boolean value indicating if the control should activate on the mouse click.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CustomEditor.InPlace">
            <summary>Gets a boolean value indicating if the rectangle of the cell editor should be painted with the same size as the cell's client rectangle.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.CustomEditor.PropertyName">
            <summary>Gets a value representing the property used to set the control's value.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CustomEditor.ActivatingControl">
            <summary>Raised when the control used to edit the content a cell is being activated.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CustomEditor.GettingControlValue">
            <summary>Raised when the value of the property used to set the control's value is being retrieved.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CustomEditor.HandleActivationClickChanged">
            <summary>Raised when the value of the HandleActivationClick property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.CustomEditor.SettingControlValue">
            <summary>Raised when the property used to set the control's value is being set.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.DateEditor">
            <summary>The DateEditor class represents an editor that can be used to edit the content of cells which have a DateTime datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.#ctor">
            <summary>Initializes a new instance of the DateEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.#ctor">
            <summary>Initializes a new instance of the DateEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the DateEditor class specifying if the calendar. can be shown.</summary>
            <param name="allowDropDown">true if the calendar can be shown; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.#ctor(Xceed.Editors.WinDatePicker)">
            <summary>Initializes a new instance of the DateEditor class specifying the WinDatePicker control that will be used as a template.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="template">The WinDatePicker to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.IsInputKeyCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.DateEditor.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.DateEditor.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.DateEditor.MaskPromptChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.DateEditor.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.DateEditor.TemplateControl">
            <summary>Gets the WinDatePicker control that will be used as a template to create the controls that will edit the content of cells which have a DateTime datatype.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.DateEditor.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.DateEditor.MaskPromptCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GettingControlValueEventArgs">
            <summary>Provides information regarding the value that is to be displayed by the custom editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GettingControlValueEventArgs.Handled">
            <summary>Gets or sets a boolean value indicating if the editor can handle the value.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GettingControlValueEventArgs.Value">
            <summary>Gets or sets the value that will be modified by the editor.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GettingEditorControlValueEventArgs">
            <summary>Provides information on the Cell currently being edited, the Control used to edit the cell's content, as well as the cell's value and its datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.GettingEditorControlValueEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type,System.Object)">
            <summary>Initializes a new instance of the CellEditorEventArgs class specifying the Cell currently being edited, Control used to edit the cell's content, as well as the cell's value and its datatype.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell currently being edited.</param>
            <param name="valueDataType">The datatype of the cellValue.</param>
            <param name="cellValue">The Cell's value.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.GettingEditorControlValueEventArgs.CellValue">
            <summary>Gets or sets the Cell's value.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GettingEditorControlValueEventArgs.ValueDataType">
            <summary>Gets the datatype of the CellValue.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GridCalculatorBox">
            <summary>OBSOLETE: The GridCalculatorBox class is obsolete and has been replaced by the NumericEditor and NumericViewer classes. Represents a control that provides mathematical operations to change the value of a cell.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.#ctor">
            <summary>Initializes a new instance of the GridCalculatorBox editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.HidePanel">
            <summary>Hides the calculator portion of the GridCalculatorBox editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.IsInputChar(System.Char)">
            <summary>Determines if a character is an input character that the control recognizes.</summary>
            <returns>true if the character should be sent directly to the control and not preprocessed; false otherwise.</returns>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnFontChanged(System.EventArgs)">
            <summary>Raises the FontChanged event.</summary>
            <remarks>When overriding OnFontChanged in a derived class, be sure to call the base class's OnFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <remarks>When overriding OnGotFocus in a derived class, be sure to call the base class's OnGotFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnLeave(System.EventArgs)">
            <summary>Raises the Leave event.</summary>
            <remarks>When overriding OnLeave in a derived class, be sure to call the base class's OnLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnLostFocus(System.EventArgs)">
            <summary>Raises the LostFocus event.</summary>
            <remarks>When overriding OnLostFocus in a derived class, be sure to call the base class's OnLostFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMaxLengthChanged(System.EventArgs)">
            <summary>Raises the MaxLengthChanged event.</summary>
            <remarks>When overriding OnMaxLengthChanged in a derived class, be sure to call the base class's OnMaxLengthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMouseEnter(System.EventArgs)">
            <summary>Raises the Leave event.</summary>
            <remarks>When overriding OnMouseEnter in a derived class, be sure to call the base class's OnMouseEnter method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMouseLeave(System.EventArgs)">
            <summary>Raises the Leave event.</summary>
            <remarks>When overriding OnMouseLeave in a derived class, be sure to call the base class's OnMouseLeave method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseMove event.</summary>
            <remarks>When overriding OnMouseMove in a derived class, be sure to call the base class's OnMouseMove method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Raises the Paint event.</summary>
            <remarks>When overriding OnPaint in a derived class, be sure to call the base class's OnPaint method so that registered delegates receive the event.</remarks>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.SendKey(System.Char)">
            <summary>Simulates the pressing of the key that was clicked.</summary>
            <param name="key">A char representing the key that was clicked.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>Performs the work of setting the specified bounds of the GridCalculatorBox editor.</summary>
            <param name="x">The new Left property value of the editor.</param>
            <param name="y">The new Right property value of the editor.</param>
            <param name="width">The new Width property value of the editor.</param>
            <param name="height">The new Height property value of the editor.</param>
            <param name="boundsSpecified">A bitwise combination of the BoundsSpecified values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.ShowPanel">
            <summary>Shows the calculator portion of the GridCalculatorBox editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCalculatorBox.TogglePanel">
            <summary>Shows or hides the calculator portion of the GridCalculatorBox editor depending on its current state.</summary>
            <remarks>    If the calculator is currently hidden it will be shown;     if it is visible, it will be hidden.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCalculatorBox.DefaultSize">
            <summary>Gets the default value of the Size property.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.     When overriding DefaultSize in a derived class, the value     returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCalculatorBox.Expression">
            <summary>Gets the mathematical expression used to calculate Value.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCalculatorBox.MaxLength">
            <summary>Gets or sets the maximum number of characters that can be entered in the GridCalculatorBox editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCalculatorBox.Text">
            <summary>Gets or sets the text associated with the GridCalculatorBox editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCalculatorBox.Value">
            <summary>Gets or sets the value calculated by the GridCalculatorBox editor.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridCalculatorBox.MaxLengthChanged">
            <summary>Raised when the value of the MaxLength property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GridCheckBox">
            <summary>OBSOLETE: The GridCheckBox class is obsolete and has been replaced by the CheckBoxEditor and CheckBoxViewer classes. Represents a checkbox that is used to view and edit the content of cells which have a boolean data type.</summary>
            <remarks>    If the FlatStyle property of the control is set to     System, then the CheckAlign property cannot be set and     therefore the control's alignment within the cell cannot be     changed.     Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridCheckBox.#ctor">
            <summary>Initializes a new instance of the GridCheckBox editor with a Flat appearance. This editor is used by default to edit the content of cells which have a boolean datatype.</summary>
            <remarks>    If the FlatStyle property of the control is set to     System, then the CheckAlign property cannot be set and     therefore the control's alignment within the cell cannot be     changed.     Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridCheckBox.FitToCell">
            <summary>Gets or sets a boolean value indicating if the control should completely occupy the cell.</summary>
            <remarks>    If true, the check box's state (checked/unchecked) will     change wherever the users clicks in the cell. If false, the     check box will only occupy a 13 by 13 rectangle that will let     the cell's background show and the check will change only if     you click on the check box.</remarks>
        </member>
        <member name="T:Xceed.Grid.Editors.GridComboBox">
            <summary>OBSOLETE: The GridComboBox class is obsolete and has been replaced by the ComboBoxEditor and ComboBoxViewer classes. Represents a combobox which is used to both view and edit the content of cells.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridComboBox.#ctor">
            <summary>Initializes a new instance of the GridComboBox control with a DropDownList style.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridComboBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>Raises the DrawItem event.</summary>
            <remarks>When overriding OnDrawItem in a derived class, be sure to call the base class's OnDrawItem method so that registered delegates receive the event.</remarks>
            <param name="e">A DrawItemEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridComboBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>Raises the MeasureItem event.</summary>
            <remarks>When overriding OnMeasureItem in a derived class, be sure to call the base class's OnMeasureItem method so that registered delegates receive the event.</remarks>
            <param name="e">A MeasureItemEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.DisplayStyle">
            <summary>Gets or sets a value indicating how the content of the GridComboBox will be displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.ImageAlign">
            <summary>Gets or sets the alignment of the images in the GridComboBox.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.ImageList">
            <summary>Gets or sets the list of images that will be used by the GridComboBox when needed.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.ImageMaps">
            <summary>Gets a list of values which are mapped to an image in the GridComboBox's ImageList property.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.TextAlign">
            <summary>Gets the alignment of the text in the GridComboBox.</summary>
            <remarks>    The alignment of the GridComboBox's text will be the same     as the cell's whose content is being edited.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridComboBox.Trimming">
            <summary>Gets a value indicating how text displayed in the editor will be trimmed when it exceeds the edges of the editor.</summary>
            <remarks>    The trimming of the GridComboBox's text will be the same     as the cell's whose content is being edited.</remarks>
        </member>
        <member name="T:Xceed.Grid.Editors.GridDateTimePicker">
            <summary>OBSOLETE: The GridDateTimePicker class is obsolete and has been replaced by the DateEditor and DateViewer classes. Represents a datetime picker used to edit to content of cells which have a DateTime datatype.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridDateTimePicker.#ctor">
            <summary>Initializes a new instance of the GridDateTimePicker control. This editor is used by default to edit the content of cells which have a datetime datatype.</summary>
            <remarks>    If the cell contains a null or DBNull value, then the     GridDateTimePicker control will appear with its checkbox     unchecked.     Properties of the control should be set after the     viewer has been assigned to a cell or column.</remarks>
        </member>
        <member name="T:Xceed.Grid.Editors.GridImageBox">
            <summary>OBSOLETE: The GridImageBox class is obsolete and has been replaced by the ImageViewer class. Represents a viewer that is used to display images in a cell.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridImageBox.#ctor">
            <summary>Initializes a new instance of the GridImageBox class.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridImageBox.GetImage(System.Object)">
            <summary>Returns the displayed image.</summary>
            <returns>An Image corresponding to the cell's value.</returns>
            <param name="cellValue">An object representing the cell's value.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.GridMaskedTextBox">
            <summary>OBSOLETE: The GridMaskedTextBox class is obsolete and has been replaced by the TextEditor and TextViewer classes. Represents a textbox which uses a mask to edit the content of cells.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.#ctor">
            <summary>Initializes a new instance of the GridMaskedTextBox class.</summary>
            <remarks>    Properties of the control should be set after the     control has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.Cut">
            <summary>Moves the current selection in the GridMaskedTextBox to the clipboard.</summary>
            <remarks>    The base implementation of Cut has been shadowed because     elements of the Mask in the editor need to remain.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.IsCharValid(System.Char,System.Char)">
            <summary>Verifies if a character is valid for a specific mask.</summary>
            <returns>true if is valid for the specified mask character; false otherwise.</returns>
            <remarks>When overriding MaskChars in a derived class, IsCharValid must also be overridden to return true if the inputted char is valid for the new mask character. If MaskChars is overridden to add chars to the supported mask chars, then the base implementation of IsCharValid should be called before your own. If all new chars are provided, then the base implementation does not need to be called.</remarks>
            <param name="maskChar">The character representing the mask.</param>
            <param name="charToValidate">The character to validate against the mask character.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <remarks>When overriding OnGotFocus in a derived class, be sure to call the base class's OnGotFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyUp event.</summary>
            <remarks>When overriding OnKeyUp in a derived class, be sure to call the base class's OnKeyUp method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnMaskChanged(System.EventArgs)">
            <summary>Raises the MaskChanged event.</summary>
            <remarks>When overriding OnMaskChanged in a derived class, be sure to call the base class's OnMaskChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseDown event.</summary>
            <remarks>When overriding OnMouseDown in a derived class, be sure to call the base class's OnMouseDown method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>Raises the MouseUp event.</summary>
            <remarks>When overriding OnMouseUp in a derived class, be sure to call the base class's OnMouseUp method so that registered delegates receive the event.</remarks>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnOverwriteChanged(System.EventArgs)">
            <summary>Raises the OverwriteChanged event.</summary>
            <remarks>When overriding OnOverwriteChanged in a derived class, be sure to call the base class's OnOverwriteChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnRawTextChanged(System.EventArgs)">
            <summary>Raises the RawTextChanged event.</summary>
            <remarks>When overriding OnRawTextChanged in a derived class, be sure to call the base class's OnRawTextChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnSelectOnFocusChanged(System.EventArgs)">
            <summary>Raises the SelectOnFocus event.</summary>
            <remarks>When overriding OnSelectOnFocusChanged in a derived class, be sure to call the base class's OnSelectOnFocusChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnStrictValidationChanged(System.EventArgs)">
            <summary>Raises the StrictValidationChanged event.</summary>
            <remarks>When overriding OnStrictValidationChanged in a derived class, be sure to call the base class's OnStrictValidationChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>Raises the Validating event.</summary>
            <remarks>The base implementation of OnValidating must be called prior to your own in order to assure that the value entered into the editor is an acceptable value. When overriding OnValidating in a derived class, be sure to call the base class's OnValidating method so that registered delegates receive the event.</remarks>
            <param name="e">A CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.OnValidationError(System.EventArgs)">
            <summary>Raises the ValidationError event.</summary>
            <remarks>When overriding OnValidationError in a derived class, be sure to call the base class's OnValidationError method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.Paste">
            <summary>Replaces the current selection in the GridMaskedTextBox with the contents of the clipboard</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.GridMaskedTextBox.Paste">
            <summary>Replaces the current selection in the GridMaskedTextBox with the contents of the clipboard</summary>
            <remarks>    Pasting is done regardless of the value of the     StrictValidation property. When pasting, mask literals are     matched to pasted characters when possible.Pasted text     is not formatted according to casing info contained in     Mask property.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.BorderStyle">
            <summary>Gets or sets the border style for the control.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.CharacterCasing">
            <summary>Gets or sets whether the GridMaskedTextBox control modifies the case of characters as they are typed.</summary>
            <remarks>    You should use the &lt; and &gt; signs in the Mask     property to apply a casing to the text entered in the     GridMaskedTextBox rather than this property. For example,     setting the Mask property to "&gt;&amp;&amp;&amp;&amp;" will     result in limiting the input to any 4 printable characters in     upper case.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.Mask">
            <summary>Gets or sets the mask used to edit the content of a cell.</summary>
            <remarks>    The casing characters only affect the characters entered     by keyboard when they are the first characters of the     mask. Casing characters located anywhere else are considered to     be literals.              The following table provides a list of the default mask         characters:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all inputted characters                     to lowercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                       </remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.MaskChars">
            <summary>Gets an array containing the possible masking characters.</summary>
            <remarks>             The following table provides a list of the default mask         characters:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all inputted characters                     to lowercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                  When overriding MaskChars in a derived class,         Char) must also be overridden to return true if the         inputted char is valid for the new mask character.     </remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.Overwrite">
            <summary>Gets or sets a boolean value indicating if existing text in the GridMaskedTextBox can be overwritten when keys are pressed.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.RawText">
            <summary>Gets or sets the raw (non-formatted) text entered in the GridMaskedTextBox without the literals of the mask.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.SelectOnFocus">
            <summary>Gets or sets a boolean value indicating if the entire content of the GridMaskedTextBox should be selected when it gets focus.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.StrictValidation">
            <summary>Gets or sets a boolean value indicating whether the editor's content should be validated while it is being entered.</summary>
            <remarks>    If set to false, the content will only be validated in     the Validating event.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridMaskedTextBox.Text">
            <summary>Gets or sets the formatted text entered in the GridMaskedTextBox.</summary>
            <remarks>    If the Mask property contains info about the casing that     should be used (ie. this.Mask starts with casing characters),     affecting Text directly will modify the casing of the assigned     text accordingly.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.MaskChanged">
            <summary>Raised when the valus of the Mask property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.OverwriteChanged">
            <summary>Raised when the value of the Overwrite property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.RawTextChanged">
            <summary>Raised when the value of the RawText property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.SelectOnFocusChanged">
            <summary>Raised when the value of the SelectOnFocus property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.StrictValidationChanged">
            <summary>Raised when the value of the StrictValidation property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridMaskedTextBox.ValidationError">
            <summary>Raised when the text entered into the editor does not match the mask.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GridNumericTextBox">
            <summary>OBSOLETE: The GridNumericTextBox class is obsolete and has been replaced by the NumericEditor and NumericViewer classes. Represents a textbox which edits cells whose content is a numeric value.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.#ctor">
            <summary>Initializes a new instance of the GridNumericTextBox class.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnAllowedSignsChanged(System.EventArgs)">
            <summary>Raises the AllowedSignsChanged event.</summary>
            <remarks>When overriding OnAllowedSignsChanged in a derived class, be sure to call the base class's OnAllowedSignsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnDecimalsChanged(System.EventArgs)">
            <summary>Raises the DecimalsChanged event.</summary>
            <remarks>When overriding OnDecimalsChanged in a derived class, be sure to call the base class's OnDecimalsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnFormatProviderChanged(System.EventArgs)">
            <summary>Raises the FormatProviderChanged event.</summary>
            <remarks>When overriding OnFormatProviderChanged in a derived class, be sure to call the base class's OnFormatProviderChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnFormatSpecifierChanged(System.EventArgs)">
            <summary>Raises the FormatSpecifierChanged event.</summary>
            <remarks>When overriding OnFormatSpecifierChanged in a derived class, be sure to call the base class's OnFormatSpecifierChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <remarks>When overriding OnGotFocus in a derived class, be sure to call the base class's OnGotFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyDown event.</summary>
            <remarks>When overriding OnKeyDown in a derived class, be sure to call the base class's OnKeyDown method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>Raises the KeyPress event.</summary>
            <remarks>When overriding OnKeyPress in a derived class, be sure to call the base class's OnKeyPress method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyPressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>Raises the KeyUp event.</summary>
            <remarks>When overriding OnKeyUp in a derived class, be sure to call the base class's OnKeyUp method so that registered delegates receive the event.</remarks>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnLengthChanged(System.EventArgs)">
            <summary>Raises the LengthChanged event.</summary>
            <remarks>When overriding OnLengthChanged in a derived class, be sure to call the base class's OnLengthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnLostFocus(System.EventArgs)">
            <summary>Raises the LostFocus event.</summary>
            <remarks>When overriding OnLostFocus in a derived class, be sure to call the base class's OnLostFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnSelectOnFocusChanged(System.EventArgs)">
            <summary>Raises the SelectOnFocusChanged event.</summary>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>Raises the Validating event.</summary>
            <remarks>    Only significant digits will determine if a value entered     is valid. For example, if the user enters 00000123.4560000,     then the value to be validated will be 123.456.The base     implementation of OnValidating must be called prior to     your own in order to assure that the value entered into the     editor is an acceptable numerical value. When overriding     OnValidating in a derived class, be sure to call the base     class's OnValidating method so that registered delegates     receive the event.</remarks>
            <param name="e">A CancelEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnValidationError(System.EventArgs)">
            <summary>Raises the ValidationError event.</summary>
            <remarks>When overriding OnValidationError in a derived class, be sure to call the base class's OnValidationError method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridNumericTextBox.OnValueChanged(System.EventArgs)">
            <summary>Raises the ValueChanged event.</summary>
            <remarks>When overriding OnValueChanged in a derived class, be sure to call the base class's OnValueChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.AllowedSigns">
            <summary>Gets or sets a value indicating if the numeric value entered in the editor can be negative, positive or either.</summary>
            <remarks>    The value entered into the editor will only be validated     in the Validating event.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.BorderStyle">
            <summary>Gets or sets the border style for the control.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.Decimals">
            <summary>Gets or sets a value indicating the maximum number of digits which can be entered after the decimal point.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.FormatProvider">
            <summary>Gets or sets the custom Format Provider that will be used to format the editor's data.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.FormatSpecifier">
            <summary>Gets or sets the format that will be used to display the editor's content.</summary>
            <remarks>    The list of values that can be passed to the     FormatSpecifier property can be found in the FormatSpecifier     and FormatProvider topics.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.Length">
            <summary>Gets or sets a value indicating the maximum number of digits that can be entered.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.MaxLength">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.SelectOnFocus">
            <summary>Gets or sets a boolean value indicating if the entire content of the GridNumericTextBox should be selected when it gets focus.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.Text">
            <summary>Gets or sets the formatted text entered in the GridNumericTextBox.</summary>
            <remarks>    If the Decimals, Length, MaxLength, FormatSpecifier     and/or FormatProvider properties contain info about the     formatting that should be used (ie. this.Decimal contains 3 ),     affecting Text directly will modify the formatting of the     assigned text accordingly.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.GridNumericTextBox.Value">
            <summary>Gets or sets the numeric value of the editor without seperators or other formatting characters.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.AllowedSignsChanged">
            <summary>Raised when the value of the AllowedSigns property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.DecimalsChanged">
            <summary>Raised when the value of the Decimals property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.FormatProviderChanged">
            <summary>Raised when the value of the FormatProvider property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.FormatSpecifierChanged">
            <summary>Raised when the value of the FormatSpecifier property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.LengthChanged">
            <summary>Raised when the value of the Length property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.SelectOnFocusChanged">
            <summary>Raised when the value of the SelectOnFocus property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.ValidationError">
            <summary>Raised when the text entered into the editor fails the validation process.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridNumericTextBox.ValueChanged">
            <summary>Raised when the value of the Value property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GridRichTextBox">
            <summary>OBSOLETE: The GridRichTextBox is obsolete and has been replaced by the CellEditorManager class. Represents a RichTextBox which is used to edit the content of cells.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridRichTextBox.#ctor">
            <summary>Initializes a new instance of the GridRichTextBox class.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridRichTextBox.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <remarks>When overriding OnGotFocus in a derived class, be sure to call the base class's OnGotFocus method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridRichTextBox.OnSelectOnFocusChanged(System.EventArgs)">
            <summary>Raises the SelectOnFocus event.</summary>
            <remarks>When overriding OnSelectOnFocusChanged in a derived class, be sure to call the base class's OnSelectOnFocusChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.GridRichTextBox.SelectOnFocus">
            <summary>Gets or sets a boolean value indicating if the entire content of the GridRichTextBox should be selected when it gets focus.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridRichTextBox.SelectOnFocusChanged">
            <summary>Raised when the value of the SelectOnFocus property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.GridTextBox">
            <summary>OBSOLETE: The GridTextBox class is obsolete and has been replaced by the TextEditor and TextViewer classes. Represents a textbox which is used to edit the content of cells which have a string datatype.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridTextBox.#ctor">
            <summary>Initializes a new instance of the GridTextBox class. This editor is used by default to edit the content of cells which have a string or numeric datatype.</summary>
            <remarks>    Properties of the control should be set after the     editor has been assigned to a cell or column.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.GridTextBox.OnGotFocus(System.EventArgs)">
            <summary>Raises the GotFocus event.</summary>
            <remarks>When overriding OnGotFocus in a derived class, be sure to call the base class's OnGotFocus method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.GridTextBox.OnSelectOnFocusChanged(System.EventArgs)">
            <summary>Raises the SelectOnFocus event.</summary>
            <remarks>When overriding OnSelectOnFocusChanged in a derived class, be sure to call the base class's OnSelectOnFocusChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.GridTextBox.BorderStyle">
            <summary>Gets or sets the border style for the control.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.GridTextBox.SelectOnFocus">
            <summary>Gets or sets a boolean value indicating if the entire content of the GridTextBox should be selected when it gets focus.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.GridTextBox.SelectOnFocusChanged">
            <summary>Raised when the value of the SelectOnFocus property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ImageMap">
            <summary>Represents a value and its corresponding image index.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMap.#ctor(System.Object,System.Int32)">
            <summary>Initializes a new instance of the ImageMap class specifing a value and the index of the image to which it is mapped.</summary>
            <param name="value">The value to map to an image.</param>
            <param name="imageindex">The index of the image to which is mapped.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.ImageMap.ImageIndex">
            <summary>Gets or sets the index of the image to which Value is mapped.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ImageMap.Value">
            <summary>Gets or sets the value to map to an image.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ImageMapList">
            <summary>Represents a collection of values and their corresponding image indexes.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.Add(Xceed.Grid.Editors.ImageMap)">
            <summary>Adds a ImageMap object to the list.</summary>
            <returns>The index at which the ImageMap object was added.</returns>
            <param name="value">A reference to the ImageMap object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.AddRange(Xceed.Grid.Editors.ImageMap[])">
            <summary>Adds the elements of a ImageMap array to the end of the ValueIndexCollection collection.</summary>
            <param name="values">An array of ImageMap objects representing the values to add to the end of the ImageMapList collection.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.Clear">
            <summary>Removes all ImageMap objects from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.Contains(Xceed.Grid.Editors.ImageMap)">
            <summary>Retrieves a boolean value indicating if a specific ImageMap object exists in the list.</summary>
            <returns>true if the ImageMap object exists in the list; false otherwise.</returns>
            <param name="value">A reference to the ImageMap object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.IndexOf(Xceed.Grid.Editors.ImageMap)">
            <summary>Searches for the specified ImageMap object and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the ImageMap object to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.Insert(System.Int32,Xceed.Grid.Editors.ImageMap)">
            <summary>Inserts a ImageMap object into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the ImageMap object.</param>
            <param name="value">A reference to the ImageMap object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.OnValidate(System.Object)">
            <summary>Performs additional custom processes when validating a value.</summary>
            <remarks>When overriding OnValidate in a derived class, be sure to call the base class's OnValidate method so that registered delegates receive the event.</remarks>
            <param name="value">The object to validate.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.Remove(Xceed.Grid.Editors.ImageMap)">
            <summary>Removes the ImageMap object from the list.</summary>
            <param name="value">A reference to the ImageMap object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.ImageMapList.RemoveAt(System.Int32)">
            <summary>Removes the ImageMap object from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the ImageMap object.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.ImageMapList.IsFixedSize">
            <summary>Gets a value indicating whether the ImageMapList has a fixed size.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ImageMapList.IsReadOnly">
            <summary>Gets a value indicating whether the ImageMapList is readonly.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.ImageMapList.Item(System.Int32)">
            <summary>Gets the ImageMap object at the specified index.</summary>
            <param name="index">The zero-based index at which to get the ImageMap object.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.NumericEditor">
            <summary>The NumericEditor class represents an editor that can be used to edit the content of cells which have a numeric datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.#ctor">
            <summary>Initializes a new instance of the WinNumericTextBox class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.#ctor">
            <summary>Initializes a new instance of the WinNumericTextBox class.</summary>
            <remarks>Contrary to the stand alone WinNumericTextBox, using this constructor won't show the calculator dropdown. If you wish to use the calculator, use the overload taking the allowDropDown param.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the WinNumericTextBox class specifying if the calculator can be shown.</summary>
            <param name="allowDropDown">true if the calculator can be shown; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.#ctor(Xceed.Editors.WinNumericTextBox)">
            <summary>Initializes a new instance of the NumericEditor class specifying the WinNumericTextBox control that will be used as a template.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="template">The WinNumericTextBox to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.NumericEditor.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.NumericEditor.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.NumericEditor.MaskPromptChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.NumericEditor.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.NumericEditor.TemplateControl">
            <summary>Gets the WinNumericTextBox control that will be used as a template to create the controls that will edit the content of cells which have a numeric datatype.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.NumericEditor.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.NumericEditor.MaskPromptCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorActivationCharEventArgs">
            <summary>Provides information on a cell and the activation character required to activate its associated editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorActivationCharEventArgs.#ctor(Xceed.Grid.Cell,System.Char,System.Boolean)">
            <summary>Initializes a new instance of the QueryEditorActivationCharEventArgs class specifying the cell whose content is to be edited as well as the character which may or may not activate the cell's editor.</summary>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="charCode">The character to test.</param>
            <param name="isActivationChar">true if the editor is activated by the char; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationCharEventArgs.Cell">
            <summary>Gets the Cell whose content is to be edited by the editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationCharEventArgs.CharCode">
            <summary>Gets the character to test.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationCharEventArgs.IsActivationChar">
            <summary>Gets or sets a boolean value indicating if the character provided by CharCode activates the editor.</summary>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that char.</remarks>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorActivationKeyEventArgs">
            <summary>Provides information on a cell and the activation key required to activate its associated editor.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorActivationKeyEventArgs.#ctor(Xceed.Grid.Cell,System.Windows.Forms.Keys,System.Boolean)">
            <summary>Initializes a new instance of the QueryEditorActivationKeyEventArgs class specifying the cell whose content is to be edited as well as the key which may or may not activate the cell's editor.</summary>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="keyData">One of the Keys values.</param>
            <param name="isActivationKey">true if the editor is activated by the key; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationKeyEventArgs.Cell">
            <summary>Gets the Cell whose content is to be edited by the editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationKeyEventArgs.IsActivationKey">
            <summary>Gets or sets a boolean value indicating if the key provided by KeyData activates the editor.</summary>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that key.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorActivationKeyEventArgs.KeyData">
            <summary>Gets the key to test.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorBoundsEventArgs">
            <summary>Provides information on the Cell to be edited as well as the Control used to edit the cell's content in order to calculate the editor's bounds.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorBoundsEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of the QueryEditorBoundsEventArgs class specifying the cell to be edited, the control used to edit the cell's content, as well as various information required to calculate the editor's bounds.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell to edit.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the editor.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorBoundsEventArgs.Bounds">
            <summary>Gets or sets the bounds to the editor.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs">
            <summary>Provides information on the Cell to be edited as well as the Control used to edit the cell's content in order to retrieve the editor's fitted height.</summary>
            <remarks>    Control will be $$NULL$$ unless the control used to edit     a cell is displayed.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the QueryEditorFittedHeightEventArgs class specifying the cell to be edited, the control used to edit the cell's content, as well as various information required to calculate the editor's fitted height.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell to edit.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the editor will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
            <param name="fittedHeight">The fitted height of the editor in pixels. If -1, then no fitted height is required or desired.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.CellDisplayWidth">
            <summary>Gets the display width of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.FittedHeight">
            <summary>Gets or sets the fitted height of the editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.Graphics">
            <summary>Gets the Graphics object used to paint.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.Mode">
            <summary>Gets an AutoHeightMode value indicating in regards to what factors the fitted height of the editor will be calculated.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedHeightEventArgs.Printing">
            <summary>Gets a boolean value indicating if the editor is being printed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs">
            <summary>Provides information on the Cell to be edited as well as the Control used to edit the cell's content in order to retrieve the editor's fitted width.</summary>
            <remarks>    Control will be $$NULL$$ unless the control used to edit     a cell is displayed.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the QueryEditorFittedHeightEventArgs class specifying the cell to be edited, the control used to edit the cell's content, as well as various information required to calculate the editor's fitted width.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell to edit.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
            <param name="fittedWidth">The fitted width of the editor in pixels. If -1, then no fitted width is required or desired.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs.FittedWidth">
            <summary>Gets or sets the fitted width of the editor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs.Graphics">
            <summary>Gets the Graphics object used to paint.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs.Mode">
            <summary>This property is reserved for future use.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorFittedWidthEventArgs.Printing">
            <summary>Gets a boolean value indicating if the editor is being printed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorInputCharEventArgs">
            <summary>Provides information on the Cell to be edited, the Control used to edit the cell's content, and the input character to process.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorInputCharEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Char,System.Boolean)">
            <summary>Initializes a new instance of the QueryEditorInputCharEventArgs class specifying the cell to be edited, the control used to edit the cell's content, and the input character to process.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell to edit.</param>
            <param name="charCode">The character to test.</param>
            <param name="isInputChar">true if the character should be sent directly to the editor and not preprocessed; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorInputCharEventArgs.CharCode">
            <summary>Gets the character to test.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorInputCharEventArgs.IsInputChar">
            <summary>Gets or sets a boolean value indicating if the CharCode should be sent directly to the editor.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorInputKeyEventArgs">
            <summary>Provides information on the Cell to be edited, the Control used to edit the cell's content, and the input key to process.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.QueryEditorInputKeyEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys,System.Boolean)">
            <summary>Initializes a new instance of the QueryEditorInputCharEventArgs class specifying the cell to be edited, the control used to edit the cell's content, and the input key to process.</summary>
            <param name="control">The Control used to edit the cell's content.</param>
            <param name="cell">The Cell to edit.</param>
            <param name="keyData">One of the Keys values.</param>
            <param name="isInputKey">true if the specified key is a regular input key; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorInputKeyEventArgs.IsInputKey">
            <summary>Gets or sets a boolean value indicating if the specified key is a regular input key.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.QueryEditorInputKeyEventArgs.KeyData">
            <summary>Gets one of the Keys values.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.SettingControlValueEventArgs">
            <summary>Provides information regarding the value about to be assigned to the ControlViewer or CustomEditor.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.SettingControlValueEventArgs.CustomFormatProvider">
            <summary>Gets the custom Format Provider that will be used to format Value</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.SettingControlValueEventArgs.Handled">
            <summary>Gets or sets a boolean value indicating if the value can be handled by the editor or viewer.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.SettingControlValueEventArgs.Value">
            <summary>Gets the value to assign to the cell editor or viewer.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.TextEditor">
            <summary>The TextEditor class represents an editor that can be used to edit the content of cells which have a string datatype.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.#ctor">
            <summary>Initializes a new instance of the TextEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.#ctor">
            <summary>Initializes a new instance of the TextEditor class.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.#ctor(System.String)">
            <summary>Initializes a new instance of the TextEditor class specifying the string to use as a mask.</summary>
            <remarks>    The mask passed as a parameter will be assigned to the     TemplateControl's TextBoxArea's Mask property.     The casing characters (&lt; and &gt;) only affect the     characters entered by keyboard when they are the first     characters of the mask. Casing characters located anywhere else     are considered to be literals.              By default, the following mask characters are supported:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all inputted characters                     to lowercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                       </remarks>
            <param name="mask">A string representing the control's mask.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.#ctor(Xceed.Editors.WinTextBox)">
            <summary>Initializes a new instance of the TextEditor class specifying the WinTextBox control that will be used as a template.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="template">The WinTextBox to use as a template.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.#ctor(Xceed.Editors.WinTextBox,System.String,System.Boolean)">
            <summary>Initializes a new instance of the TextEditor class specifying the WinTextBox control that will be used as a template to edit the content of cells which have a string datatype, as well as other characteristics that will apply to the editor.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the templateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the templateControl when needed.</remarks>
            <param name="templateControl">A reference to a WinTextBox control representing the control that will be used as a template to create the controls that will edit the content of cells which have a string datatype.</param>
            <param name="propertyName">A string representing the property used to set the control's value.</param>
            <param name="handleActivationClick">Indicates if the control should handle the mouse click once it is activated.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.CalculateEditorBoundsCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the editor.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the editor.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.CreateControl">
            <summary>Creates the Control that will be used to edit the content of cells.</summary>
            <returns>A Control that will be used to edit the content of cells. If CreateControlMode is set to CreateControlMode.ClonedInstance, a new instance of the control should be returned.</returns>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the TemplateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the TemplateControl when needed.</remarks>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.DeactivateControlCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Deactivates the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.GetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Type)">
            <summary>Retrieves the value of the control.</summary>
            <returns>The value that will be assigned to the cell being edited by the control, in the correct datatype.</returns>
            <remarks>    If the cell's ParentRow's EnforceCellDataTypes is false,     returnDataType will be "object"; otherwise, returnDataType will     by equal to the parent column's DataType.</remarks>
            <param name="control">The control from which to retrieve the value.</param>
            <param name="cell">The cell currently being edited by the control.</param>
            <param name="returnDataType">A Type representing the datatype to which the control's value must be converted.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.GetFittedHeightCore(System.Windows.Forms.Control,Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted height of the editor in pixels.</summary>
            <returns>A value representing the fitted height of the editor in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="control">The Control that will be used to edit the content of the cell. Can be $$NULL$$ if the editor is not displayed.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the editor will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the editor is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.HandleActivationClick(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Point)">
            <summary>Gets a boolean value indicating if the control should handle the mouse click once it is activated.</summary>
            <returns>true if the control should handle the mouse click once it is activated; false otherwise.</returns>
            <remarks>    Only in the case where InPlace returns true should     HandleActivationClick return true.</remarks>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="mousePosition">The position of the mouse in screen coordinates.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.IsActivationCharCore(Xceed.Grid.Cell,System.Char)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the char.</summary>
            <returns>true if the editor is activated by the char; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that char.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="charCode">The character to test.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.IsActivationKeyCore(Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Retrieves a boolean value indicating if the editor is activated by the key.</summary>
            <returns>true if the editor is activated by the key; false otherwise.</returns>
            <remarks>    If true, the editor is activated and will immediately     receive a KeyDown event for that key.</remarks>
            <param name="cell">The Cell whose content is to be edited by the editor.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.IsInputKeyCore(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Windows.Forms.Keys)">
            <summary>Determines whether the specified key is a regular input key or a special key that requires preprocessing.</summary>
            <returns>true if the specified key is a regular input key; false otherwise.</returns>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="keyData">One of the Keys values.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.SetControlAppearanceCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Sets the appearance of the control that will be used to edit the content of the cell.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
        </member>
        <member name="M:Xceed.Grid.Editors.TextEditor.SetControlValueCore(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Assigns the value of the cell to the control.</summary>
            <param name="control">The control to which to assign the cell's Value.</param>
            <param name="cell">The cell whose Value to assign to the control.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.TextEditor.CreateControlMode">
            <summary>Gets a value representing the mode in which the control used to edit the content of cells is created.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the TemplateControl     will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the TemplateControl when needed.</remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.TextEditor.Mask">
            <summary>Gets or sets the mask applied to the editor's text.</summary>
            <remarks>    The casing characters (&lt; and &gt;) only affect the     characters entered by keyboard when they are the first     characters of the mask. Casing characters located anywhere else     are considered to be literals.              By default, the following mask characters are supported:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all inputted characters                     to lowercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                       </remarks>
        </member>
        <member name="P:Xceed.Grid.Editors.TextEditor.MaskPromptChar">
            <summary>Gets or sets the character used to prompt a user for input.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.TextEditor.PasswordChar">
            <summary>Gets or sets the character used to mask characters of a password.</summary>
        </member>
        <member name="P:Xceed.Grid.Editors.TextEditor.TemplateControl">
            <summary>Gets the WinTextBox control that will be used as a template to create the controls that will edit the content of cells which have a String datatype.</summary>
            <remarks>    In the case where CreateControlMode is set to     CreateControlMode.SingleInstance (default), the template     control will be used directly. If CreateControlMode is set to     ClonedInstance, the CreateControl method will be called to     clone the template control when needed.</remarks>
        </member>
        <member name="E:Xceed.Grid.Editors.TextEditor.MaskChanged">
            <summary>Raised when the value of the Mask property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Editors.TextEditor.MaskPromptCharChanged">
            <summary>Raised when the value of the MaskPromptChar property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ValidatingEditorEventArgs">
            <summary>Provides information when validating an editor's value.</summary>
        </member>
        <member name="M:Xceed.Grid.Editors.ValidatingEditorEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Boolean)">
            <summary>Initializes a new instance of the ValidatingEditorEventArgs class specifying the cell to be edited, the control used to edit the cell's content, and a boolean value indicating if the editor's value is valid.</summary>
            <param name="control">The Control that will be used to edit the content of the cell.</param>
            <param name="cell">The Cell whose content is to be edited by the control.</param>
            <param name="valid">true if the value is valid; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Editors.ValidatingEditorEventArgs.Valid">
            <summary>Gets or sets a boolean value indicating if the editor's value is valid and can be assigned to its underlying cell.</summary>
        </member>
        <member name="T:Xceed.Grid.Editors.ActivatingControlEventHandler">
            <summary>Represents the method that will handle the ActivatingControl event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An ActivatingControlEventArgs containing the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.CellEditorEventHandler">
            <summary>Represents the method that will handle various CellEditorManager events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A CellEditorEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.GettingControlValueEventHandler">
            <summary>Represents the method that will handle the GettingControlValue event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An GettingControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.GettingEditorControlValueEventHandler">
            <summary>Represents the method that will handle the GettingControlValue event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A GettingEditorControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorActivationCharEventHandler">
            <summary>Represents the method that will handle the QueryActivationChar event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorActivationCharEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorActivationKeyEventHandler">
            <summary>Represents the method that will handle the QueryActivationKey event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorActivationKeyEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorBoundsEventHandler">
            <summary>Represents the method that will handle the QueryEditorBounds event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorBoundsEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorFittedHeightEventHandler">
            <summary>Represents the method that will handle the QueryFittedHeight event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorFittedHeightEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorFittedWidthEventHandler">
            <summary>Represents the method that will handle the QueryFittedWidth event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorFittedWidthEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorInputCharEventHandler">
            <summary>Represents the method that will handle the QueryInputChar event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorInputCharEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.QueryEditorInputKeyEventHandler">
            <summary>Represents the method that will handle the QueryInputKey event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryEditorInputKeyEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.SettingControlValueEventHandler">
            <summary>Represents the method that will handle the SettingControlValue and SettingControlValue events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An SettingControlValueEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Editors.ValidatingEditorEventHandler">
            <summary>Represents the method that will handle the Validating event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A ValidatingEditorEventArgs that contains the event data.</param>
        </member>
        <member name="N:Xceed.Grid.Exporting">
            <summary>The Xceed.Grid.Exporting namespace contains all the classes which can be used to export grid data to Excel-compatible spreadsheets.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.CellDataFormat">
            <summary>Value representing how the content of a cell is treated.</summary>
        </member>
        <member name="F:Xceed.Grid.Exporting.CellDataFormat.DisplayText">
            <summary>The cell's content is treated as text.</summary>
        </member>
        <member name="F:Xceed.Grid.Exporting.CellDataFormat.Value">
            <summary>The cell's content is treated as a value.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.DetailGridsMode">
            <summary>Value representing how detail grids are handled during export.</summary>
        </member>
        <member name="F:Xceed.Grid.Exporting.DetailGridsMode.Joined">
            <summary>Detail grids are all laid out at the same level.</summary>
            <remarks>    SynchronizeDetailGrids must be set to true for this value     to work.</remarks>
        </member>
        <member name="F:Xceed.Grid.Exporting.DetailGridsMode.Independent">
            <summary>Detail grids are laid out in the spreadsheet as they are in the grid.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.CustomStyleList">
            <summary>Specialization of the CollectionBase class representing a list of ExcelStyle objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.Add(Xceed.Grid.Exporting.ExcelStyle)">
            <summary>Adds an ExcelStyle to the CustomStyleList.</summary>
            <returns>The unique ID of the style to be used when referencing it in an XMLSS element's StyleID attribute.</returns>
            <param name="excelStyle">The ExcelStyle to be added to the CustomStyleList</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.IndexOf">
            <summary>Searches for the specified ExcelStyle and returns the zero-based index of the first occurrence within the collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.IndexOf(Xceed.Grid.Exporting.ExcelStyle)">
            <summary>Searches for the specified ExcelStyle and returns the zero-based index of the first occurrence within the collection.</summary>
            <returns>The zero-based index of the first occurrence of excelStyle within the entire collection, if found; otherwise, returns -1.</returns>
            <remarks>excelStyle's ID is not a matching criterion.</remarks>
            <param name="excelStyle">The ExcelStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.IndexOf(System.String)">
            <summary>Searches for the specified ID and returns the zero-based index of the first occurrence within the collection.</summary>
            <returns>The zero-based index of the first ExcelStyle within the entire collection whose ID matches styleID, if found; otherwise, returns -1.</returns>
            <param name="styleID">A string representing the ID to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.Insert(System.Int32,Xceed.Grid.Exporting.ExcelStyle)">
            <summary>Inserts an ExcelStyle object to the CustomStyleList at the specified index.</summary>
            <returns>The unique ID of the style to be used when referencing the ExcelStyle object in an XMLSS element's StyleID attribute.</returns>
            <param name="index">The zero-based index at which excelStyle should be inserted.</param>
            <param name="excelStyle">The ExcelStyle to insert into the CustomStyleList</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnClear">
            <summary>Performs additional custom processes when clearing the contents of the CustomStyleList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnClearComplete">
            <summary>Performs additional custom processes after clearing the contents of the CustomStyleList instance.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnInsert(System.Int32,System.Object)">
            <summary>Performs additional custom processes before inserting a new item into the CustomStyleList.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnInsertComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after inserting a new ExcelStyle into the CustomStyleList instance.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the group at index.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnRemove(System.Int32,System.Object)">
            <summary>Performs additional custom processes when removing an element from the CustomStyleList.</summary>
            <param name="index">The zero-based index at which value can be found..</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.OnRemoveComplete(System.Int32,System.Object)">
            <summary>Performs additional custom processes after removing an ExcelStyle from the CustomStyleList instance.</summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.CustomStyleList.Remove(System.String)">
            <summary>Removes an ExcelStyle object from the CustomStyleList with the specified style ID.</summary>
            <param name="styleID">The unique ID of the ExcelStyle to be removed.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.CustomStyleList.Item">
            <summary>Gets the ExcelStyle at the specified index.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.CustomStyleList.Item(System.Int32)">
            <summary>Gets the ExcelStyle at the specified index.</summary>
            <param name="index">The zero-based index at which to get the ExcelStyle.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.CustomStyleList.Item(System.String)">
            <summary>Gets the ExcelStyle that corresponds to styleID.</summary>
            <param name="styleID">The ID of the ExcelStyle to retrieve.</param>
        </member>
        <member name="T:Xceed.Grid.Exporting.ExcelExporter">
            <summary>The ExcelExporter class allows data from a GridControl to be exported as a spreadsheet in XML format, suitable for import into Microsoft Excel.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.#ctor">
            <summary>Initializes a new instance of the ExcelExporter class.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.Export">
            <summary>Exports the data of a GridControl to a spreadsheet in XML suitable for import into Microsoft Excel.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.Export(Xceed.Grid.GridControl,System.String)">
            <summary>Exports the data of a GridControl to a spreadsheet in XML suitable for import into Microsoft Excel.</summary>
            <param name="gridControl">A reference to a GridControl object whose data will be exported.</param>
            <param name="filename">A string representing the name to be used for the exported file.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.Export(Xceed.Grid.DetailGrid,System.String)">
            <summary>Exports the data of a DetailGrid to a spreadsheet in XML suitable for import into Microsoft Excel.</summary>
            <param name="detailGrid">A reference to a DetailGrid object whose data will be exported.</param>
            <param name="filename">A string representing the name to be used for the exported file.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.Export(Xceed.Grid.GridControl,System.IO.Stream)">
            <summary>Exports the data of a GridControl in XML to a stream.</summary>
            <param name="gridControl">A reference to a GridControl. Cannot be $$NULL$$</param>
            <param name="stream">The Stream to which to export the grid. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.Export(Xceed.Grid.DetailGrid,System.IO.Stream)">
            <summary>Exports the data of a DetailGrid in XML to a stream.</summary>
            <param name="detailGrid">A reference to a DetailGrid. Cannot be $$NULL$$</param>
            <param name="stream">The Stream to which to export the detail grid. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating if the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnCellDataFormatChanged(System.EventArgs)">
            <summary>Raises the CellDataFormatChanged event.</summary>
            <remarks>When overriding OnCellDataFormatChanged in a derived class, be sure to call the base class's OnCellDataFormatChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnColumnHeaderStyleChanged(System.EventArgs)">
            <summary>Raises the ColumnHeaderStyleChanged event.</summary>
            <remarks>    When overriding OnColumnHeaderStyleChanged in a derived     class, be sure to call the base class's     OnColumnHeaderStyleChanged method so that registered delegates     receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnDetailGridsModeChanged(System.EventArgs)">
            <summary>Raises the DetailGridsModeChanged event.</summary>
            <remarks>When overriding OnDetailGridsModeChanged in a derived class, be sure to call the base class's OnDetailGridsModeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnGridLineColorChanged(System.EventArgs)">
            <summary>Raises the GridLineColorChanged event.</summary>
            <remarks>When overriding OnGridLineColorChanged in a derived class, be sure to call the base class's OnGridLineColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnIncludeColumnHeadersChanged(System.EventArgs)">
            <summary>Raises the IncludeColumnHeadersChanged event.</summary>
            <remarks>When overriding OnIncludeColumnHeadersChanged in a derived class, be sure to call the base class's OnIncludeColumnHeadersChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnIncludeDetailGridsChanged(System.EventArgs)">
            <summary>Raises the IncludeDetailGridsChanged event.</summary>
            <remarks>When overriding OnIncludeDetailGridsChanged in a derived class, be sure to call the base class's OnIncludeDetailGridsChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnIncludeGridStylesChanged(System.EventArgs)">
            <summary>Raises the IncludeGridStylesChanged event.</summary>
            <remarks>When overriding OnIncludeGridStylesChanged in a derived class, be sure to call the base class's OnIncludeGridStylesChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnRepeatParentDataChanged(System.EventArgs)">
            <summary>Raises the RepeatParentDataChanged event.</summary>
            <remarks>When overriding OnRepeatParentDataChanged in a derived class, be sure to call the base class's OnRepeatParentDataChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingCell(Xceed.Grid.Exporting.WritingElementEventArgs)">
            <summary>Raises the WritingCell event.</summary>
            <remarks>When overriding OnWritingCell in a derived class, be sure to call the base class's OnWritingCell method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingColumn(Xceed.Grid.Exporting.WritingElementEventArgs)">
            <summary>Raises the WritingColumn event.</summary>
            <remarks>When overriding OnWritingColumn in a derived class, be sure to call the base class's OnWritingColumn method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingRow(Xceed.Grid.Exporting.WritingRowElementEventArgs)">
            <summary>Raises the WritingRow event.</summary>
            <remarks>When overriding OnWritingRow in a derived class, be sure to call the base class's OnWritingRow method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingTable(Xceed.Grid.Exporting.WritingElementEventArgs)">
            <summary>Raises the WritingTable event.</summary>
            <remarks>When overriding OnWritingTable in a derived class, be sure to call the base class's OnWritingTable method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingWorkbook(Xceed.Grid.Exporting.WritingElementEventArgs)">
            <summary>Raises the WritingWorkbook event.</summary>
            <remarks>When overriding OnWritingWorkbook in a derived class, be sure to call the base class's OnWritingWorkbook method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.OnWritingWorksheet(Xceed.Grid.Exporting.WritingElementEventArgs)">
            <summary>Raises the WritingWorksheet event.</summary>
            <remarks>When overriding OnWritingWorksheet in a derived class, be sure to call the base class's OnWritingWorksheet method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.RaiseEvent(System.Object,System.EventArgs)">
            <summary>Raises the specified event.</summary>
            <param name="eventKey">The object that owns the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetCellDataFormat">
            <summary>Resets the value of the CellDataFormat property to its default value, DefaultCellDataFormat.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetColumnHeaderStyle">
            <summary>Resets the value of the ColumnHeaderStyle property to its default value, DefaultColumnHeaderStyle.</summary>
            <remarks>    ColumnHeaderStyle cannot be reset if the component is     currently exporting.</remarks>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetDetailGridsMode">
            <summary>Resets the value of the DetailGridsMode property to its default value, DefaultDetailGridsMode.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetGridLineColor">
            <summary>Resets the value of the GridLineColor property to its default value, DefaultGridLineColor.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetIncludeColumnHeaders">
            <summary>Resets the value of the IncludeColumnHeaders property to its default value, DefaultIncludeColumnHeaders.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetIncludeDetailGrids">
            <summary>Resets the value of the IncludeDetailGrids property to its default value, DefaultIncludeDetailGrids.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetIncludeGridStyles">
            <summary>Resets the value of the IncludeGridStyles property to its default value, DefaultIncludeGridStyles.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelExporter.ResetRepeatParentData">
            <summary>Resets the value of the RepeatParentData property to its default value, DefaultRepeatParentData.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.CellDataFormat">
            <summary>Gets or sets an CellDataFormat value representing how the content of a cell is treated.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.ColumnHeaderStyle">
            <summary>Gets or sets the style of the column header.</summary>
            <remarks>    ColumnHeaderStyle cannot be set if the component is     currently exporting.</remarks>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.CustomStyles">
            <summary>Gets a list of custom styles.</summary>
            <remarks>    It is not possible to modify this collection once     exportation has started.</remarks>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultCellDataFormat">
            <summary>Gets the default value of the CellDataFormat property</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultColumnHeaderStyle">
            <summary>Gets the default value of the ColumnHeaderStyle property</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultDetailGridsMode">
            <summary>Gets the default value of the DetailGridsMode property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultGridLineColor">
            <summary>Gets the default value of the GridLineColor property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultIncludeColumnHeaders">
            <summary>Gets the default value of the IncludeColumnHeaders property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultIncludeDetailGrids">
            <summary>Gets the default value of the IncludeDetailGrids property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultIncludeGridStyles">
            <summary>Gets the default value of the IncludeGridStyles property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DefaultRepeatParentData">
            <summary>Gets the default value of the RepeatParentData property.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.DetailGridsMode">
            <summary>Gets or sets the mode used to determine how detail grids are presented in the exported grid.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.Events">
            <summary>Gets a list of the events to which the grid element is subscribed.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.GridLineColor">
            <summary>Gets or sets the color of the spreadsheet's grid lines.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.IncludeColumnHeaders">
            <summary>Gets or sets a boolean value indicating whether column headers are to be included in the exported grid.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.IncludeDetailGrids">
            <summary>Gets or sets a boolean value indicating whether detail grids are to be included in the exported grid.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.IncludeGridStyles">
            <summary>Gets or sets a boolean value indicating whether the styles of the GridControl whose data is to be exported should be used in the exported spreadsheet.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelExporter.RepeatParentData">
            <summary>Gets or sets a boolean value indicating whether parent data rows should be repeated with every child row in the exported grid.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.CellDataFormatChanged">
            <summary>Raised when the value of the CellDataFormat property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.ColumnHeaderStyleChanged">
            <summary>Raised when the value of the ColumnHeaderStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.DetailGridsModeChanged">
            <summary>Raised when the value of the DetailGridsMode property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.GridLineColorChanged">
            <summary>Raised when the value of the GridLineColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.IncludeColumnHeadersChanged">
            <summary>Raised when the value of the IncludeColumnHeaders property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.IncludeDetailGridsChanged">
            <summary>Raised when the value of the IncludeDetailGrids property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.IncludeGridStylesChanged">
            <summary>Raised when the value of the IncludeGridStyles property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.RepeatParentDataChanged">
            <summary>Raised when the value of the RepeatParentData property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingCell">
            <summary>Raised when a Cell element is being written.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingColumn">
            <summary>Raised when a Column element is being written.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingRow">
            <summary>Raised when a Row element is being written.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingTable">
            <summary>Raised when a Table element is being written.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingWorkbook">
            <summary>Raised when a Workbook element is being written.</summary>
        </member>
        <member name="E:Xceed.Grid.Exporting.ExcelExporter.WritingWorksheet">
            <summary>Raised when a Worksheet element is being written</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.ExcelStyle">
            <summary>The ExcelStyle class defines the style to be used in the column header of the exported spreadsheet.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelStyle.#ctor">
            <summary>Initializes a new instance of the ExcelStyle class using the appearance of the specified GridElement.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelStyle.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Drawing.ContentAlignment)">
            <summary>Initializes a new instance of the ExcelStyle class using the specified colors, font and alignment.</summary>
            <param name="backColor">A Color structure representing the background color that will be used in the column header of the exported grid control. Cannot be Color.Empty.</param>
            <param name="foreColor">A Color structure representing the foreground color that will be used in the column header of the exported grid control. Cannot be Color.Empty.</param>
            <param name="font">A Font object representing the font that will be used in the column header of the exported grid control. Cannot be $$NULL$$</param>
            <param name="contentAlignment">A ContentAlignment value representing the content of the column header of the exported grid control.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelStyle.#ctor(Xceed.Grid.GridElement)">
            <summary>Initializes a new instance of the ExcelStyle class using the appearance of the specified GridElement.</summary>
            <param name="gridElement">A reference to a GridElement whose appearance will be applied to the ExcelStyle. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelStyle.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current ExcelStyle.</summary>
            <returns>true if the specified object is equal to the current ExcelStyle; false otherwise.</returns>
            <param name="obj">The object to compare with the current ExcelStyle.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.ExcelStyle.GetHashCode">
            <summary>Serves as a hash function for the ExcelStyle, suitable for use in hashing algorithms and data structures like a hash table.</summary>
            <returns>A hash code for the current ExcelStyle.</returns>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelStyle.BackColor">
            <summary>Gets the background color of the ExcelStyle.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelStyle.ContentAlignment">
            <summary>Gets the content alignment of the ExcelStyle.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelStyle.Font">
            <summary>Gets the font of the ExcelStyle.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelStyle.ForeColor">
            <summary>Gets the foreground color of the ExcelStyle.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.ExcelStyle.ID">
            <summary>Gets the ExcelStyle's name.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingCellElementEventArgs">
            <summary>Provides information on the cell element being written.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.WritingCellElementEventArgs.#ctor(Xceed.Grid.Exporting.XMLSSAttributeCollection,Xceed.Grid.Cell,Xceed.Grid.Exporting.XMLSSAttribute,System.String)">
            <summary>Initializes a new instance of the WritingCellElementEventArgs class, specifying the attributes, cell, typeAttribute and value to use.</summary>
            <param name="attributes">A collection of XMLSSAttributes representing the attributes of the cell element.</param>
            <param name="cell">The Cell being written.</param>
            <param name="typeAttribute">An XMLSSAttribute representing a data type of the cell.</param>
            <param name="value">A string representing the value being written.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.WritingCellElementEventArgs.Cell">
            <summary>Gets the cell being written.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.WritingCellElementEventArgs.TypeAttribute">
            <summary>Gets the Type attribute of the cell's Data element.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.WritingCellElementEventArgs.Value">
            <summary>Gets or sets the value of the Data element of the cell to be written to the document.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingElementEventArgs">
            <summary>Provides information on the element being written.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.WritingElementEventArgs.#ctor(Xceed.Grid.Exporting.XMLSSAttributeCollection)">
            <summary>Initializes a new instance of the WritingElementEventArgs class, specifying the attributes to use.</summary>
            <param name="attributes">A collection of XMLSSAttributes representing the attributes of the cell element.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.WritingElementEventArgs.Attributes">
            <summary>Gets a collection of XMLSSAttribute objects representing the attributes of an element in an XML tree.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingRowElementEventArgs">
            <summary>Provides information on the row element being written.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.WritingRowElementEventArgs.#ctor(Xceed.Grid.Exporting.XMLSSAttributeCollection,Xceed.Grid.Row)">
            <summary>Initializes a new instance of the WritingCellElementEventArgs class, specifying the attributes, cell, typeAttribute and value to use.</summary>
            <param name="attributes">A collection of XMLSSAttributes representing the attributes of the row element.</param>
            <param name="row">The Row being written.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.WritingRowElementEventArgs.Row">
            <summary>Gets the row being written.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.XMLSSAttribute">
            <summary>The XMLSSAttribute class describes an attribute that can optionally be found in an XML element.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttribute.#ctor">
            <summary>Initializes a new instance of the XMLSSAttribute class with the default XMLSS prefix and namespace, but using the specified localName and value.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the XMLSSAttribute class with the default XMLSS prefix and namespace, but using the specified localName and value.</summary>
            <param name="localName">A string representing the localName of the XMLSS attribute.</param>
            <param name="value">The value of the XMLSS attribute.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the XMLSSAttribute class using the specified XMLSS prefix, localName, namespace and value.</summary>
            <param name="prefix">A string representing the XMLSS prefix.</param>
            <param name="localName">A string representing the localName.</param>
            <param name="nameSpace">A string representing the namespace.</param>
            <param name="value">A string representing the value.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttribute.LocalName">
            <summary>Gets the localName of the XMLSSAttribute.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttribute.NameSpace">
            <summary>Gets the namespace of the XMLSSAttribute.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttribute.Prefix">
            <summary>Gets the prefix of the XMLSSAttribute.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttribute.Value">
            <summary>Gets the value of the XMLSSAttribute.</summary>
        </member>
        <member name="F:Xceed.Grid.Exporting.XMLSSAttribute.DefaultNameSpace">
            <summary>Returns the default namespace for an XML spreadsheet attribute.</summary>
        </member>
        <member name="F:Xceed.Grid.Exporting.XMLSSAttribute.DefaultPrefix">
            <summary>Returns the default prefix for an XML spreadsheet attribute.</summary>
        </member>
        <member name="T:Xceed.Grid.Exporting.XMLSSAttributeCollection">
            <summary>Specialization of the CollectionBase class containing a collection of XMLSSAttribute objects, representing the attributes of an element in an XML tree.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.#ctor">
            <summary>Initializes a new instance of the XMLSSAttributeCollection class.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Add(Xceed.Grid.Exporting.XMLSSAttribute)">
            <summary>Adds an XMLSSAttribute to the XMLSSAttributeCollection.</summary>
            <returns>The index of the XMLSSAttribute added to the collection.</returns>
            <param name="xmlssAttribute">The XMLSSAttribute to add to the collection.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.AddRange(Xceed.Grid.Exporting.XMLSSAttributeCollection)">
            <summary>Adds the elements of an XMLSSAttributeCollection to the collection.</summary>
            <param name="xmlssAttributes">The XMLSSAttribute objects to add to the collection.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Contains">
            <summary>Retrieves a boolean value indicating whether a specific XMLSSAttribute object exists in the collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Contains(System.String,System.String)">
            <summary>Retrieves a boolean value indicating whether a specific XMLSSAttribute object exists in the collection.</summary>
            <returns>true if the XMLSSAttribute object exists in the collection; false otherwise.</returns>
            <param name="prefix">The prefix of the XMLSSAttribute used to match.</param>
            <param name="localName">The localName of the XMLSSAttribute used to match</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Contains(System.String)">
            <summary>Retrieves a boolean value indicating whether a specific XMLSSAttribute object exists in the collection.</summary>
            <returns>true if the XMLSSAttribute object exists in the collection; false otherwise.</returns>
            <param name="localName">The localName of the XMLSSAttribute used to match</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Contains(Xceed.Grid.Exporting.XMLSSAttribute)">
            <summary>Retrieves a boolean value indicating whether a specific XMLSSAttribute object exists in the collection.</summary>
            <returns>true if the XMLSSAttribute object exists in the collection; false otherwise.</returns>
            <param name="value">The XMLSSAttribute used to match.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.IndexOf">
            <summary>Searches for the XMLSSAttribute with the specified prefix and local name and returns the zero-based index of the first occurrence within the collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.IndexOf(System.String,System.String)">
            <summary>Searches for the XMLSSAttribute with the specified prefix and local name and returns the zero-based index of the first occurrence within the collection.</summary>
            <returns>The zero-based index of the first occurrence of an XMLSSAttribute matching prefix and localName within the entire collection, if found; otherwise, returns -1.</returns>
            <param name="prefix">A string representing the prefix of the XMLSSAttribute to locate.</param>
            <param name="localName">A string representing the local name of the XMLSSAttribute to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.IndexOf(System.String)">
            <summary>Searches for the XMLSSAttribute using only the specified local name and returns the zero-based index of the first occurrence within the collection.</summary>
            <returns>The zero-based index of the first occurrence of an XMLSSAttribute matching localName within the entire collection, if found; otherwise, returns -1.</returns>
            <param name="localName">A string representing the local name of the XMLSSAttribute to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.IndexOf(Xceed.Grid.Exporting.XMLSSAttribute)">
            <summary>Searches for the XMLSSAttribute using only the specified local name and returns the zero-based index of the first occurrence within the collection.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the XMLSSAttribute to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.OnInsert(System.Int32,System.Object)">
            <summary>Performs additional custom processes before inserting a new item into the XMLSSAttributeCollection.</summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Remove">
            <summary>Removes an XMLSSAttribute object with the specified prefix and localName from the collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Remove(System.String,System.String)">
            <summary>Removes an XMLSSAttribute object with the specified prefix and localName from the collection.</summary>
            <param name="prefix">The prefix of the XMLSSAttribute to be removed.</param>
            <param name="localName">The localName of the XMLSSAttribute to be removed.</param>
        </member>
        <member name="M:Xceed.Grid.Exporting.XMLSSAttributeCollection.Remove(System.String)">
            <summary>Removes an XMLSSAttribute object with the specified localName from the collection.</summary>
            <param name="localName">The localName of the XMLSSAttribute to be removed.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttributeCollection.Item">
            <summary>Gets the XMLSSAttribute at the specified index.</summary>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttributeCollection.Item(System.Int32)">
            <summary>Gets the XMLSSAttribute at the specified index.</summary>
            <param name="index">The zero-based index at which to get the XMLSSAttribute.</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttributeCollection.Item(System.String,System.String)">
            <summary>Gets the XMLSSAttribute with the specified prefix and localName.</summary>
            <param name="prefix">The prefix of the XMLSSAttribute used to match.</param>
            <param name="localName">The localName of the XMLSSAttribute used to match</param>
        </member>
        <member name="P:Xceed.Grid.Exporting.XMLSSAttributeCollection.Item(System.String)">
            <summary>Gets the XMLSSAttribute matching the specified localName.</summary>
            <param name="localName">The localName of the XMLSSAttribute used to match</param>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingCellElementEventHandler">
            <summary>Represents the method that will handle the Exporting.WritingCellElement event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An WritingCellElementEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingElementEventHandler">
            <summary>Represents the method that will handle the Exporting.WritingElement event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An WritingElementEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Exporting.WritingRowElementEventHandler">
            <summary>Represents the method that will handle the Exporting.WritingRowElement event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An WritingRowElementEventArgs that contains the event data.</param>
        </member>
        <member name="N:Xceed.Grid.Reporting">
            <summary>The Xceed.Grid.Reporting namespace regroups all the classes which can be used to create reports.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.ColumnLayout">
            <summary>Value representing how columns which surpass the available page width are printed in a report.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ColumnLayout.SpanAcrossPages">
            <summary>The columns are printed across multiple pages.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ColumnLayout.FitToPage">
            <summary>The columns in the report will automatically be resized in order to be printed across the entire width of the page.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.ImageAutoSize">
            <summary>Value representing how the image size will be handled in a report.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ImageAutoSize.ImageScreenSize">
            <summary>The image size will be an approximation of its size on screen.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ImageAutoSize.ImagePPI">
            <summary>The image will use its actual PPI.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.PageBreak">
            <summary>Value representing when a page break should be applied.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.PageBreak.None">
            <summary>No page break.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.PageBreak.Before">
            <summary>The page break should be applied before the element is printed in a report.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.PageBreak.After">
            <summary>The page break should be applied after the element is printed in a report.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.PageBreak.Both">
            <summary>A page break should be applied before and after the element is printed in a report.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.ReportLineThickness">
            <summary>Value representing the thickness of a ReportLine.</summary>
            <remarks>    The style with which the report line will be drawn is     determined by the DashStyle property.</remarks>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.None">
            <summary>No report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.SingleThin">
            <summary>A single thin report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.SingleMedium">
            <summary>A single medium report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.SingleThick">
            <summary>A single thick report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.DoubleThin">
            <summary>A double thin report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.DoubleMedium">
            <summary>A double medium report line will be drawn.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.ReportLineThickness.DoubleThick">
            <summary>A double thick report line will be drawn.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.RowHeightExpansion">
            <summary>Value representing how the height of the rows contained in the group expand to their content.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.RowHeightExpansion.NeverExpand">
            <summary>The height of the rows never expands and is fixed by the value of the RowHeight property.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.RowHeightExpansion.ExpandUpToLimit">
            <summary>The height of the rows expands up to the value defined by the RowHeightExpansionLimit property.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.RowHeightExpansion.ExpandWithoutLimits">
            <summary>The height of the rows expands until the rows' entire content is displayed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.RowLayout">
            <summary>OBSOLETE: The RowLayout enumeration is obsolete and has been replaced by the ColumnLayout enumeration. Value representing how rows which surpass the available page width are printed.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.RowLayout.PageSpanning">
            <summary>The rows are printed across multiple pages.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.RowLayout.AutoFit">
            <summary>The columns in the report will automatically be resized in order for the row to be printed, on a single line, across the entire width of the page.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.Unit">
            <summary>Value representing a unit of measurement.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.Unit.Millimeters">
            <summary>Millimeters.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.Unit.Centimeters">
            <summary>Centimeters.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.Unit.HundredthsOfAnInch">
            <summary>Hundredth's of an inch.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.Unit.SixteenthsOfAnInch">
            <summary>Sixteenths of an inch.</summary>
        </member>
        <member name="F:Xceed.Grid.Reporting.Unit.Inches">
            <summary>Inches.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.CellViewerManagerReportStyle">
            <summary>Represents the report style of a CellViewerManager.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.#ctor">
            <summary>Initializes a new instance of the CellViewerManagerReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the ImageAlignmentChanged event.</summary>
            <remarks>When overriding OnImageAlignmentChanged in a derived class, be sure to call the base class's OnImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImageAreaChanged(System.EventArgs)">
            <summary>Raises the ImageAreaChanged event.</summary>
            <remarks>When overriding OnImageAreaChanged in a derived class, be sure to call the base class's OnImageAreaChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImageAutoSizeChanged(System.EventArgs)">
            <summary>Raises the ImageAutoSizeChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImagePaddingChanged(System.EventArgs)">
            <summary>Raises the ImagePaddingChanged event.</summary>
            <remarks>When overriding OnImagePaddingChanged in a derived class, be sure to call the base class's OnImagePaddingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImageSizeChanged(System.EventArgs)">
            <summary>Raises the ImageSizeChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnImageStyleChanged(System.EventArgs)">
            <summary>Raises the ImageStyleChanged event.</summary>
            <remarks>When overriding OnImageStyleChanged in a derived class, be sure to call the base class's OnImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnPreserveImageAspectRatioChanged(System.EventArgs)">
            <summary>Raises the PreserveImageAspectRatioChanged event.</summary>
            <remarks>When overriding OnPreserveImageAspectRatioChanged in a derived class, be sure to call the base class's OnPreserveImageAspectRatioChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.OnTextPaddingChanged(System.EventArgs)">
            <summary>Raises the TextPaddingChanged event.</summary>
            <remarks>When overriding OnTextPaddingChanged in a derived class, be sure to call the base class's OnTextPaddingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.Reset">
            <summary>Resets all of the properties that have been explicitly set back to their default values.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImageAlignment">
            <summary>Resets the value of the ImageAlignment property to its default value, ImageAlignment.CellAmbient.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImageArea">
            <summary>Resets the value of the ImageArea property to its default value, ImageArea.None.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImageAutoSize">
            <summary>Resets the value of the ImageAutoSize property to its default value, ImageAutoSize.ImageScreenSize.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImagePadding">
            <summary>Resets the value of the ImagePadding property to its default value, ImagePadding.Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImageSize">
            <summary>Resets the value of the ImageSize property to its default value, Size.Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetImageStyle">
            <summary>Resets the value of the ImageStyle property to its default value, ImageStyle.Align.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetPreserveImageAspectRatio">
            <summary>Resets the value of the PreserveImageAspectRatio property to its default value, true.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ResetTextPadding">
            <summary>Resets the value of the TextPadding property to its default value, Margins.Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImageAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImageArea">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImageAutoSize">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImagePadding">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImageSize">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeImageStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializePreserveImageAspectRatio">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ShouldSerializeTextPadding">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageAlignment">
            <summary>Gets or sets the alignment of the image in the ImageArea when the CellViewerManager is printed in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageArea">
            <summary>Gets or sets the area where the CellViewerManager's image is displayed when it is printed in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageAutoSize">
            <summary>Gets or sets a value representing how the CellViewerManager's image size will be handled in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImagePadding">
            <summary>Gets or sets the padding surrounding the CellViewerManager's image, in hundredths of an inch, when it is printed in a report.</summary>
            <remarks>    The UnitConverter class can be used to convert values to     and from hundredths of an inch.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageSize">
            <summary>Gets or sets the size of the CellViewerManager's image when it is printed in a report.</summary>
            <remarks>    If Empty is specified, the image size will be determined     \ by the ImageAutoSize property.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageStyle">
            <summary>Gets or sets a value indicating the style with which the image is displayed when the CellViewerManager is printed in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImageAlignmentDefined">
            <summary>Gets a boolean value indicating if the ImageAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImageAreaDefined">
            <summary>Gets a boolean value indicating if the ImageArea property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImageAutoSizeDefined">
            <summary>Gets a boolean value indicating if the ImageAutoSize property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImagePaddingDefined">
            <summary>Gets a boolean value indicating if the ImagePadding property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImageSizeDefined">
            <summary>Gets a boolean value indicating if the ImageSize property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsImageStyleDefined">
            <summary>Gets a boolean value indicating if the ImageStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsPreserveImageAspectRatioDefined">
            <summary>Gets a boolean value indicating if the PreserveImageAspectRatio property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.IsTextPaddingDefined">
            <summary>Gets a boolean value indicating if the TextPadding property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio when the CellViewerManager is printed in a report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.CellViewerManagerReportStyle.TextPadding">
            <summary>Gets or sets the padding surrounding the CellViewerManager's text, in hundredths of an inch, when it is printed in a report.</summary>
            <remarks>    The UnitConverter class can be used to convert values to     and from hundredths of an inch.</remarks>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageAreaChanged">
            <summary>Raised when the value of the ImageArea property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageAutoSizeChanged">
            <summary>Raised when the value of the ImageAutoSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.CellViewerManagerReportStyle.TextPaddingChanged">
            <summary>Raised when the value of the TextPadding property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.ColumnReportStyle">
            <summary>Represents the report style of a Column.</summary>
            <remarks>    Unlike the other report styles, the default values of the     Visible and Width properties inherit their default values from     their parent column in the GridControl.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.ColumnReportStyle.#ctor">
            <summary>Initializes a new instance of the ColumnReportStyle class specifying the Column for which the report style is to be created.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ColumnReportStyle.#ctor(Xceed.Grid.Column)">
            <summary>Initializes a new instance of the ColumnReportStyle class specifying the Column for which the report style is to be created.</summary>
            <remarks>    Unlike the other report styles, the default values of the     Visible and Width properties inherit their default values from     their parent column in the GridControl.</remarks>
            <param name="parentColumn">A reference to the Column for which the report style is to be created.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ColumnReportStyle.OnWidthChanged(System.EventArgs)">
            <summary>Raises the WidthChanged event.</summary>
            <remarks>When overriding OnWidthChanged in a derived class, be sure to call the base class's OnWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ColumnReportStyle.ResetWidth">
            <summary>Resets the value of the Width property to its default value, Width.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ColumnReportStyle.ShouldSerializeWidth">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.ColumnReportStyle.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ColumnReportStyle.IsWidthDefined">
            <summary>Gets a boolean value indicating if the Width property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ColumnReportStyle.Width">
            <summary>Gets or sets the width, in hundredths of an inch, of the column when it is printed in a report.</summary>
            <remarks>    The value of the parent Column's Width property will be     used in the case where the Width property has not been     explicitly set.     The UnitConverter class can be used to convert values to     and from hundredths of an inch.     When no value is set to this property, the report's     column width will be an approximation from the screen column's     width. The value will be transformed is such a way as to be     printed with approximately the same width. For optimal results,     the screen should have around 96 pixels per inch, and the font     used by the ReportStyle should match or resemble the font used     by the Column.</remarks>
        </member>
        <member name="E:Xceed.Grid.Reporting.ColumnReportStyle.WidthChanged">
            <summary>Raised when the value of the Width property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.GridControlReportStyle">
            <summary>Represents the report style of a GridControl.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.#ctor">
            <summary>Initializes a new instance of the GridControlReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.#ctor">
            <summary>Initializes a new instance of the GridControlReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.OnRowLayoutChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnRowLayoutChanged method is obsolete. Raises the RowLayoutChanged event.</summary>
            <remarks>When overriding OnRowLayoutChanged in a derived class, be sure to call the base class's OnRowLayoutChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.ResetFixedFooterRow">
            <summary>Resets the property values of the FixedFooterRow report style.</summary>
            <remarks>    Calling the ResetFixedFooterRow method will set the     FixedFooterRow property to $$NULL$$ causing a new     RowReportStyle to be created when the FixedFooterRow property     is accessed.     The IsFixedFooterRowDefined property should be consulted     before the FixedFooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedFooterRow report style     have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.ResetFixedHeaderRow">
            <summary>Resets the property values of the FixedHeaderRow report style.</summary>
            <remarks>    Calling the ResetFixedHeaderRow method will set the     FixedHeaderRow property to $$NULL$$ causing a new     RowReportStyle to be created when the FixedHeaderRow property     is accessed.     The IsFixedHeaderRowDefined property should be consulted     before the FixedHeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedHeaderRow report style     have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.ResetRowLayout">
            <summary>OBSOLETE: The ResetRowLayout method is obsolete and has been replaced by the ResetColumnLayout method. Resets the value of the RowLayout property to its default value, RowLayout.PageSpanning.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridControlReportStyle.ShouldSerializeRowLayout">
            <summary>OBSOLETE: The ShouldSerializeRowLayout property is obsolete and has been replaced by the ShouldSerializeColumnLayout property. This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.FixedFooterRow">
            <summary>Gets the report style of the Rows contained in a GridControl's FixedFooterRows section.</summary>
            <remarks>    The IsFixedFooterRowDefined property should be consulted     before the FixedFooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedFooterRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.FixedHeaderRow">
            <summary>Gets the report style of the Rows contained in a GridControl's FixedHeaderRows section.</summary>
            <remarks>    The IsFixedHeaderRowDefined property should be consulted     before the FixedHeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedHeaderRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.IsFixedFooterRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the FixedFooterRow report style have been explicitly set.</summary>
            <remarks>    The IsFixedFooterRowDefined property should be consulted     before the FixedFooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedFooterRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.IsFixedHeaderRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the FixedHeaderRow report style have been explicitly set.</summary>
            <remarks>    The IsFixedHeaderRowDefined property should be consulted     before the FixedHeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FixedHeaderRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.IsRowLayoutDefined">
            <summary>OBSOLETE: The IsRowLayoutDefined property is obsolete and has been replaced by the IsColumnLayoutDefined property. Gets a boolean value indicating if the RowLayout property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.KeepTogether">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.PageBreak">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.RowLayout">
            <summary>OBSOLETE: The RowLayout property is obsolete and has been replaced by the ColumnLayout property. Gets or sets a value indicating how rows which surpass the available page width are printed.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.XmlFixedFooterRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridControlReportStyle.XmlFixedHeaderRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridControlReportStyle.RowLayoutChanged">
            <summary>OBSOLETE: The RowLayoutChanged event is obsolete. Raised when the value of the RowLayout property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.GridElementReportStyle">
            <summary>Represents the report style of a GridElement.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.#ctor">
            <summary>Initializes a new instance of the GridElementReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.#ctor">
            <summary>Initializes a new instance of the GridElementReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.#ctor(Xceed.Grid.Reporting.GridElementReportStyle)">
            <summary>Initializes a new instance of the GridElementReportStyle class specifying a GridElementReportStyle from which to copy property values.</summary>
            <param name="gridElementReportStyle">A reference to a GridElementReportStyle from which to copy property values.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.Clone">
            <summary>Creates an exact copy of the style.</summary>
            <returns>A reference to the newly created GridElementReportStyle.</returns>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnBackColorChanged(System.EventArgs)">
            <summary>Raises the BackColorChanged event.</summary>
            <remarks>When overriding OnBackColorChanged in a derived class, be sure to call the base class's OnBackColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnClipPartialLineChanged(System.EventArgs)">
            <summary>Raises the ClipPartialLineChanged event.</summary>
            <remarks>When overriding OnClipPartialLineChanged in a derived class, be sure to call the base class's OnClipPartialLineChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnFontChanged(System.EventArgs)">
            <summary>Raises the FontChanged event.</summary>
            <remarks>When overriding OnFontChanged in a derived class, be sure to call the base class's OnFontChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnForeColorChanged(System.EventArgs)">
            <summary>Raises the ForeColorChanged event.</summary>
            <remarks>When overriding OnForeColorChanged in a derived class, be sure to call the base class's OnForeColorChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnHorizontalAlignmentChanged(System.EventArgs)">
            <summary>Raises the HorizontalAlignmentChanged event.</summary>
            <remarks>When overriding OnHorizontalAlignmentChanged in a derived class, be sure to call the base class's OnHorizontalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnTrimmingChanged(System.EventArgs)">
            <summary>Raises the TrimmingChanged event.</summary>
            <remarks>When overriding OnTrimmingChanged in a derived class, be sure to call the base class's OnTrimmingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnVerticalAlignmentChanged(System.EventArgs)">
            <summary>Raises the VerticalAlignmentChanged event.</summary>
            <remarks>When overriding OnVerticalAlignmentChanged in a derived class, be sure to call the base class's OnVerticalAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnVisibleChanged(System.EventArgs)">
            <summary>Raises the VisibleChanged event.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.OnWordWrapChanged(System.EventArgs)">
            <summary>Raises the WordWrapChanged event.</summary>
            <remarks>When overriding OnWordWrapChanged in a derived class, be sure to call the base class's OnWordWrapChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.Reset">
            <summary>Resets all of the properties that have been explicitly set back to their default values.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetBackColor">
            <summary>Resets the value of the BackColor property to its default value, Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetClipPartialLine">
            <summary>Resets the value of the ClipPartialLine property to its default value, true.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetFont">
            <summary>Resets the value of the Font property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetForeColor">
            <summary>Resets the value of the ForeColor property to its default value, Empty.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetHorizontalAlignment">
            <summary>Resets the value of the HorizontalAlignment property to its default value, HorizontalAlignment.Default.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetTrimming">
            <summary>Resets the value of the Trimming property to its default value, StringTrimming.EllipsisWord.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetVerticalAlignment">
            <summary>Resets the value of the VerticalAlignment property to its default value, VerticalAlignment.Default.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetVisible">
            <summary>Resets the value of the Visible property to its default value, true.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ResetWordWrap">
            <summary>Resets the value of the WordWrap property to its default value, true.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeClipPartialLine">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeHorizontalAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeTrimming">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeVerticalAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeVisible">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeWordWrap">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeXmlBackColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeXmlFont">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridElementReportStyle.ShouldSerializeXmlForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.BackColor">
            <summary>Gets or sets the background color of the grid element when it is printed in a report.</summary>
            <remarks>    The value of the BackColor property of the parent     element's ReportStyle will be used in the case where the     BackColor property has not been explicitly set.     Although this property is not ambient, because a child     element occupies part of the same space as its parent element,     it is necessarily inherited "visually".</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.ClipPartialLine">
            <summary>Gets or sets a boolean value indicating if partial lines should be clipped.</summary>
            <remarks>    If this property is set to true, only lines that can be     fully displayed will be displayed.     The value of the ClipPartialLine property of the parent     element's ReportStyle will be used in the case where the     ClipPartialLine property has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.DefaultVisible">
            <summary>Gets the default value of the Visible property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.Font">
            <summary>Gets or sets the font that the grid element will have when it is printed in a report.</summary>
            <remarks>    The value of the Font property of the parent element's     ReportStyle will be used in the case where the Font property     has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.ForeColor">
            <summary>Gets or sets the foreground color that the grid element will have when it is printed in a report.</summary>
            <remarks>    The value of the ForeColor property of the parent     element's ReportStyle will be used in the case where the     ForeColor property has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.HorizontalAlignment">
            <summary>Gets or sets the horizontal alignment that the grid element will have when it is printed in a report.</summary>
            <remarks>    The value of the HorizontalAlignment property of the     parent element's ReportStyle will be used in the case where the     HorizontalAlignment property has not been explicitly     set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsBackColorDefined">
            <summary>Gets a boolean value indicating if the BackColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsClipPartialLineDefined">
            <summary>Gets a boolean value indicating if the ClipPartialLine property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsFontDefined">
            <summary>Gets a boolean value indicating if the Font property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsForeColorDefined">
            <summary>Gets a boolean value indicating if the ForeColor property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsHorizontalAlignmentDefined">
            <summary>Gets a boolean value indicating if the HorizontalAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsTrimmingDefined">
            <summary>Gets a boolean value indicating if the Trimming property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsVerticalAlignmentDefined">
            <summary>Gets a boolean value indicating if the VerticalAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsVisibleDefined">
            <summary>Gets a boolean value indicating if the Visible property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.IsWordWrapDefined">
            <summary>Gets a boolean value indicating if the WordWrap property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.Trimming">
            <summary>Gets or sets a value indicating how the text displayed in the grid element will be trimmed when it exceeds the edges of the layout rectangle.</summary>
            <remarks>    The value of the Trimming property of the parent     element's ReportStyle will be used in the case where the     Trimming property has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.VerticalAlignment">
            <summary>Gets or sets the vertical alignment that the grid element will have when it is printed in a report.</summary>
            <remarks>    The value of the VerticalAlignment property of the parent     element's ReportStyle will be used in the case where the     VerticalAlignment property has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.Visible">
            <summary>Gets or sets a boolean value indicating if the grid element is visible when it is printed in a report.</summary>
            <remarks>    The value of the Visible property of the parent element's     ReportStyle will be used in the case where the Visible property     has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.WordWrap">
            <summary>Gets or sets a boolean value indicating if the text of the grid element should be wrapped when it is printed in a report.</summary>
            <remarks>    The value of the WordWrap property of the parent     element's ReportStyle will be used in the case where the     WordWrap property has not been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.XmlBackColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.XmlFont">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridElementReportStyle.XmlForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.BackColorChanged">
            <summary>Raised when the value of the BackColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.ClipPartialLineChanged">
            <summary>Raised when the value of the ClipPartialLine property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.FontChanged">
            <summary>Raised when the value of the Font property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.ForeColorChanged">
            <summary>Raised when the value of the ForeColor property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.HorizontalAlignmentChanged">
            <summary>Raised when the value of the HorizontalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.TrimmingChanged">
            <summary>Raised when the value of the Trimming property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.VerticalAlignmentChanged">
            <summary>Raised when the value of the VerticalAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.VisibleChanged">
            <summary>Raised when the value of the Visible property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridElementReportStyle.WordWrapChanged">
            <summary>Raised when the value of the WordWrap property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.GridReportStyle">
            <summary>Represents the report style of a grid.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.#ctor">
            <summary>Initializes a new instance of the GridReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.#ctor">
            <summary>Initializes a new instance of the GridReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageAlignmentChanged event.</summary>
            <remarks>When overriding OnBackgroundImageAlignmentChanged in a derived class, be sure to call the base class's OnBackgroundImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.OnBackgroundImageChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageChanged event.</summary>
            <remarks>When overriding OnBackgroundImageChanged in a derived class, be sure to call the base class's OnBackgroundImageChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.OnBackgroundImageStyleChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageStyleChanged event.</summary>
            <remarks>When overriding OnBackgroundImageStyleChanged in a derived class, be sure to call the base class's OnBackgroundImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ResetBackgroundImage">
            <summary>Resets the value of the BackgroundImage property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ResetBackgroundImageAlignment">
            <summary>Resets the value of the BackgroundImageAlignment property to its default value, ContentAlignment.MiddleCenter.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ResetBackgroundImageStyle">
            <summary>Resets the value of the BackgroundImageStyle property to its default value, ImageStyle.Align.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ResetColumnManagerRow">
            <summary>Resets the property values of the ColumnManagerRow report style.</summary>
            <remarks>    Calling the ResetColumnManagerRow method will set the     ColumnManagerRow property to $$NULL$$ causing a new     RowReportStyle to be created when the ColumnManagerRow property     is accessed.     The IsColumnManagerRowDefined property should be     consulted before the ColumnManagerRow property is accessed to     prevent a new instance of a RowReportStyle from being created     in the case where none of the properties of the     ColumnManagerRow report style have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeBackgroundImageAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeBackgroundImageStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeDataRows">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeDetailGrids">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeGroupLevels">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyle.ShouldSerializeXmlBackgroundImage">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.BackgroundImage">
            <summary>Gets or sets the background image of the report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.BackgroundImageAlignment">
            <summary>Gets or sets the alignment of the report's BackgroundImage.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.BackgroundImageStyle">
            <summary>Gets or sets the style of the report's BackgroundImage.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.BottomMargin">
            <summary>Gets or sets the height of the grid's bottom margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the BottomMargin property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.Collapsed">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.ColumnManagerRow">
            <summary>Gets the report style of the ColumnManagerRows contained in the report.</summary>
            <remarks>    The IsColumnManagerRowDefined property should be     consulted before the ColumnManagerRow property is accessed to     prevent a new instance of a RowReportStyle from being created     in the case where none of the properties of the     ColumnManagerRow report style have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DataRowCount">
            <summary>Gets the number of RowReportStyles contained in DataRows.</summary>
            <remarks>    The DataRowCount property should be used to obtain the     number of RowReportStyles rather than the DataRows.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DataRows">
            <summary>Gets the report styles of the DataRows contained in the report.</summary>
            <remarks>    The DataRowCount method should be used to obtain the     number of RowReportStyles rather than the DataRows.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DefaultBottomMargin">
            <summary>Gets the default value of the BottomMargin property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DefaultTopMargin">
            <summary>Gets the default value of the TopMargin property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DetailGridCount">
            <summary>Gets the number of GridReportStyles contained in DetailGrids.</summary>
            <remarks>    The DetailGridCount property should be used to obtain the     number of GridReportStyles rather than the DetailGrids.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.DetailGrids">
            <summary>Gets the report styles of the DetailGrids contained in the report.</summary>
            <remarks>    The DetailGridCount method should be used to obtain the     number of GridReportStyles rather than the DetailGrids.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.GroupLevelCount">
            <summary>Gets the number of GroupReportStyles contained in GroupLevels.</summary>
            <remarks>    The GroupLevelCount property should be used to obtain the     number of GroupReportStyles rather than the GroupLevels.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.GroupLevels">
            <summary>Gets the report styles of the Groups contained in the report.</summary>
            <remarks>    Each GroupReportStyle that is added will affect all     groups of the same level. For example, the first style will     affect all groups of the first level (index 0). This said, if a     report style is desired only for groups of the second level     (index 1), an empty GroupReportStyle must first be added for     the first level groups (index 0) after which the second     GroupReportStyle can be added for the second level groups     (index 1).     A group level will inherit the properties of its parent     group level in the case where it does not have its own     GroupReportStyle, or if properties of its GroupReportStyle have     not been explicitly set. For example, if the BackColor property     of the first group level's HeaderRow is set to blue, the header     rows of any child group levels will also be blue unless the     BackColor property of its own GroupReportStyle has been     explicitly set.     The GroupLevelCount method should be used to obtain the     number of GroupReportStyles rather than the GroupLevels.Count     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.IsBackgroundImageAlignmentDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.IsBackgroundImageDefined">
            <summary>Gets a boolean value indicating if the BackgroundImage property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.IsBackgroundImageStyleDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.IsColumnManagerRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the ColumnManagerRow report style have been explicitly set.</summary>
            <remarks>    The IsColumnManagerRowDefined property should be     consulted before the ColumnManagerRow property is accessed to     prevent a new instance of a RowReportStyle from being created     in the case where none of the properties of the     ColumnManagerRow report style have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.TopMargin">
            <summary>Gets or sets the height of the grid's top margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the TopMargin property will not be inherited     from its parent in the case where it has not been explicitly     set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.XmlBackgroundImage">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyle.XmlColumnManagerRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridReportStyle.BackgroundImageAlignmentChanged">
            <summary>Raised when the value of the BackgroundImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridReportStyle.BackgroundImageChanged">
            <summary>Raised when the value of the BackgroundImage property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GridReportStyle.BackgroundImageStyleChanged">
            <summary>Raised when the value of the BackgroundImageStyle property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.GridReportStyleList">
            <summary>Contains a list of GridReportStyle objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.#ctor">
            <summary>Initializes a new instance of the GridReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.#ctor">
            <summary>Initializes a new instance of the GridReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.#ctor(System.Int32)">
            <summary>Initializes a new instance of the GridReportStyleList class specifying its initial capacity.</summary>
            <param name="initialCapacity">A value representing the initial capacity of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.Add(Xceed.Grid.Reporting.GridReportStyle)">
            <summary>Adds a GridReportStyle to the list.</summary>
            <returns>The index at which the GridReportStyle was added.</returns>
            <param name="value">A reference to the GridReportStyle object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.AddRange(Xceed.Grid.Reporting.GridReportStyle[])">
            <summary>Adds the elements of a GridReportStyle array to the end of the list.</summary>
            <param name="values">An array of GridReportStyle objects representing the grid report styles to add to the end of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.Clear">
            <summary>Removes all RowReportStyle objects from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.Contains(Xceed.Grid.Reporting.GridReportStyle)">
            <summary>Retrieves a boolean value indicating if a specific GridReportStyle exists in the list.</summary>
            <returns>true if the GridReportStyle exists in the list; false otherwise.</returns>
            <param name="value">A reference to the GridReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.IndexOf(Xceed.Grid.Reporting.GridReportStyle)">
            <summary>Searches for the specified GridReportStyle and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the GridReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.Insert(System.Int32,Xceed.Grid.Reporting.GridReportStyle)">
            <summary>Inserts a GridReportStyle into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the GridReportStyle.</param>
            <param name="value">A reference to the GridReportStyle object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new GridReportStyle into the list.</summary>
            <param name="index">The zero-based index at which to insert the GridReportStyle .</param>
            <param name="value">The new value of the GridReportStyle at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.Remove(Xceed.Grid.Reporting.GridReportStyle)">
            <summary>Removes the GridReportStyle from the list.</summary>
            <param name="value">A reference to the GridReportStyle object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GridReportStyleList.RemoveAt(System.Int32)">
            <summary>Removes the GridReportStyle from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the GridReportStyle.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.GridReportStyleList.Item(System.Int32)">
            <summary>Gets the GridReportStyle at the specified index.</summary>
            <param name="index">The zero-based index at which to get the GridReportStyle.</param>
        </member>
        <member name="T:Xceed.Grid.Reporting.GroupReportStyle">
            <summary>Represents the report style of a Group.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.#ctor">
            <summary>Initializes a new instance of the GroupReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.#ctor">
            <summary>Initializes a new instance of the GroupReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnBottomMarginChanged(System.EventArgs)">
            <summary>Raises the BottomMarginChanged event.</summary>
            <remarks>When overriding OnBottomMarginChanged in a derived class, be sure to call the base class's OnBottomMarginChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnCollapsedChanged(System.EventArgs)">
            <summary>Raises the CollapsedChanged event.</summary>
            <remarks>When overriding OnCollapsedChanged in a derived class, be sure to call the base class's OnCollapsedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnKeepTogetherChanged(System.EventArgs)">
            <summary>Raises the KeepTogetherChanged event.</summary>
            <remarks>When overriding OnKeepTogetherChanged in a derived class, be sure to call the base class's OnKeepTogetherChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnMarginWidthChanged(System.EventArgs)">
            <summary>OBSOLETE: The OnMarginWidthChanged method is obsolete and has been replaced by the EventArgs) method. Raises the MarginWidthChanged event.</summary>
            <remarks>When overriding OnMarginWidthChanged in a derived class, be sure to call the base class's OnMarginWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnPageBreakChanged(System.EventArgs)">
            <summary>Raises the PageBreakChanged event.</summary>
            <remarks>When overriding OnPageBreakChanged in a derived class, be sure to call the base class's OnPageBreakChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnRowHeightChanged(System.EventArgs)">
            <summary>Raises the RowHeightChanged event.</summary>
            <remarks>When overriding OnRowHeightChanged in a derived class, be sure to call the base class's OnRowHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnRowHeightExpansionChanged(System.EventArgs)">
            <summary>Raises the RowHeightExpansionChanged event.</summary>
            <remarks>When overriding OnRowHeightExpansionChanged in a derived class, be sure to call the base class's OnRowHeightExpansionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnRowHeightExpansionLimitChanged(System.EventArgs)">
            <summary>Raises the RowHeightExpansionLimitChanged event.</summary>
            <remarks>When overriding OnRowHeightExpansionLimitChanged in a derived class, be sure to call the base class's OnRowHeightExpansionLimitChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnSideMarginWidthChanged(System.EventArgs)">
            <summary>Raises the SideMarginWidthChanged event.</summary>
            <remarks>When overriding OnSideMarginWidthChanged in a derived class, be sure to call the base class's OnSideMarginWidthChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.OnTopMarginChanged(System.EventArgs)">
            <summary>Raises the TopMarginChanged event.</summary>
            <remarks>When overriding OnTopMarginChanged in a derived class, be sure to call the base class's OnTopMarginChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetBottomBorder">
            <summary>Resets the property values of the BottomBorder report style.</summary>
            <remarks>    Calling the ResetBottomBorder method will set the     BottomBorder property to $$NULL$$ causing a new ReportLine to     be created when the BottomBorder property is accessed.     The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetBottomMargin">
            <summary>Resets the value of the BottomMargin property to its default value, DefaultBottomMargin.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetCollapsed">
            <summary>Resets the value of the Collapsed property to its default value, false.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetFooterRow">
            <summary>Resets the property values of the FooterRow report style.</summary>
            <remarks>    Calling the ResetFooterRow method will set the FooterRow     property to $$NULL$$ causing a new RowReportStyle to be created     when the FooterRow property is accessed.     The IsFooterRowDefined property should be consulted     before the FooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FooterRow report style have     been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetGroupManagerRow">
            <summary>Resets the property values of the GroupManagerRow report style.</summary>
            <remarks>    Calling the ResetGroupManagerRow method will set the     GroupManagerRow property to $$NULL$$ causing a new     RowReportStyle to be created when the GroupManagerRow property     is accessed.     The IsGroupManagerRowDefined property should be consulted     before the GroupManagerRow property is accessed to prevent a     new instance of a RowReportStyle from being created in the case     where none of the properties of the GroupManagerRow report     style have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetHeaderRow">
            <summary>Resets the property values of the HeaderRow report style.</summary>
            <remarks>    Calling the ResetHeaderRow method will set the HeaderRow     property to $$NULL$$ causing a new RowReportStyle to be created     when the HeaderRow property is accessed.     The IsHeaderRowDefined property should be consulted     before the HeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the HeaderRow report style have     been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetKeepTogether">
            <summary>Resets the value of the KeepTogether property to its default value, DefaultKeepTogether.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetMarginWidth">
            <summary>OBSOLETE: The ResetMaringWidth method is obsolete and has been replaced by the ResetSideMarginWidth method. Resets the value of the MarginWidth property to its default value, 10.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetPageBreak">
            <summary>Resets the value of the PageBreak property to its default value, DefaultPageBreak.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetRowHeight">
            <summary>Resets the value of the RowHeight property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetRowHeightExpansion">
            <summary>Resets the value of the RowHeightExpansion property to its default value, NeverExpand.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetRowHeightExpansionLimit">
            <summary>Resets the value of the RowHeightExpansionLimit property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetSideMarginWidth">
            <summary>Resets the value of the SideMarginWidth property to its default value, 10.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetSummaryRow">
            <summary>Resets the property values of the SummaryRow report style.</summary>
            <remarks>    Calling the ResetSummaryRow method will set the     SummaryRow property to $$NULL$$ causing a new RowReportStyle to     be created when the SummaryRow property is accessed.     The IsSummaryRowDefined property should be consulted     before the SummaryRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the SummaryRow report style     have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetTopBorder">
            <summary>Resets the property values of the TopBorder report style.</summary>
            <remarks>    Calling the ResetTopBorder method will set the TopBorder     property to $$NULL$$ causing a new ReportLine to be created     when the TopBorder property is accessed.     The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ResetTopMargin">
            <summary>Resets the value of the TopMargin property to its default value, DefaultTopMargin.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeBottomMargin">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeCollapsed">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeKeepTogether">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeMarginWidth">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializePageBreak">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeRowHeight">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeRowHeightExpansion">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeRowHeightExpansionLimit">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeSideMarginWidth">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyle.ShouldSerializeTopMargin">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.BottomBorder">
            <summary>Gets the report style of the group's bottom border.</summary>
            <remarks>    The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.     The value of the BottomBorder property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.BottomMargin">
            <summary>Gets or sets the height of the group's bottom margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the BottomMargin property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.Collapsed">
            <summary>Gets or sets a boolean value indicating if the group is collapsed when it is printed in the report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.DefaultBottomMargin">
            <summary>Gets the default value of the BottomMargin property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.DefaultKeepTogether">
            <summary>Gets the default value of the KeepTogether property.</summary>
            <remarks>    When overriding DefaultKeepTogether in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.DefaultPageBreak">
            <summary>Gets the default value of the PageBreak property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.DefaultTopMargin">
            <summary>Gets the default value of the TopMargin property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.FooterRow">
            <summary>Gets the report style of the Rows contained in the Group's FooterRows section.</summary>
            <remarks>    The IsFooterRowDefined property should be consulted     before the FooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FooterRow report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.GroupManagerRow">
            <summary>Gets the report style of the GroupManagerRows contained in the group.</summary>
            <remarks>    The IsGroupManagerRowDefined property should be consulted     before the GroupManagerRow property is accessed to prevent a     new instance of a RowReportStyle from being created in the case     where none of the properties of the GroupManagerRow report     style have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.HeaderRow">
            <summary>Gets the report style of the Rows contained in the Group's HeaderRows section.</summary>
            <remarks>    The IsHeaderRowDefined property should be consulted     before the HeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the HeaderRow report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsBottomBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the BottomBorder report style have been explicitly set.</summary>
            <remarks>    The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsBottomMarginDefined">
            <summary>Gets a boolean value indicating if the BottomMargin property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsCollapsedDefined">
            <summary>Gets a boolean value indicating if the Collapsed property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsFooterRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the FooterRow report style have been explicitly set.</summary>
            <remarks>    The IsFooterRowDefined property should be consulted     before the FooterRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the FooterRow report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsGroupManagerRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the GroupManagerRow report style have been explicitly set.</summary>
            <remarks>    The IsGroupManagerRowDefined property should be consulted     before the GroupManagerRow property is accessed to prevent a     new instance of a RowReportStyle from being created in the case     where none of the properties of the GroupManagerRow report     style have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsHeaderRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the HeaderRow report style have been explicitly set.</summary>
            <remarks>    The IsHeaderRowDefined property should be consulted     before the HeaderRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the HeaderRow report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsKeepTogetherDefined">
            <summary>Gets a boolean value indicating if the KeepTogether property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsMarginWidthDefined">
            <summary>OBSOLETE: The IsMarginWidthDefined property is obsolete and has been replaced by the IsSideMarginWidthDefined property. Gets a boolean value indicating if the MarginWidth property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsPageBreakDefined">
            <summary>Gets a boolean value indicating if the PageBreak property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsRowHeightDefined">
            <summary>Gets a boolean value indicating if the RowHeight property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsRowHeightExpansionDefined">
            <summary>Gets a boolean value indicating if the RowHeightExpansion property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsRowHeightExpansionLimitDefined">
            <summary>Gets a boolean value indicating if the RowHeightExpansionLimit property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsSideMarginWidthDefined">
            <summary>Gets a boolean value indicating if the SideMarginWidth property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsSummaryRowDefined">
            <summary>Gets a boolean value indicating if one or more properties of the SummaryRow report style have been explicitly set.</summary>
            <remarks>    The IsSummaryRowDefined property should be consulted     before the SummaryRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the SummaryRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsTopBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the TopBorder report style have been explicitly set.</summary>
            <remarks>    The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.IsTopMarginDefined">
            <summary>Gets a boolean value indicating if the TopMargin property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.KeepTogether">
            <summary>Gets or sets a boolean value indicating if the content of the group should be kept together when it is printed in a report.</summary>
            <remarks>    The value of the KeepTogether property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.MarginWidth">
            <summary>OBSOLETE: The MarginWidth property is obsolete and has been replaced by the SideMarginWidth property. Gets or sets the width of the group's margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.PageBreak">
            <summary>Gets or sets a value indicating when a page break should be applied.</summary>
            <remarks>    The value of the PageBreak property will not be inherited     from its parent in the case where it has not been explicitly     set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.RowHeight">
            <summary>Gets or sets the height, in hundredths of an inch, of the rows contained in the group.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the rows will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the rows will expand until all     their content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.     To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.RowHeightExpansion">
            <summary>Gets or sets a value indicating how the height of the rows contained in the group expands to their content.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the rows will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the rows will expand until all     their content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.RowHeightExpansionLimit">
            <summary>Gets or sets the height limit, in hundredths of an inch, of the rows contained in the group.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the rows will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the rows will expand until all     their content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.     To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.SideMarginWidth">
            <summary>Gets or sets the width of the group's side margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.SummaryRow">
            <summary>Gets the report style of the SummaryRows contained in the group.</summary>
            <remarks>    The IsSummaryRowDefined property should be consulted     before the SummaryRow property is accessed to prevent a new     instance of a RowReportStyle from being created in the case     where none of the properties of the SummaryRow report style     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.TopBorder">
            <summary>Gets the report style of the group's top border.</summary>
            <remarks>    The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.     The value of the TopBorder property will not be inherited     from its parent in the case where it has not been explicitly     set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.TopMargin">
            <summary>Gets or sets the height of the group's top margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the TopMargin property will not be inherited     from its parent in the case where it has not been explicitly     set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlBottomBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlFooterRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlGroupManagerRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlHeaderRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlSummaryRow">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyle.XmlTopBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.BottomMarginChanged">
            <summary>Raised when the value of the BottomMargin property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.CollapsedChanged">
            <summary>Raised when the value of the Collapsed property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.KeepTogetherChanged">
            <summary>Raised when the value of the KeepTogether property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.MarginWidthChanged">
            <summary>OBSOLETE: The MarginWidthChanged event is obsolete and has been replaced by the SideMarginWidthChanged event. Raised when the value of the MarginWidth property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.PageBreakChanged">
            <summary>Raised when the value of the PageBreak property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.RowHeightChanged">
            <summary>Raised when the value of the RowHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.RowHeightExpansionChanged">
            <summary>Raised when the value of the RowHeightExpansion property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.RowHeightExpansionLimitChanged">
            <summary>Raised when the value of the RowHeightExpansionLimit property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.SideMarginWidthChanged">
            <summary>Raised when the value of the SideMarginWidth property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.GroupReportStyle.TopMarginChanged">
            <summary>Raised when the value of the TopMargin property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.GroupReportStyleList">
            <summary>Contains a list of GroupReportStyle objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.#ctor">
            <summary>Initializes a new instance of the GroupReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.#ctor">
            <summary>Initializes a new instance of the GroupReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.#ctor(System.Int32)">
            <summary>Initializes a new instance of the GroupReportStyleList class specifying its initial capacity.</summary>
            <param name="initialCapacity">A value representing the initial capacity of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.Add(Xceed.Grid.Reporting.GroupReportStyle)">
            <summary>Adds a GroupReportStyle to the list.</summary>
            <returns>The index at which the GroupReportStyle was added.</returns>
            <param name="value">A reference to the GroupReportStyle object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.AddRange(Xceed.Grid.Reporting.GroupReportStyle[])">
            <summary>Adds the elements of a GroupReportStyle array to the end of the list.</summary>
            <param name="values">An array of GroupReportStyle objects representing the group report styles to add to the end of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.Clear">
            <summary>Removes all GroupReportStyle objects from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.Contains(Xceed.Grid.Reporting.GroupReportStyle)">
            <summary>Retrieves a boolean value indicating if a specific GroupReportStyle exists in the list.</summary>
            <returns>true if the GroupReportStyle exists in the list; false otherwise.</returns>
            <param name="value">A reference to the GroupReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.IndexOf(Xceed.Grid.Reporting.GroupReportStyle)">
            <summary>Searches for the specified GroupReportStyle and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the GroupReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.Insert(System.Int32,Xceed.Grid.Reporting.GroupReportStyle)">
            <summary>Inserts a GroupReportStyle into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the GroupReportStyle.</param>
            <param name="value">A reference to the GroupReportStyle object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new GroupReportStyle into the list.</summary>
            <param name="index">The zero-based index at which to insert the GroupReportStyle .</param>
            <param name="value">The new value of the GroupReportStyle at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.Remove(Xceed.Grid.Reporting.GroupReportStyle)">
            <summary>Removes the GroupReportStyle from the list.</summary>
            <param name="value">A reference to the GroupReportStyle object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.GroupReportStyleList.RemoveAt(System.Int32)">
            <summary>Removes the GroupReportStyle from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the GroupReportStyle.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.GroupReportStyleList.Item(System.Int32)">
            <summary>Gets the GroupReportStyle at the specified index.</summary>
            <param name="index">The zero-based index at which to get the GroupReportStyle.</param>
        </member>
        <member name="T:Xceed.Grid.Reporting.PropertyNameCollection">
            <summary>Contains a collection of case-sensitive property names.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.Add(System.String)">
            <summary>Adds the specified property name ot the collection.</summary>
            <returns>The zero-based index at which the property name was added to the collection.</returns>
            <param name="value">A string representing the property name to add to the collection.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.Clear">
            <summary>Removes all property names from the collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.Contains(System.String)">
            <summary>Retrieves a boolean value indicating if the specified property name is contained in the collection.</summary>
            <returns>true if the specified property name is contained in the collection; false otherwise.</returns>
            <param name="value">A string representing the name of the property name to find.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.IndexOf(System.String)">
            <summary>Retrieves the zero-based index of the specified property name.</summary>
            <returns>The zero-based index of the specified property name.</returns>
            <param name="value">A string representing the property name whose index is to be retrieved.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.Remove(System.String)">
            <summary>Removes the specified property name from the collection.</summary>
            <param name="value">A string representing the property name to remove from the collection.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.PropertyNameCollection.RemoveAt(System.Int32)">
            <summary>Removes the property name at the specified index from the collection.</summary>
            <param name="index">A zero-based value representing the index of the property name to remove from the collection.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.PropertyNameCollection.Item(System.Int32)">
            <summary>Gets the property name at the specified index.</summary>
            <param name="index">The zero-based index at which to get the property name.</param>
        </member>
        <member name="T:Xceed.Grid.Reporting.ReportLine">
            <summary>Class which represents a horizontal line, above or below a row or group, when it is printed in a report.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.#ctor">
            <summary>This constructor is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current report line.</summary>
            <returns>true if the specified object is equal to the current report line; false otherwise.</returns>
            <param name="obj">The object to compare with the current report line.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.GetHashCode">
            <summary>Retrieves the hash code of the report line.</summary>
            <returns>A value representing the hash code of the report line.</returns>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ResetDashStyle">
            <summary>Resets the value of the DashStyle property to its default value, DashStyle.Solid.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ResetForeColor">
            <summary>Resets the value of the Color property to its default value, Color.Black.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ResetThickness">
            <summary>Resets the value of the Thickness property to its default value, ReportLineThickness.None.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ShouldSerializeDashStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ShouldSerializeThickness">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportLine.ShouldSerializeXmlForeColor">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.DashStyle">
            <summary>Gets or sets the dash style of the report line.</summary>
            <remarks>DashStyle.Custom is not supported.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.ForeColor">
            <summary>Gets or sets the color of the report line.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.IsDashStyleDefined">
            <summary>Gets or sets a boolean value indicating if the DashStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.IsForeColorDefined">
            <summary>Gets or sets a boolean value indicating if the Color property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.IsThicknessDefined">
            <summary>Gets or sets a boolean value indicating if the Thickness property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.Thickness">
            <summary>Gets or sets the thickness of the report line.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportLine.XmlForeColor">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.ReportSettings">
            <summary>Class which represents the report settings of a GridControl.</summary>
            <remarks>    The report settings constitute various parameters of a     report that generally are specific to a grid; that have no     place in a ReportStyleSheet or ReportStyle instance. Usually a     user would want these settings saved each time he prints a     report with a specific grid. This saving feature is the default     behavior of ReportSettings.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Load">
            <summary>Loads the report settings from the XML file contained in the DefaultPath.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Load">
            <summary>Loads the report settings from the XML file contained in the DefaultPath.</summary>
            <remarks>    Using this overload, the report settings filename will be     comprised of the name of the grid (Xceed.Grid.GridControl.Name)     and the name of the parent form.     Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be loaded.     It is not appropriate to use this method in the case     where the grid is always bound to a different data     source.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Load(System.String)">
            <summary>Loads the report settings from the specified XML file.</summary>
            <remarks>    Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be loaded.</remarks>
            <param name="fileName">A string representing the fully-qualified path and filename of the XML file from which to load the report settings.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Load(System.IO.Stream)">
            <summary>Loads the XML report settings from the specified Stream.</summary>
            <remarks>    Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be loaded.</remarks>
            <param name="stream">A Stream from which to load the XML report settings. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetColor">
            <summary>Resets the value of the Color property to its default value, false.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetColumnLayout">
            <summary>Resets the value of the ColumnLayout property to its default value, ColumnLayout.SpanAcrossPages.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetDefaultPath">
            <summary>Resets the value of the DefaultPath property to its default value, LocalUserAppDataPath.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetLandscape">
            <summary>Resets the value of the Landscape property to its default value, false.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetMargins">
            <summary>Resets the value of the Margins property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetPaperSize">
            <summary>Resets the value of the PaperSize property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetPaperSourceName">
            <summary>Resets the value of the PaperSourceName property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetPrinterName">
            <summary>Resets the value of the PrinterName property to its default value.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.ResetTitle">
            <summary>Resets the value of the Title property to its default value, Title.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Save">
            <summary>Saves the values of the properties specified by the PersistedColumnProperties and PersistedSettings properties to a file in the DefaultPath.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Save">
            <summary>Saves the values of the properties specified by the PersistedColumnProperties and PersistedSettings properties to a file in the DefaultPath.</summary>
            <remarks>    The name of the file will be comprised of the name of the     grid (Xceed.Grid.GridControl.Name) and the name of the parent     form.     It is not appropriate to use this method in the case     where the grid is always bound to a different data     source.     Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be saved.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Save(System.String)">
            <summary>Saves the report settings to the specified XML file.</summary>
            <remarks>    Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be saved.</remarks>
            <param name="fileName">A string representing the fully-qualified path and filename of the XML file to which to save the report settings.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.ReportSettings.Save(System.IO.Stream)">
            <summary>Saves the report settings to the specified Stream.</summary>
            <remarks>    Only the properties specified by the     PersistedColumnProperties and PersistedSettings properties will     be saved.</remarks>
            <param name="stream">The Stream to which to save the report settings. Cannot be $$NULL$$.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.Color">
            <summary>Gets or sets a boolean value indicating if the report should be printed in color.</summary>
            <remarks>    If IsColorDefined returns false, the value of the Color     property might not represent the actual state as the printer's     default value will be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.ColumnLayout">
            <summary>Gets or sets a value indicating how columns which surpass the available page width are printed in a report.</summary>
            <remarks>    When set to FitToPage, the width of the columns react as     though they had a "weight". Reverting to SpanAcrossPages will     not modify the values assigned to the Width property while in     FitToPage mode. To cancel the assigned "weights", the     ResetWidth method must be called for each column whose width is     to be modified.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.CustomVariables">
            <summary>Gets a dictionary of case-insensitive custom variables.</summary>
            <remarks>             The following table provides a list of the supported         default variables and their definitions.                                       Supported variables                 Descriptions                                           PAGE[ format=["]format_specifier["] ]                 The current page.                                           TOTALPAGES[ format=format_specifier]                 The total number of                 pages.                                           DATETIME[ format=["]format_specifier["]                 ]                 The current date and time. By default,                 the system short date pattern will be                 used.                                           TITLE[ format=["]format_specifier["] ]                 The title of the report.                                All items placed in square brackets [] are optional.     If the format_specifier contains spaces, then quotes     must be used.     In addition to the default variables, custom variables     can be provided through the CustomVariables property. The     string representation of the default variables as well as the     custom ones can be modified during the     Report.QueryVariableText event.              The following example demonstrates how to set the         TextFormat property to display the current date.           Dim report As New Report( GridControl1 ) report.ReportStyleSheet.PageHeader.LeftElement.TextFormat = "The current date is: DATETIME format=""dd MMM yy""" report.PrintPreview()             Report report = new Report( gridControl1 ); report.ReportStyleSheet.PageHeader.LeftElement.TextFormat = "The current date is: DATETIME format=\"dd MMM yy\""; report.PrintPreview();       </remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.DefaultPath">
            <summary>Gets or sets the default path from which the XML files containing the report settings are saved and loaded.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsColorDefined">
            <summary>Gets a boolean value indicating if the Color property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsColumnLayoutDefined">
            <summary>Gets a boolean value indicating if the ColumnLayout property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsLandscapeDefined">
            <summary>Gets a boolean value indicating if the Landscape property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsMarginsDefined">
            <summary>Gets a boolean value indicating if the Margins property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsPaperSizeDefined">
            <summary>Gets a boolean value indicating if the PaperSize property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsPaperSourceNameDefined">
            <summary>Gets a boolean value indicating if the PaperSourceName property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsPrinterNameDefined">
            <summary>Gets a boolean value indicating if the PrinterName property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.IsTitleDefined">
            <summary>Gets a boolean value indicating if the Title property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.Landscape">
            <summary>Gets or sets a boolean value indicating if the report should be printed in landscape orientation.</summary>
            <remarks>    If IsLandscapeDefined returns false, the value of the     Landscape property might not represent the actual state as the     printer's default value will be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.Margins">
            <summary>Gets or sets the margins of the printed report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PaperSize">
            <summary>Gets or sets the size of the paper on which the report will be printed.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PaperSource">
            <summary>Gets the paper tray from which the printer gets paper.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PaperSourceName">
            <summary>Gets or sets the name of the paper source.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PersistedColumnProperties">
            <summary>Gets a collection containing the case-sensitive names of the ColumnReportStyle properties that will be saved when the Save method is called, and loaded when the Load method is called.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PersistedSettings">
            <summary>Gets the case-sensitive names of the properties of the ReportSettings that will be persisted with the grid and saved or loaded when the Save or Load methods are called.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.PrinterName">
            <summary>Gets or sets the name of the printer on which to print the report.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.ReportSettings.Title">
            <summary>Gets or sets the title of the report.</summary>
            <remarks>If set to $$NULL$$, Title will be used.</remarks>
        </member>
        <member name="T:Xceed.Grid.Reporting.RowReportStyle">
            <summary>Represents the report style of a Row.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.#ctor">
            <summary>Initializes a new instance of the RowReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.#ctor">
            <summary>Initializes a new instance of the RowReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnBottomMarginChanged(System.EventArgs)">
            <summary>Raises the BottomMarginChanged event.</summary>
            <remarks>When overriding OnBottomMarginChanged in a derived class, be sure to call the base class's OnBottomMarginChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnIndentedChanged(System.EventArgs)">
            <summary>Raises the IndentedChanged event.</summary>
            <remarks>When overriding OnIndentedChanged in a derived class, be sure to call the base class's OnIndentedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnPageBreakChanged(System.EventArgs)">
            <summary>Raises the PageBreakChanged event.</summary>
            <remarks>When overriding OnPageBreakChanged in a derived class, be sure to call the base class's OnPageBreakChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnRepeatOnEachPageChanged(System.EventArgs)">
            <summary>Raises the RepeatOnEachPageChanged event.</summary>
            <remarks>When overriding OnRepeatOnEachPageChanged in a derived class, be sure to call the base class's OnRepeatOnEachPageChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnRowHeightChanged(System.EventArgs)">
            <summary>Raises the RowHeightChanged event.</summary>
            <remarks>When overriding OnRowHeightChanged in a derived class, be sure to call the base class's OnRowHeightChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnRowHeightExpansionChanged(System.EventArgs)">
            <summary>Raises the RowHeightExpansionChanged event.</summary>
            <remarks>When overriding OnRowHeightExpansionChanged in a derived class, be sure to call the base class's OnRowHeightExpansionChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnRowHeightExpansionLimitChanged(System.EventArgs)">
            <summary>Raises the RowHeightExpansionLimitChanged event.</summary>
            <remarks>When overriding OnRowHeightExpansionLimitChanged in a derived class, be sure to call the base class's OnRowHeightExpansionLimitChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnTopMarginChanged(System.EventArgs)">
            <summary>Raises the TopMarginChanged event.</summary>
            <remarks>When overriding OnTopMarginChanged in a derived class, be sure to call the base class's OnTopMarginChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.OnVisibleWhenCollapsedChanged(System.EventArgs)">
            <summary>Raises the VisibleWhenCollapsedChanged event.</summary>
            <remarks>When overriding OnVisibleWhenCollapsedChanged in a derived class, be sure to call the base class's OnVisibleWhenCollapsedChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetBottomBorder">
            <summary>Resets the property values of the BottomBorder report style.</summary>
            <remarks>    Calling the ResetBottomBorder method will set the     BottomBorder property to $$NULL$$ causing a new ReportLine to     be created when the BottomBorder property is accessed.     The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetBottomMargin">
            <summary>Resets the value of the BottomMargin property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetIndented">
            <summary>Resets the value of the Indented property to its default value, true.</summary>
            <remarks>    Although the default value of the Indented property is     true, if the Indented property has not been explicitly set, the     default value of the Indented property will vary according to     the type of row when the report is created.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetPageBreak">
            <summary>Resets the value of the PageBreak property to its default value, DefaultPageBreak.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetRepeatOnEachPage">
            <summary>Resets the value of the RepeatOnEachPage property to its default value, DefaultRepeatOnEachPage.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetRowHeight">
            <summary>Resets the value of the RowHeight property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetRowHeightExpansion">
            <summary>Resets the value of the RowHeightExpansion property to its default value, NeverExpand.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetRowHeightExpansionLimit">
            <summary>Resets the value of the RowHeightExpansionLimit property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetTopBorder">
            <summary>Resets the property values of the TopBorder report style.</summary>
            <remarks>    Calling the ResetTopBorder method will set the TopBorder     property to $$NULL$$ causing a new ReportLine to be created     when the TopBorder property is accessed.     The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetTopMargin">
            <summary>Resets the value of the TopMargin property to its default value, 0.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ResetVisibleWhenCollapsed">
            <summary>Resets the value of the VisibleWhenCollapsed property to its default value, false.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeBottomMargin">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeIndented">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializePageBreak">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeRepeatOnEachPage">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeRowHeight">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeRowHeightExpansion">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeRowHeightExpansionLimit">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeTopMargin">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyle.ShouldSerializeVisibleWhenCollapsed">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.BottomBorder">
            <summary>Gets the report style of the row's bottom border.</summary>
            <remarks>    The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.BottomMargin">
            <summary>Gets or sets the height of the row's bottom margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the BottomMargin property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.DefaultPageBreak">
            <summary>Gets the default value of the PageBreak property.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.DefaultRepeatOnEachPage">
            <summary>Gets the default value of the RepeatOnEachPage property.</summary>
            <remarks>    When overriding DefaultRepeatOnEachPage in a derived     class, the value returned by your implementation should     not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.Indented">
            <summary>Gets or sets a boolean value indicating if the row is indented.</summary>
            <remarks>    Although the default value of the Indented property is     true, if the Indented property has not been explicitly set, the     default value of the Indented property will vary according to     the type of row when the report is created.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsBottomBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the BottomBorder report style have been explicitly set.</summary>
            <remarks>    The IsBottomBorderDefined property should be consulted     before the BottomBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the BottomBorder report style have     been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsBottomMarginDefined">
            <summary>Gets a boolean value indicating if the BottomMargin property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsIndentedDefined">
            <summary>Gets a boolean value indicating if the Indented property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsPageBreakDefined">
            <summary>Gets a boolean value indicating if the PageBreak property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsRepeatOnEachPageDefined">
            <summary>Gets a boolean value indicating if the RepeatOnEachPage property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsRowHeightDefined">
            <summary>Gets a boolean value indicating if the RowHeight property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsRowHeightExpansionDefined">
            <summary>Gets a boolean value indicating if the RowHeightExpansion property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsRowHeightExpansionLimitDefined">
            <summary>Gets a boolean value indicating if the RowHeightExpansionLimit property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsTopBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the TopBorder report style have been explicitly set.</summary>
            <remarks>    The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsTopMarginDefined">
            <summary>Gets a boolean value indicating if the TopMargin property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.IsVisibleWhenCollapsedDefined">
            <summary>Gets a boolean value indicating if the VisibleWhenCollapsed property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.PageBreak">
            <summary>Gets or sets a value indicating when a page break should be applied.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.RepeatOnEachPage">
            <summary>Gets or sets a boolean value indicating if the row should be repeated on each page when it is printed in a report.</summary>
            <remarks>    The value of the RepeatOnEachPage property will be     ignored if it is set on the RowReportStyle of one of the     DataRows in a GridReportStyle.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.RowHeight">
            <summary>Gets or sets the height of the row, in hundredths of an inch.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the row will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the row will expand until all     its content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.     To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.RowHeightExpansion">
            <summary>Gets or sets a value indicating how the height of the row expands to its content.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the row will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the row will expand until all     its content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.RowHeightExpansionLimit">
            <summary>Gets or sets the height limit of the row, in hundredths of an inch.</summary>
            <remarks>    If RowHeightExpansionLimit is greater than zero and     RowHeightExpansion is set to     RowHeightExpansion.ExpandUpToLimit, the height of the row will     expand, if necessary, until the value defined by the     RowHeightExpansionLimit property. If RowHeightExpansion is set     to WithoutLimits, the height of the row will expand until all     its content is displayed.     If RowHeightExpansion is set to     RowHeightExpansion.NeverExpand, then the value of the RowHeight     property indicates a fixed height.     To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.TopBorder">
            <summary>Gets the report style of the row's top border.</summary>
            <remarks>    The IsTopBorderDefined property should be consulted     before the TopBorder property is accessed to prevent a new     instance of a ReportLine from being created in the case where     none of the properties of the TopBorder report style have been     explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.TopMargin">
            <summary>Gets or sets the height of the row's top margin, in hundredths of an inch.</summary>
            <remarks>    To convert values from a specific Unit to hundredth's of     an inch, and vice-versa, a UnitConverter can be used.     The value of the TopMargin property will not be inherited     from its parent in the case where it has not been explicitly     set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.VisibleWhenCollapsed">
            <summary>Gets or sets a boolean value indicating if the row is visible when its parent group is collapsed.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.XmlBottomBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyle.XmlTopBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.BottomMarginChanged">
            <summary>Raised when the value of the BottomMargin property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.IndentedChanged">
            <summary>Raised when the value of the Indented property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.PageBreakChanged">
            <summary>Raised when the value of the PageBreak property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.RepeatOnEachPageChanged">
            <summary>Raised when the value of the RepeatOnEachPage property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.RowHeightChanged">
            <summary>Raised when the value of the RowHeight property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.RowHeightExpansionChanged">
            <summary>Raised when the value of the RowHeightExpansion property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.RowHeightExpansionLimitChanged">
            <summary>Raised when the value of the RowHeightExpansionLimit property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.TopMarginChanged">
            <summary>Raised when the value of the TopMargin property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.RowReportStyle.VisibleWhenCollapsedChanged">
            <summary>Raised when the value of the VisibleWhenCollapsed property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.RowReportStyleList">
            <summary>Contains a list of RowReportStyle objects.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.#ctor">
            <summary>Initializes a new instance of the RowReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.#ctor">
            <summary>Initializes a new instance of the RowReportStyleList class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.#ctor(System.Int32)">
            <summary>Initializes a new instance of the RowReportStyleList class specifying its initial capacity.</summary>
            <param name="initialCapacity">A value representing the initial capacity of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.Add(Xceed.Grid.Reporting.RowReportStyle)">
            <summary>Adds a RowReportStyle to the list.</summary>
            <returns>The index at which the RowReportStyle was added.</returns>
            <param name="value">A reference to the RowReportStyle object to add to the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.AddRange(Xceed.Grid.Reporting.RowReportStyle[])">
            <summary>Adds the elements of a RowReportStyle array to the end of the list.</summary>
            <param name="values">An array of RowReportStyle objects representing the row report styles to add to the end of the list.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.Clear">
            <summary>Removes all RowReportStyle objects from the list.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.Contains(Xceed.Grid.Reporting.RowReportStyle)">
            <summary>Retrieves a boolean value indicating if a specific RowReportStyle exists in the list.</summary>
            <returns>true if the RowReportStyle exists in the list; false otherwise.</returns>
            <param name="value">A reference to the RowReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.IndexOf(Xceed.Grid.Reporting.RowReportStyle)">
            <summary>Searches for the specified RowReportStyle and returns the zero-based index of the first occurrence within the list.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, returns -1.</returns>
            <param name="value">A reference to the RowReportStyle to locate.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.Insert(System.Int32,Xceed.Grid.Reporting.RowReportStyle)">
            <summary>Inserts a RowReportStyle into the list at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the RowReportStyle.</param>
            <param name="value">A reference to the RowReportStyle object to insert.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.OnInsert(System.Int32@,System.Object,System.Boolean@)">
            <summary>Performs additional custom processes before inserting a new RowReportStyle into the list.</summary>
            <param name="index">The zero-based index at which to insert the RowReportStyle .</param>
            <param name="value">The new value of the RowReportStyle at index.</param>
            <param name="cancel">true to cancel the operation; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.Remove(Xceed.Grid.Reporting.RowReportStyle)">
            <summary>Removes the RowReportStyle from the list.</summary>
            <param name="value">A reference to the RowReportStyle object to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.RowReportStyleList.RemoveAt(System.Int32)">
            <summary>Removes the RowReportStyle from the list at the specified index.</summary>
            <param name="index">The zero-based index at which to remove the RowReportStyle.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.RowReportStyleList.Item(System.Int32)">
            <summary>Gets the RowReportStyle at the specified index.</summary>
            <param name="index">The zero-based index at which to get the RowReportStyle.</param>
        </member>
        <member name="T:Xceed.Grid.Reporting.SummaryRowReportStyle">
            <summary>Represents the report style of a SummaryRow.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.SummaryRowReportStyle.#ctor">
            <summary>Initializes a new instance of the SummaryRowReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.SummaryRowReportStyle.#ctor">
            <summary>Initializes a new instance of the SummaryRowReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.SummaryRowReportStyle.ResetStatFieldBottomBorder">
            <summary>Resets the property values of the StatFieldBottomBorder report style.</summary>
            <remarks>    Calling the ResetStatFieldBottomBorder method will set     the StatFieldBottomBorder property to $$NULL$$ causing a new     SummaryRowReportStyle to be created when the     StatFieldBottomBorder property is accessed.     The IsStatFieldBottomBorderDefined property should be     consulted before the StatFieldBottomBorder property is accessed     to prevent a new instance of a SummaryRowReportStyle from being     created in the case where none of the properties of the     StatFieldBottomBorder report style have been explicitly     set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Reporting.SummaryRowReportStyle.ResetStatFieldTopBorder">
            <summary>Resets the property values of the StatFieldTopBorder report style.</summary>
            <remarks>    Calling the ResetStatFieldTopBorder method will set the     StatFieldTopBorder property to $$NULL$$ causing a new     SummaryRowReportStyle to be created when the StatFieldTopBorder     property is accessed.     The IsStatFieldTopBorderDefined property should be     consulted before the StatFieldTopBorder property is accessed to     prevent a new instance of a SummaryRowReportStyle from being     created in the case where none of the properties of the     StatFieldTopBorder report style have been explicitly     set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.IsStatFieldBottomBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the StatFieldBottomBorder report style have been explicitly set.</summary>
            <remarks>    The IsStatFieldBottomBorderDefined property should be     consulted before the StatFieldBottomBorder property is accessed     to prevent a new instance of a SummaryRowReportStyle from being     created in the case where none of the properties of the     StatFieldBottomBorder report style have been explicitly     set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.IsStatFieldTopBorderDefined">
            <summary>Gets a boolean value indicating if one or more properties of the StatFieldTopBorder report style have been explicitly set.</summary>
            <remarks>    The IsStatFieldTopBorderDefined property should be     consulted before the StatFieldTopBorder property is accessed to     prevent a new instance of a SummaryRowReportStyle from being     created in the case where none of the properties of the     StatFieldTopBorder report style have been explicitly     set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.StatFieldBottomBorder">
            <summary>Gets the report style of the bottom border of the SummaryCells in the row which have a StatFunction defined.</summary>
            <remarks>    The StatFieldBottomBorder property only applies to     SummaryCells whose StatFunction property has been     defined.     If the BottomBorder of the parent row is defined, it will     replace the StatFieldBottomBorder.     The IsStatFieldBottomBorderDefined property should be     consulted before the StatFieldBottomBorder property is accessed     to prevent a new instance of a ReportLine from being created in     the case where none of the properties of the     StatFieldBottomBorder report style have been explicitly     set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.StatFieldTopBorder">
            <summary>Gets the report style of the top border of the SummaryCells in the row which have a StatFunction defined.</summary>
            <remarks>    The StatFieldTopBorder property only applies to     SummaryCells whose StatFunction property has been     defined.     If the TopBorder of the parent row is defined, it will     replace the StatFieldTopBorder.     The IsStatFieldTopBorderDefined property should be     consulted before the StatFieldTopBorder property is accessed to     prevent a new instance of a ReportLine from being created in     the case where none of the properties of the StatFieldTopBorder     report style have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.XmlStatFieldBottomBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.SummaryRowReportStyle.XmlStatFieldTopBorder">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.UnitConverter">
            <summary>The UnitConverter class allows a value to be converted to and from a specified Unit, or to and from hundredths of an inch.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.UnitConverter.#ctor(Xceed.Grid.Reporting.Unit)">
            <summary>Initializes a new instance of the UnitConverter class specifying the Unit which will be used to convert values to and from hundredth's of an inch.</summary>
            <param name="baseUnit">The Unit which will be used to convert values to and from hundredth's of an inch.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.UnitConverter.ConvertFrom(System.Int32)">
            <summary>Converts the specified from hundredth's of an inch to the current BaseUnit.</summary>
            <returns>A value representing the converted value in the current BaseUnit.</returns>
            <param name="value">The value, in hundredths of an inch, to convert.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.UnitConverter.ConvertTo(System.Double)">
            <summary>Converts the specified value from the current BaseUnit to hundredth's of an inch.</summary>
            <returns>A value representing converted value in hundredth's of an inch. The value will be rounded using a banker's round.</returns>
            <param name="value">The value, in BaseUnit, to convert.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.UnitConverter.FromHundredthsOfAnInch(System.Int32,Xceed.Grid.Reporting.Unit)">
            <summary>Converts the value from hundredth's of an inch to the specified Unit.</summary>
            <returns>A value representing the converted value in the specified unit.</returns>
            <param name="value">The value to convert.</param>
            <param name="destinationUnit">A Unit representing the destination unit to which to convert value.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.UnitConverter.ToHundredthsOfAnInch(System.Double,Xceed.Grid.Reporting.Unit)">
            <summary>Converts the value from the specified Unit to hundredth's of an inch.</summary>
            <returns>A value representing the converted value in hundredth's of an inch. The value will be rounded using a banker's round.</returns>
            <param name="value">The value to convert.</param>
            <param name="sourceUnit">A Unit representing the unit of value.</param>
        </member>
        <member name="P:Xceed.Grid.Reporting.UnitConverter.BaseUnit">
            <summary>Gets or sets the Unit which will be used to convert values to and from hundredth's of an inch.</summary>
        </member>
        <member name="T:Xceed.Grid.Reporting.VisualGridElementReportStyle">
            <summary>Represents the report style of a VisualGridElement.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.#ctor">
            <summary>Initializes a new instance of the VisualGridElementReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.#ctor">
            <summary>Initializes a new instance of the VisualGridElementReportStyle class.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageAlignmentChanged event.</summary>
            <remarks>When overriding OnBackgroundImageAlignmentChanged in a derived class, be sure to call the base class's OnBackgroundImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.OnBackgroundImageChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageChanged event.</summary>
            <remarks>When overriding OnBackgroundImageChanged in a derived class, be sure to call the base class's OnBackgroundImageChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.OnBackgroundImageStyleChanged(System.EventArgs)">
            <summary>Raises the BackgroundImageStyleChanged event.</summary>
            <remarks>When overriding OnBackgroundImageStyleChanged in a derived class, be sure to call the base class's OnBackgroundImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ResetBackgroundImage">
            <summary>Resets the value of the BackgroundImage property to its default value, $$NULL$$.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ResetBackgroundImageAlignment">
            <summary>Resets the value of the BackgroundImage property to its default value, ContentAlignment.TopLeft.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ResetBackgroundImageStyle">
            <summary>Resets the value of the BackgroundImage property to its default value, ImageStyle.Align.</summary>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ShouldSerializeBackgroundImageAlignment">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ShouldSerializeBackgroundImageStyle">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="M:Xceed.Grid.Reporting.VisualGridElementReportStyle.ShouldSerializeXmlBackgroundImage">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImage">
            <summary>Gets or sets the background image of the grid element when it is printed in a report.</summary>
            <remarks>    The value of the BackgroundImage property will not be     inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImageAlignment">
            <summary>Gets or sets the alignment of the grid element's BackgroundImage when it is printed in a report.</summary>
            <remarks>    The value of the BackgroundImageAlignment property will     not be inherited from its parent in the case where it has not     been explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImageStyle">
            <summary>Gets or sets the style of the grid element's BackgroundImage when it is printed in a report.</summary>
            <remarks>    The value of the BackgroundImageStyle property will not     be inherited from its parent in the case where it has not been     explicitly set (non-ambient).</remarks>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.IsBackgroundImageAlignmentDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageAlignment property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.IsBackgroundImageDefined">
            <summary>Gets a boolean value indicating if the BackgroundImage property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.IsBackgroundImageStyleDefined">
            <summary>Gets a boolean value indicating if the BackgroundImageStyle property has been explicitly set.</summary>
        </member>
        <member name="P:Xceed.Grid.Reporting.VisualGridElementReportStyle.XmlBackgroundImage">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImageAlignmentChanged">
            <summary>Raised when the value of the BackgroundImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImageChanged">
            <summary>Raised when the value of the BackgroundImage property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Reporting.VisualGridElementReportStyle.BackgroundImageStyleChanged">
            <summary>Raised when the value of the BackgroundImageStyle property is changed.</summary>
        </member>
        <member name="N:Xceed.Grid.Viewers">
            <summary>The Xceed.Grid.Viewers namespace regroups all the classes which can be used to view the content of cells.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.ViewerImageAlignment">
            <summary>Value representing the alignment of a CellViewerManager's image in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.CellAmbient">
            <summary>The alignment of the image will be the same as its underlying Cell.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.BottomCenter">
            <summary>The image will be aligned to the bottom center in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.BottomLeft">
            <summary>The image will be aligned to the bottom left in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.BottomRight">
            <summary>The image will be aligned to the bottom right in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.MiddleCenter">
            <summary>The image will be aligned to the middle center in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.MiddleLeft">
            <summary>The image will be aligned to the middle left in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.MiddleRight">
            <summary>The image will be aligned to the middle right in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.TopCenter">
            <summary>The image will be aligned to the top center in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.TopLeft">
            <summary>The image will be aligned to the top left in the ImageArea.</summary>
        </member>
        <member name="F:Xceed.Grid.Viewers.ViewerImageAlignment.TopRight">
            <summary>The image will be aligned to the top right in the ImageArea.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.CellViewerEventArgs">
            <summary>Provides information on the cell and the control used to view its content.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell)">
            <summary>Initializes a new instance of the CellViewerEventArgs specifying the cell whose content is displayed as well as the control used to view it.</summary>
            <param name="control">The Control used to view the content of the cell.</param>
            <param name="cell">The Cell whose content is displayed.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerEventArgs.Cell">
            <summary>Gets the Cell whose content is being displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerEventArgs.Control">
            <summary>Gets the Control used to view the content of the Cell.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.CellViewerManager">
            <summary>The CellViewerManager class allows for any control to be used as a viewer to display the content of a cell as well as allows custom painting of a cell's background and foreground.</summary>
            <remarks>    In addition to the default CellViewerManager's that are     provided, custom CellViewerManager's can be created by deriving     from the CellViewerManager class and implementing the required     functionalities, or by handling the events that are raised by     the CellViewerManager class.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.#ctor">
            <summary>Initializes a new instance of the CellViewerManager class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.#ctor">
            <summary>Initializes a new instance of the CellViewerManager class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.#ctor(System.Windows.Forms.Control,System.String)">
            <summary>Initializes a new instance of the CellViewerManager class specifying the control used to view a cell's content as well as the property used to get/set the control's value.</summary>
            <param name="control">A Control representing the control used to view a cell's content.</param>
            <param name="propertyName">A string representing the property used to get/set the control's value.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.CalculateAreas(System.Int32,Xceed.UI.Margins,Xceed.UI.Margins,System.Drawing.Rectangle,System.Drawing.Rectangle@,System.Drawing.Rectangle@)">
            <summary>Calculates the text and image areas of the cell viewer.</summary>
            <param name="defaultImageWidth">The default width, in pixels, of the viewer's Image.</param>
            <param name="imagePadding">The padding of the viewer's Image.</param>
            <param name="textPadding">The padding of the viewer's text.</param>
            <param name="cellDisplayRectangle">A Rectangle representing the associated cell's DisplayRectangle.</param>
            <param name="textArea">A Rectangle representing the area where the viewer's text is to be displayed.</param>
            <param name="imageArea">A Rectangle representing the area where the viewer's image is to be displayed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.CalculateControlBounds(Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the viewer and raises the QueryControlBounds event.</summary>
            <param name="cell">The Cell whose content is to be displayed by the viewer.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the viewer.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.CalculateControlBoundsCore(Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the viewer.</summary>
            <param name="cell">The Cell whose content is to be viewed by the viewer.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the viewer.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.Dispose">
            <summary>Releases all resources.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.Dispose">
            <summary>Releases all resources.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.Dispose(System.Boolean)">
            <summary>Releases all resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.Finalize">
            <summary>Allows the object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetAccessibleText(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the viewer's accessibilty text for the specified Cell and raises the QueryAccessibleText event.</summary>
            <returns>A string representing the viewer's accessibilty text. By default, the result of Object) will be returned.</returns>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetAccessibleTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the viewer's accessibilty text for the specified Cell.</summary>
            <returns>A string representing the viewer's accessibilty text. By default, the result of Object) will be returned.</returns>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetFittedHeight(Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted height of the viewer in pixels and raises the QueryFittedHeight event.</summary>
            <returns>A value representing the fitted height of the viewer in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the viewer will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetFittedHeightCore(Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted height of the viewer in pixels.</summary>
            <returns>A value representing the fitted height of the viewer in pixels. If -1, then no fitted height is required or desired.</returns>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">An AutoHeightMode value indicating in regards to what factors the fitted height of the viewer will be calculated.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">Gets the Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetFittedWidth(Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted width of the viewer in pixels and raises the QueryFittedWidth event.</summary>
            <returns>A value representing the fitted width of the viewer in pixels. If -1, then no fitted width is required or desired.</returns>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetFittedWidthCore(Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean)">
            <summary>Retrieves a value representing the fitted width of the viewer in pixels.</summary>
            <returns>A value representing the fitted width of the viewer in pixels. If -1, then no fitted width is required or desired.</returns>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetImage">
            <summary>Retrieves the image displayed by the viewer and raises the QueryImage event.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetImage(System.Object)">
            <summary>Retrieves the image displayed by the viewer and raises the QueryImage event.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetImage(System.Object,Xceed.Grid.CellImageFormatInfo)">
            <summary>Retrieves the image displayed by the viewer and raises the QueryImage event.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetImage(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the image displayed by the viewer and raises the QueryImage event.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetImageCore(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the image displayed by the viewer.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetService(System.Type)">
            <summary>Returns an object that represents a service provided by the Component or by its Container.</summary>
            <returns>    An Object that represents a service provided by the     Component.     This value is $$NULL$$ if the Component does not provide     the specified service.</returns>
            <param name="service">A service provided by the Component.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetText">
            <summary>Retrieves the text displayed by the viewer and raises the QueryText event.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetText(System.Object)">
            <summary>Retrieves the text displayed by the viewer and raises the QueryText event.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetText(System.Object,Xceed.Grid.CellTextFormatInfo)">
            <summary>Retrieves the text displayed by the viewer and raises the QueryText event.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetText(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer and raises the QueryText event.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.GetTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating if the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnImageAlignmentChanged(System.EventArgs)">
            <summary>Raises the ImageAlignmentChanged event.</summary>
            <remarks>When overriding OnImageAlignmentChanged in a derived class, be sure to call the base class's OnImageAlignmentChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnImageAreaChanged(System.EventArgs)">
            <summary>Raises the ImageAreaChanged event.</summary>
            <remarks>When overriding OnImageAreaChanged in a derived class, be sure to call the base class's OnImageAreaChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnImagePaddingChanged(System.EventArgs)">
            <summary>Raises the ImagePaddingChanged event.</summary>
            <remarks>When overriding OnImagePaddingChanged in a derived class, be sure to call the base class's OnImagePaddingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnImageSizeChanged(System.EventArgs)">
            <summary>Raises the ImageSizeChanged event.</summary>
            <remarks>When overriding OnImageSizeChanged in a derived class, be sure to call the base class's OnImageSizeChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnImageStyleChanged(System.EventArgs)">
            <summary>Raises the ImageStyleChanged event.</summary>
            <remarks>When overriding OnImageStyleChanged in a derived class, be sure to call the base class's OnImageStyleChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnPreserveImageAspectRatioChanged(System.EventArgs)">
            <summary>Raises the PreserveImageAspectRatioChanged event.</summary>
            <remarks>When overriding OnPreserveImageAspectRatioChanged in a derived class, be sure to call the base class's OnPreserveImageAspectRatioChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.OnTextPaddingChanged(System.EventArgs)">
            <summary>Raises the TextPaddingChanged event.</summary>
            <remarks>When overriding OnTextPaddingChanged in a derived class, be sure to call the base class's OnTextPaddingChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.PaintCellBackground(Xceed.Grid.Cell,Xceed.Grid.GridPaintEventArgs,System.Boolean@)">
            <summary>Paints the background of the cell.</summary>
            <param name="cell">A reference to the Cell whose background is to be painted.</param>
            <param name="e">A GridPaintEventArgs that contains the necessary information.</param>
            <param name="handled">true if the cell's background was painted by the CellViewerManager; false if the cell painted its own background.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.PaintCellForeground(Xceed.Grid.Cell,Xceed.Grid.GridPaintEventArgs,System.Boolean@)">
            <summary>Paints the foreground of the cell.</summary>
            <param name="cell">A reference to the Cell whose foreground is to be painted.</param>
            <param name="e">A GridPaintEventArgs that contains the necessary information.</param>
            <param name="handled">true if the cell's foreground was painted by the CellViewerManager; false if the cell painted its own foreground.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.RaiseEvent(System.Object,System.EventArgs)">
            <summary>Raises the specified event.</summary>
            <param name="eventKey">The object that owns the event.</param>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetImageAlignment">
            <summary>Resets the value of the ImageAlignment property to its default value, DefaultImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetImageArea">
            <summary>Resets the value of the ImageArea property to its default value, DefaultImageArea.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetImagePadding">
            <summary>Resets the value of the ImagePadding property to its default value, DefaultImagePadding.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetImageSize">
            <summary>Resets the value of the ImageSize property to its default value, DefaultImageSize.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetImageStyle">
            <summary>Resets the value of the ImageStyle property to its default value, DefaultImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetPreserveImageAspectRatio">
            <summary>Resets the value of the PreserveImageAspectRatio property to its default value, DefaultPreserveImageAspectRatio.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetReportStyle">
            <summary>Resets the property values of the ReportStyle.</summary>
            <remarks>    Calling the ResetReportStyle method will set the     ReportStyle property to $$NULL$$ causing a new     CellViewerManagerReportStyle to be created when the ReportStyle     property is accessed.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a CellViewerManagerReportStyle from being created     in the case where none of the properties of the ReportStyle     have been explicitly set.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ResetTextPadding">
            <summary>Resets the value of the TextPadding property to its default value, DefaultTextPadding.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.SetControlAppearance(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance and raises the SettingControlAppearance event.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <remarks>    Only in the case where the appearance of the underyling     Control is different depending on the cell should the     appearance properties of the control be changed in the     SetControlAppearanceCore method. In all other cases, the     properties of the underlying Control should be changed in the     constructor.</remarks>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.SetControlValue(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control and raises the SettingControlValue event.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerManager.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.Container">
            <summary>Gets the IContainer associated with the ISite when implemented by a class.</summary>
            <remarks>    $$NULL$$ for the Container property indicates that the     IComponent instance does not have an ISite.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.Control">
            <summary>Gets a reference to the underlining control used to view a cell's content.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultImageAlignment">
            <summary>Gets the default value of the ImageAlignment property.</summary>
            <remarks>    When overriding DefaultImageAlignment in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultImageArea">
            <summary>Gets the default value of the ImageArea property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultImagePadding">
            <summary>Gets the default value of the ImagePadding property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultImageSize">
            <summary>Gets the default value of the ImageSize property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultImageStyle">
            <summary>Gets the default value of the ImageStyle property.</summary>
            <remarks>    When overriding DefaultImageStyle in a derived class, the     value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultPreserveImageAspectRatio">
            <summary>Gets the default value of the PreserveImageAspectRatio property.</summary>
            <remarks>When overriding DefaultPreserveImageAspectRatio in a derived class, the value returned by your implementation should not be dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DefaultTextPadding">
            <summary>Gets the default value of the TextPadding property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.DesignMode">
            <summary>Gets a value that indicates whether the Component is currently in design mode.</summary>
            <remarks>    The design mode indicator is stored in the ISite;     therefore, if the Component does not have an ISite associated     with it, this property is always false.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.Events">
            <summary>Gets a list of the events to which the CellViewerManager is subscribed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ImageAlignment">
            <summary>Gets or sets the alignment of the image in the ImageArea.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ImageArea">
            <summary>Gets or sets the area where the viewer's image is displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ImagePadding">
            <summary>Gets or sets the padding surrounding the viewer's image.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ImageSize">
            <summary>Gets or sets the size of the viewer's image.</summary>
            <remarks>    If Empty is specified, the image's Size property will be     used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ImageStyle">
            <summary>Gets or sets a value indicating the style with which the image is displayed.</summary>
            <remarks>    The image can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.IsReportStyleDefined">
            <summary>Gets a boolean value indicating if one or more properties of the ReportStyle have been explicitly set.</summary>
            <remarks>    The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a CellViewerManagerReportStyle from being created     in the case where none of the properties of the ReportStyle     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.PropertyName">
            <summary>Gets a value representing the property used to set the control's value.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.ReportStyle">
            <summary>Gets the report style of the viewer.</summary>
            <remarks>    The report style will override the corresponding settings     in the ReportStyleSheet in the case where its properties, or     the properties of its parent's report style, have been     explicitly set.     The IsReportStyleDefined property should be consulted     before the ReportStyle property is accessed to prevent a new     instance of a CellViewerManagerReportStyle from being created     in the case where none of the properties of the ReportStyle     have been explicitly set.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.Site">
            <summary>Gets or sets the ISite associated with the IComponent.</summary>
            <remarks>    Sites can also serve as a repository for     container-specific, per-component information, such as the     component name.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerManager.TextPadding">
            <summary>Gets or sets the padding surrounding the viewer's text.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.Disposed">
            <summary>Represents the method that handles the Disposed event of a component.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.ImageAreaChanged">
            <summary>Raised when the value of the ImageArea property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.Paint">
            <summary>Raised after the cell's background and foreground have been painted.</summary>
            <remarks>    Painting must be done with the rectangles received in the     GridPaintEventArgs otherwise the grid element will not print     correctly.</remarks>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryAccessibleText">
            <summary>Raised when retrieving a cell's accessibility text.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryControlBounds">
            <summary>Raised when calculating the bounds of the control.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryFittedHeight">
            <summary>Raised to calculate the fitted height of the viewer in pixels.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryFittedWidth">
            <summary>Raised to calculate the fitted width of the viewer in pixels.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryImage">
            <summary>Raised when retrieving the image displayed by the cell viewer.</summary>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.QueryText">
            <summary>Raised when retrieving the text displayed by the cell viewer.</summary>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.SettingControlAppearance">
            <summary>Raised when the appearance of the underlining control is about to be set.</summary>
            <remarks>    Only in the case where the appearance of the underyling     Control is different depending on the cell should the     appearance properties of the control be changed in the     SettingControlAppearance event.</remarks>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.SettingControlValue">
            <summary>Raised when the value of a cell is being assigned to the underlining Control.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CellViewerManager.TextPaddingChanged">
            <summary>Raised when the value of the TextPadding property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.CellViewerPaintEventArgs">
            <summary>Provides information on the cell for which the viewer provides custom painting.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerPaintEventArgs.#ctor">
            <summary>Initializes a new instance of the CellViewerPaintEventArgs class specifying the cell for which the viewer provides custom painting, as well as the information necessary to paint.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerPaintEventArgs.#ctor(Xceed.Grid.Cell,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the CellViewerPaintEventArgs class specifying the cell for which the viewer provides custom painting, as well as the information necessary to paint.</summary>
            <param name="cell">The Cell for which the viewer provides custom painting.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="clientPosition">The ClientPosition of the cell.</param>
            <param name="clientRectangle">The ClientRectangle of the cell.</param>
            <param name="displayRectangle">The DisplayRectangle of the cell.</param>
            <param name="bottomBorderWidth">The width, in pixels, of the cell's bottom border.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CellViewerPaintEventArgs.#ctor(Xceed.Grid.Cell,System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Rectangle,Xceed.Grid.StatelessVisualGridElementStyle,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the CellViewerPaintEventArgs class specifying the cell for which the viewer provides custom painting, as well as the information necessary to paint.</summary>
            <param name="cell">The Cell for which the viewer provides custom painting.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="clientPosition">The ClientPosition of the cell.</param>
            <param name="clientRectangle">The ClientRectangle of the cell.</param>
            <param name="displayRectangle">The DisplayRectangle of the cell.</param>
            <param name="displayVisualStyle">The StatelessVisualGridElementStyle of the cell.</param>
            <param name="bottomBorderWidth">The width, in pixels, of the cell's bottom border.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.CellViewerPaintEventArgs.Cell">
            <summary>Gets the Cell for which the viewer provides custom painting.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.CheckBoxViewer">
            <summary>Represents a viewer that is used to view the content of cells which have a boolean value.</summary>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.#ctor">
            <summary>Initializes a new instance of the CheckBoxViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.#ctor">
            <summary>Initializes a new instance of the CheckBoxViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.#ctor(Xceed.Editors.WinCheckBox)">
            <summary>Initializes a new instance of the CheckBoxViewer class specifying the underlying WinCheckBox control that will be used to view the content of cells.</summary>
            <param name="control">The WinCheckBox control that will be used to view the content of cells.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.GetCheckState(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the CheckState of the viewer.</summary>
            <returns>A CheckState value representing the check state of the viewer.</returns>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.GetImageCore(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the image displayed by the viewer.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.CheckBoxViewer.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.Control">
            <summary>Gets the underlying WinCheckBox control that is used to view the content of cells.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.DefaultImageArea">
            <summary>Gets the default value of the ImageArea property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.DefaultImageSize">
            <summary>Gets the default value of the ImageSize property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.ImageAlignment">
            <summary>Gets or sets the alignment of the image in the ImageArea.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.ImageArea">
            <summary>Gets or sets the area where the viewer's image is displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.ImagePadding">
            <summary>Gets or sets the padding surrounding the viewer's image.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.ImageSize">
            <summary>Gets or sets the size of the viewer's image.</summary>
            <remarks>    If Empty is specified, the image's Size property will be     used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.ImageStyle">
            <summary>Gets or sets a value indicating the style with which the image is displayed.</summary>
            <remarks>    The image can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.CheckBoxViewer.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.ImageAreaChanged">
            <summary>Raised when the value of the ImageArea property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.CheckBoxViewer.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.ComboBoxViewer">
            <summary>The ComboBoxViewer class represents a viewer that can be used to display the content of cells which have an ID/Value mapping.</summary>
            <remarks>    The ComboBoxViewer does not support unbound mode.     In order to simulate unbound mode, a CellEditorManager     populated with unbound data can be created and then its     TemplateControlCloned and wrapped in a     CellViewerManager.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor">
            <summary>Initializes a new instance of the ComboBoxViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor">
            <summary>Initializes a new instance of the ComboBoxViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor(System.Object,System.String,System.String)">
            <summary>Initializes a new instance of the ComboBoxViewer class specifying its data binding information.</summary>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor(System.Object,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the ComboBoxViewer class specifying its data binding information.</summary>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
            <param name="displayFormat">The format with which the selected item is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor(System.Object,System.String,System.String,System.String,Xceed.Grid.ImageArea,System.Drawing.Size,System.String)">
            <summary>Initializes a new instance of the ComboBoxViewer class specifying its data binding information.</summary>
            <param name="dataSource">The data source used to populate the combobox.</param>
            <param name="dataMember">The table to bind to within the dataSource.</param>
            <param name="valueMember">A string that specifies the field of the dataSource from which to draw the value.</param>
            <param name="imageMember">A string that specifies the field of the dataSource from which to draw the image.</param>
            <param name="imageArea">An ImageArea value representing the area where the viewer's image is displayed.</param>
            <param name="imageSize">A Size structure representing the size of the viewer's image.</param>
            <param name="displayFormat">The format with which the selected item is displayed in the combobox.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.#ctor(Xceed.Editors.WinComboBox)">
            <summary>Initializes a new instance of the ComboBoxViewer class specifying the underlying WinComboBox control that will be used to view the content of cells.</summary>
            <param name="control">The WinComboBox control that will be used to view the content of cells.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.Dispose">
            <summary>Releases all resources used by the control.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.Dispose(System.Boolean)">
            <summary>Releases all resources used by the control.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.GetColumnNames">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.GetImageCore(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the image displayed by the viewer.</summary>
            <returns>An Image representing the image. displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If a image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The text can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.GetTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.OnDataMemberChanged(System.EventArgs)">
            <summary>Raises the DataMemberChanged event.</summary>
            <remarks>When overriding OnDataMemberChanged in a derived class, be sure to call the base class's OnDataMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.OnDataSourceChanged(System.EventArgs)">
            <summary>Raises the DataSourceChanged event.</summary>
            <remarks>When overriding OnDataSourceChanged in a derived class, be sure to call the base class's OnDataSourceChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.OnDisplayFormatChanged(System.EventArgs)">
            <summary>Raises the DisplayFormatChanged event.</summary>
            <remarks>When overriding OnDisplayFormatChanged in a derived class, be sure to call the base class's OnDisplayFormatChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.OnImageMemberChanged(System.EventArgs)">
            <summary>Raises the ImageMemberChanged event.</summary>
            <remarks>When overriding OnImageMemberChanged in a derived class, be sure to call the base class's OnImageMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.OnValueMemberChanged(System.EventArgs)">
            <summary>Raises the ValueMemberChanged event.</summary>
            <remarks>When overriding OnValueMemberChanged in a derived class, be sure to call the base class's OnValueMemberChanged method so that registered delegates receive the event.</remarks>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetDisplayFormat">
            <summary>Resets the value of the DisplayFormat property to its default value, DefaultDisplayFormat.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImageAlignment">
            <summary>Resets the value of the ImageAlignment property to its default value, DefaultImageAlignment.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImageArea">
            <summary>Resets the value of the ImageArea to its default value, DefaultImageArea.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImageMember">
            <summary>Resets the value of the ImageMember property to its default value, DefaultImageMember.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImagePadding">
            <summary>Resets the value of the ImagePadding property to its default value, DefaultImagePadding.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImageSize">
            <summary>Resets the value of the ImageSize property to its default value, DefaultImageSize.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetImageStyle">
            <summary>Resets the value of the ImageStyle property to its default value, DefaultImageStyle.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetMask">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetPasswordChar">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetPreserveImageAspectRatio">
            <summary>Resets the value of the PreserveImageAspectRatio property to its default value, DefaultPreserveImageAspectRatio.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.ResetValueMember">
            <summary>Resets the value of the ValueMember property to its default value, DefaultValueMember.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ComboBoxViewer.SetDataBinding(System.Object,System.String)">
            <summary>Sets the DataSource and DataMember properties at run time.</summary>
            <remarks>    The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                           If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the     ComboBoxViewer, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the ComboBoxViewer.</remarks>
            <param name="dataSource">The data source used to populate the ComboBoxViewer, typed as Object.</param>
            <param name="dataMember">A string that specifies the table to bind to within the object returned by the DataSource property.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.Control">
            <summary>Gets the underlying WinComboBox control that is used to view the content of cells.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DataMember">
            <summary>Gets or sets a specific table in the data source.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DataSource">
            <summary>Gets or sets the data source used to populate the ComboBoxViewer</summary>
            <remarks>    If the DataSource contains more than one table, you must     set the DataMember property to a string that represents the     name of the table to bind to.     The following is a list of the supported data     sources:                                            DataTable                 Represents one table of in-memory                 data.                                           DataView                 Represents a databindable, customized                 view of a DataTable for sorting, filtering,                 searching, editing, and navigation.                                           DataSet                 Represents an in-memory cache of                 data.                                           DataViewManager                 Contains a default                 DataViewSettingCollection for each DataTable in a                 DataSet.                                           Any component that implements the IListSource                 interface.                 Provides functionality to an object to                 return a list that can be bound to a data                 source.                                           Any component that implements the IList                 interface.                 Represents a collection of objects                 that can be individually accessed by                 index.                                           Jagged arrays                 A jagged array is an array whose                 elements are arrays.                                If the data source is a jagged array and rows are added     or removed from the jagged array from outside of the     ComboBoxViewer, then the jagged array must be reassigned to the     DataSource property in order for the modifications to be     reflected in the ComboBoxViewer.     If an existing value is changed in the jagged array from     outside of the ComboBoxViewer, for example the text of one of     the elements, in order for the changes to be reflected in the     ComboBoxViewer, the jagged array must be reassigned to     viewer.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DefaultDisplayFormat">
            <summary>Gets the default value of the DisplayFormat property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DefaultImageAlignment">
            <summary>Gets the default value of the ImageAlignment property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DefaultImageMember">
            <summary>Gets the default value of the ImageMember property.</summary>
            <remarks>    When overriding DefaultImageMember in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DefaultValueMember">
            <summary>Gets the default value of the ValueMember property.</summary>
            <remarks>    When overriding DefaultValueMember in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.DisplayFormat">
            <summary>Gets or sets the format with which the selected item is displayed in the ComboBoxViewer.</summary>
            <remarks>    The default display format is the names (Name) of each     column separated by a comma (,). For example, if the combobox     contains 3 columns named "LastName", "FirstName", and "Age",     the display format will be "LastName, FirstName, Age". When an     item is selected, the display format will be resolved to the     values of the correspond columns. For example: "Robitaille,     Naomi, 2".</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImageAlignment">
            <summary>Gets or sets the alignment of the image in the ImageArea.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImageArea">
            <summary>Gets or sets the area where the viewer's image is displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImageMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the image.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImagePadding">
            <summary>Gets or sets the padding surrounding the viewer's image.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImageSize">
            <summary>Gets or sets the size of the viewer's image.</summary>
            <remarks>    If Empty is specified, the image's Size property will be     used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ImageStyle">
            <summary>Gets or sets a value indicating the style with which the image is displayed.</summary>
            <remarks>    The image can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ComboBoxViewer.ValueMember">
            <summary>Gets or sets a string that specifies the field of the data source from which to draw the value.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.DataMemberChanged">
            <summary>Raised when the value of the DataMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.DataSourceChanged">
            <summary>Raised when the value of the DataSource property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.DisplayFormatChanged">
            <summary>Raised when the value of the DisplayFormat property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImageAreaChanged">
            <summary>Raised when the value of the ImageArea property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImageMemberChanged">
            <summary>Raised when the value of the ImageMember property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.PasswordCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.ComboBoxViewer.ValueMemberChanged">
            <summary>Raised when the value of the ValueMember property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.DateViewer">
            <summary>The DateViewer class represents a viewer that can be used to view the content of cells which have a DateTime datatype.</summary>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.#ctor">
            <summary>Initializes a new instance of the DateViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.#ctor">
            <summary>Initializes a new instance of the DateViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.#ctor(Xceed.Editors.WinDatePicker)">
            <summary>Initializes a new instance of the DateViewer class specifying the underlying WinDatePicker control that will be used to view the content of cells.</summary>
            <param name="control">The WinDatePicker control that will be used to view the content of cells.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.GetDate(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the date displayed by the viewer.</summary>
            <returns>A DateTime value representing the date displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text/date     representing the content of the cell to which it is associated.     If an image is displayed, it is displayed to the left or right     of the text/date. If no text/date is displayed, the image will     occupy the entire space. The image can be retrieved using the     Object) method.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.GetTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.ResetMask">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.ResetPasswordChar">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.DateViewer.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.DateViewer.Control">
            <summary>Gets the underlying WinDatePicker control that is used to view the content of cells.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.DateViewer.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.DateViewer.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.DateViewer.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.DateViewer.PasswordCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.ImageViewer">
            <summary>Represents a viewer that is used to display an image in a cell.</summary>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.ImageViewer.#ctor">
            <summary>Initializes a new instance of the ImageViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ImageViewer.#ctor">
            <summary>Initializes a new instance of the ImageViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.ImageViewer.#ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of the ImageViewer class specifying the size of the image displayed by the viewer.</summary>
            <param name="imageSize">A Size structure representing the size of the image.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ImageViewer.#ctor(System.Drawing.Size,Xceed.Grid.ImageStyle)">
            <summary>Initializes a new instance of the ImageViewer class specifying the size and style of the image displayed by the viewer.</summary>
            <param name="imageSize">A Size structure representing the size of the image.</param>
            <param name="imageStyle">An ImageStyle value representing the style of the image.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.ImageViewer.GetImageCore(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the image that is displayed by the ImageViewer.</summary>
            <returns>A reference to the Image displayed by the ImageViewer.</returns>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.ImageViewer.DefaultImageArea">
            <summary>Gets the default value of the ImageArea property.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.ImageViewer.TextPadding">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.NumericViewer">
            <summary>Represents a cell viewer that can be used to view the content of cells which have a numeric data type.</summary>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.#ctor">
            <summary>Initializes a new instance of the NumericViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.#ctor">
            <summary>Initializes a new instance of the NumericViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.#ctor(Xceed.Editors.WinNumericTextBox)">
            <summary>Initializes a new instance of the NumericViewer class specifying the underlying WinNumericTextBox control that will be used to view the content of cells which have a numeric data type.</summary>
            <param name="control">The WinNumericTextBox control that will be used to view the content of cells which have a numeric data type.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.GetNumber(System.Type,System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the number displayed by the viewer.</summary>
            <returns>An object representing the number displayed by the viewer.</returns>
            <param name="dataType">The data type of the number displayed by the viewer.</param>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.GetTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.ResetMask">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.ResetPasswordChar">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.NumericViewer.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.NumericViewer.Control">
            <summary>Gets the underlying WinNumericTextBox control that is used to view the content of cells.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.NumericViewer.Mask">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.NumericViewer.PasswordChar">
            <summary>This property is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.NumericViewer.MaskChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.NumericViewer.PasswordCharChanged">
            <summary>This event is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerControlBoundsEventArgs">
            <summary>Provides information on the Cell to be viewed as well as the Control used to view the cell's content in order to calculate the viewer's bounds.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.QueryViewerControlBoundsEventArgs.#ctor(System.Windows.Forms.Control,Xceed.Grid.Cell,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of the QueryViewerControlBoundsEventArgs class specifying the cell to be viewed, the control used to view the cell's content, as well as various information required to calculate the control's bounds.</summary>
            <param name="control">The Control used to view the cell's content.</param>
            <param name="cell">The Cell whose content is being displayed.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the control.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerControlBoundsEventArgs.Bounds">
            <summary>Gets or sets the bounds to the control.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs">
            <summary>Provides information on the cell whose content is to be displayed as well as various information required to calculate the baseline.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.#ctor(Xceed.Grid.Cell,Xceed.Grid.AutoHeightMode,System.Int32,System.Drawing.Graphics,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the QueryViewerFittedHeightEventArgs specifying the cell whose content is to be displayed as well as various information required to calculate the baseline.</summary>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="cellDisplayWidth">A value, in pixels, representing the display width of the cell. The display width of the cell is its width without the borders.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
            <param name="fittedHeight">The fitted height of the viewer in pixels. If -1, then no fitted height is required or desired.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.Cell">
            <summary>Gets the Cell whose content is to be displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.CellDisplayWidth">
            <summary>Gets the display width of the cell.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.FittedHeight">
            <summary>Gets or sets the fitted height of the viewer.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.Graphics">
            <summary>Gets the Graphics object used to paint.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.Mode">
            <summary>Gets an AutoHeightMode value indicating in regards to what factors the fitted height of the viewer will be calculated.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedHeightEventArgs.Printing">
            <summary>Gets a boolean value indicating if the viewer is being printed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs">
            <summary>Provides information on the Cell whose content is to be displayed in order to retrieve the viewer's fitted width.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.#ctor(Xceed.Grid.Cell,Xceed.Grid.AutoWidthMode,System.Drawing.Graphics,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the QueryViewerFittedWidthEventArgs class specifying the cell whose content is to be displayed as well as various information required to calculate the viewers's fitted width.</summary>
            <param name="cell">The Cell whose content is to be displayed.</param>
            <param name="mode">This parameter is reserved for future use.</param>
            <param name="graphics">The Graphics object used to paint.</param>
            <param name="printing">true if the viewer is being printed; false otherwise.</param>
            <param name="fittedWidth">The fitted width of the viewer in pixels. If -1, then no fitted width is required or desired.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.Cell">
            <summary>Gets the Cell whose content is to be displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.FittedWidth">
            <summary>Gets or sets the fitted width of the viewer.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.Graphics">
            <summary>Gets the Graphics object used to paint.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.Mode">
            <summary>This property is reserved for future use.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerFittedWidthEventArgs.Printing">
            <summary>Gets a boolean value indicating if the viewer is being printed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerImageEventArgs">
            <summary>Provides information on the CellViewerManager's image.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.QueryViewerImageEventArgs.#ctor(System.Object,Xceed.Grid.CellImageFormatInfo,Xceed.Grid.GridElement,System.Drawing.Image)">
            <summary>Initializes a new instance of the QueryViewerImageEventArgs class specifying the Cell whose content is to be displayed as well as the viewer's Image.</summary>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellImageFormatInfo which provides image formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
            <param name="image">An Image representing the viewer's image.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerImageEventArgs.FormatInfo">
            <summary>Gets a CellImageFormatInfo which provides image formatting information.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerImageEventArgs.GridElement">
            <summary>Gets the GridElement associated with the Value.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerImageEventArgs.Image">
            <summary>Gets or sets the viewer's image.</summary>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerImageEventArgs.Value">
            <summary>Gets the value of the underlying cell.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerTextEventArgs">
            <summary>Provides information on the CellViewerManager's text.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.QueryViewerTextEventArgs.#ctor(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement,System.String)">
            <summary>Initializes a new instance of the QueryViewerImageEventArgs class specifying the Cell whose content is to be displayed as well as the viewer's Text.</summary>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
            <param name="text">The text that is to be displayed by the CellViewerManager.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerTextEventArgs.FormatInfo">
            <summary>Gets a CellTextFormatInfo which provides text formatting information.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerTextEventArgs.GridElement">
            <summary>Gets the GridElement associated with the Value.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerTextEventArgs.Text">
            <summary>Gets or sets the viewer's text.</summary>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.QueryViewerTextEventArgs.Value">
            <summary>Gets the value of the underlying cell.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.TextViewer">
            <summary>Represents a viewer that is used to view the content of cells as text.</summary>
            <remarks>    When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.#ctor">
            <summary>Initializes a new instance of the TextViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.#ctor">
            <summary>Initializes a new instance of the TextViewer class.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.#ctor(System.String)">
            <summary>Initializes a new instance of the TextViewer specifying the Mask to apply to the displayed text.</summary>
            <remarks>             By default, the following mask characters are supported:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all characters to                     lowercase. When used elsewhere within the mask,                     it is considered as a literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                       </remarks>
            <param name="mask">A string representing the Mask to aplpy to the displayed text.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.#ctor(Xceed.Editors.WinTextBox)">
            <summary>Initializes a new instance of the TextViewer class specifying the underlying WinTextBox control that will be used to view the content of cells.</summary>
            <param name="control">The WinTextBox control that will be used to view the content of cells.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.CalculateControlBoundsCore(Xceed.Grid.Cell,System.Drawing.Rectangle@)">
            <summary>Calculates the bounds of the viewer.</summary>
            <param name="cell">The Cell whose content is to be displayed by the viewer.</param>
            <param name="bounds">A Rectangle structure representing the bounds of the viewer.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.GetTextCore(System.Object,Xceed.Grid.CellTextFormatInfo,Xceed.Grid.GridElement)">
            <summary>Retrieves the text displayed by the viewer.</summary>
            <returns>A string representing the text displayed by the viewer.</returns>
            <remarks>    A cell viewer can display an image and text representing     the content of the cell to which it is associated. If an image     is displayed, it is displayed to the left or right of the text.     If no text is displayed, the image will occupy the entire     space. The image can be retrieved using the Object)     method.     When generating a report using the reporting capabilities     of Xceed Grid for .NET, CellViewerManagers will only be     reproduced in the report if the Object) and/or Object) methods     return the image or text that is to be displayed (GetImageCore     and/or GetTextCore have been overridden). In the case where the     GridElement) and/or GridElement) methods have not been     overridden to return the desired image and/or text, the string     representation of the underlying cell's content will be     displayed in the report.</remarks>
            <param name="value">An object representing the value of the underlying cell.</param>
            <param name="formatInfo">A CellTextFormatInfo which provides text formatting information.</param>
            <param name="gridElement">The GridElement associated with the value. The gridElement is usually a Cell or Column and can be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.OnMaskChanged(System.EventArgs)">
            <summary>Raises the MaskChanged event.</summary>
            <remarks>When overriding OnMaskChanged in a derived class, be sure to call the base class's OnMaskChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.OnPasswordCharChanged(System.EventArgs)">
            <summary>Raises the PasswordCharChanged event.</summary>
            <remarks>When overriding OnPasswordCharChanged in a derived class, be sure to call the base class's OnPasswordCharChanged method so that registered delegates receive the event.</remarks>
            <param name="e">A EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.ResetMask">
            <summary>Resets the value of the Mask property to its default value, DefaultMask.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.ResetPasswordChar">
            <summary>Resets the value of the PasswordChar property to its default value, DefaultPasswordChar.</summary>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.SetControlAppearanceCore(Xceed.Grid.Cell)">
            <summary>Sets the underlining Control's appearance.</summary>
            <param name="cell">A reference to the Cell whose content is to be viewed.</param>
        </member>
        <member name="M:Xceed.Grid.Viewers.TextViewer.SetControlValueCore(Xceed.Grid.Cell)">
            <summary>Assigns the cell's value to the Control.</summary>
            <param name="cell">The Cell whose value is to be assigned to the Control.</param>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.Control">
            <summary>Gets the underlying WinTextBox control that is used to view the content of cells.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.DefaultMask">
            <summary>Gets the default value of the Mask property.</summary>
            <remarks>    When overriding DefaultMask in a derived class, the value     returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.DefaultPasswordChar">
            <summary>Gets the default value of the PasswordChar property.</summary>
            <remarks>    When overriding DefaultPasswordChar in a derived class,     the value returned by your implementation should not be     dynamic.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.ImageAlignment">
            <summary>Gets or sets the alignment of the image in the ImageArea.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.ImageArea">
            <summary>Gets or sets the area where the viewer's image is displayed.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.ImagePadding">
            <summary>Gets or sets the padding surrounding the viewer's image.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.ImageSize">
            <summary>Gets or sets the size of the viewer's image.</summary>
            <remarks>    If Empty is specified, the image's Size property will be     used.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.ImageStyle">
            <summary>Gets or sets a value indicating the style with which the image is displayed.</summary>
            <remarks>    The image can be retrieved using the Object)     method.</remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.Mask">
            <summary>Gets or sets the mask used to display the content of a cell.</summary>
            <remarks>             By default, the following mask characters are supported:                                       #                 Digits or white space                                           9                 Digits only                                           A                 Alpha-numeric values                 only                                           a                 Alpha-numeric values or white                 space                                           @                 Letters only                                           &amp;                 Any printable character (ascii                 characters from 32 to 126 and 128 to                 255)                                            The following table provides a list of characters which             are not mask characters but still affect the formatting             of the text:                                                   &gt;                     When used as the first character                     of a mask, it converts all inputted characters                     to uppercase. When used elsewhere within the                     mask, it is considered as a                     literal.                                                       &lt;                     When used as the first character                     of a mask, it converts all characters to                     lowercase. When used elsewhere within the mask,                     it is considered as a literal.                                                       \                     The character following this                     character will always be considered as a                     literal. For example, \9 will be the 9 literal                     instead of the digits mask                     character.                              All other characters are considered as literals.                       </remarks>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.PasswordChar">
            <summary>Gets or sets the character used to mask characters of a password.</summary>
        </member>
        <member name="P:Xceed.Grid.Viewers.TextViewer.PreserveImageAspectRatio">
            <summary>Gets or sets a boolean value indicating if the image should preserve its aspect ratio.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.ImageAlignmentChanged">
            <summary>Raised when the value of the ImageAlignment property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.ImageAreaChanged">
            <summary>Raised when the value of the ImageArea property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.ImagePaddingChanged">
            <summary>Raised when the value of the ImagePadding property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.ImageSizeChanged">
            <summary>Raised when the value of the ImageSize property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.ImageStyleChanged">
            <summary>Raised when the value of the ImageStyle property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.MaskChanged">
            <summary>Raised when the value of the Mask property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.PasswordCharChanged">
            <summary>Raised when the value of the PasswordChar property is changed.</summary>
        </member>
        <member name="E:Xceed.Grid.Viewers.TextViewer.PreserveImageAspectRatioChanged">
            <summary>Raised when the value of the PreserveImageAspectRatio property is changed.</summary>
        </member>
        <member name="T:Xceed.Grid.Viewers.CellViewerEventHandler">
            <summary>Represents the method that will handle various CellViewerManager events.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An CellViewerEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.CellViewerPaintEventHandler">
            <summary>Represents the method that will handle the Paint event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A CellViewerPaintEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerControlBoundsEventHandler">
            <summary>Represents the method that will handle the QueryControlBounds event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryViewerControlBoundsEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerFittedHeightEventHandler">
            <summary>Represents the method that will handle the QueryFittedHeight event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryViewerFittedHeightEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerFittedWidthEventHandler">
            <summary>Represents the method that will handle the QueryFittedWidth event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryViewerFittedWidthEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerImageEventHandler">
            <summary>Represents the method that will handle the QueryImage event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryViewerImageEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Grid.Viewers.QueryViewerTextEventHandler">
            <summary>Represents the method that will handle the QueryText event.</summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A QueryViewerTextEventArgs that contains the event data.</param>
        </member>
    </members>
</doc>
