<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.Validation</name>
    </assembly>
    <members>
        <member name="N:Xceed.Validation">
            <summary>This namespace is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Validation.CompareListOperator">
            <summary>Operators used to compare a value with a list of values.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareListOperator.InSet">
            <summary>Value is inside a set of values.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareListOperator.NotInSet">
            <summary>Value is not inside a set of values.</summary>
        </member>
        <member name="T:Xceed.Validation.CompareValueOperator">
            <summary>Defines the operators used to compare two values.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.NotEqual">
            <summary>Values are different.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.Equal">
            <summary>Values are equal.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.LessThan">
            <summary>Value is less than another value.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.GreaterThan">
            <summary>Value is greater than another value.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.GreaterThanOrEqual">
            <summary>Value is greater than or equal to another value.</summary>
        </member>
        <member name="F:Xceed.Validation.CompareValueOperator.LessThanOrEqual">
            <summary>Value is less than or equal to another value.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationDataType">
            <summary>Defines the parsing type of the input data being validated.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.String">
            <summary>Value is of type String.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.Int32">
            <summary>Value is of type Int32.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.Int64">
            <summary>Value is of type Int64.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.Date">
            <summary>Value is of type DateTime.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.Double">
            <summary>Value is of type Double.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationDataType.Decimal">
            <summary>Value is of type Decimal.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationLevel">
            <summary>Determines when the validation will be performed for a specific ValidationCriterion.</summary>
        </member>
        <member name="F:Xceed.Validation.ValidationLevel.Automatic">
            <summary>Validated at the component level when edit changes are about to be committed.</summary>
            <remarks>    If the component is a Control, it is validated during the     Validating event. If it is a Xceed.Grid.Cell, validation     is performed during the Xceed.Grid.Cell.LeavingEdit     event.</remarks>
        </member>
        <member name="F:Xceed.Validation.ValidationLevel.Manual">
            <summary>Validated when one of the Object[]) methods is called.</summary>
            <remarks>If one or more child components were configured using the ValidationProvider, they will be validated if one of the parents was passed as a parameter to Object[]). For Xceed.Grid.GridControl, the current Xceed.Grid.CellRow being edited will have its cells validated using the validation expressions that were defined for each cell. For other components, validation will occur with the current value using the Text property.</remarks>
        </member>
        <member name="F:Xceed.Validation.ValidationLevel.AutomaticAndManual">
            <summary>Validated when one of the Object[]) methods is called and automatically when the edit changes of each component is about to be committed.</summary>
            <remarks>                          If the component is a Control, it is             validated when its parent Form is validated during a             call to Object[]). It is validated also when its parent             Form is validated during a call to             Object[]).                               If the component is a             Xceed.Grid.Cell, it is validated when its parent             Xceed.Grid.CellRow triggers the             Xceed.Grid.Row.EndingEditLeavingEdit event. It             is also validated when its parent             Xceed.Grid.CellRow triggers the             Xceed.Grid.Row.EndingEditLeavingEdit             event.              </remarks>
        </member>
        <member name="T:Xceed.Validation.ConstantListCriterion">
            <summary>Specialization of the DataTypeCriterion class that compares an input component's value to a list of constant values.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.#ctor">
            <summary>Initializes a new instance of the ConstantListCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.#ctor">
            <summary>Initializes a new instance of the ConstantListCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,Xceed.Validation.CompareListOperator,System.Object[],Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the ConstantListCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="compareOperator">An CompareListOperator value representing the operator used to compare the input component's value with the passed values.</param>
            <param name="constantList">An array of objects of type specified by \"dataType\" representing the values used for the criterion.</param>
            <param name="dataType">An ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>Returns true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed input Component, false otherwise.</returns>
            <param name="componentToValidate">The object to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.Clone">
            <summary>Creates a copy of this ConstantListCriterion object.</summary>
            <returns>The ConstantListCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.ConstantListCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the input component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">Text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.ConstantListCriterion.ConstantList">
            <summary>Gets or sets an array of objects of type specified by DataType property representing the values used for the criterion.</summary>
        </member>
        <member name="P:Xceed.Validation.ConstantListCriterion.Operator">
            <summary>Gets or sets the operator used to compare a value with the ConstantList property.</summary>
        </member>
        <member name="T:Xceed.Validation.ConstantValueCriterion">
            <summary>Specialization of the DataTypeCriterion class that compares a value with a constant.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.#ctor">
            <summary>Initializes a new instance of the ConstantValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.#ctor">
            <summary>Initializes a new instance of the ConstantValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,Xceed.Validation.CompareValueOperator,System.Object,Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the ConstantValueCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="compareOperator">An CompareValueOperator value representing the operator used to compare the passed value for the criterion.</param>
            <param name="constant">The constant value of type specified by \"dataType\" used for the criterion.</param>
            <param name="dataType">An ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Component; false otherwise.</returns>
            <param name="componentToValidate">The component to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.Clone">
            <summary>Creates a copy of this ConstantValueCriterion object.</summary>
            <returns>The ConstantValueCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.ConstantValueCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">Text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.ConstantValueCriterion.Constant">
            <summary>Gets or sets the constant value of type specified by DataType property used in the comparison.</summary>
        </member>
        <member name="P:Xceed.Validation.ConstantValueCriterion.Operator">
            <summary>Gets or sets the CompareValueOperator used to compare a value with a constant value.</summary>
        </member>
        <member name="T:Xceed.Validation.CustomValidationMessages">
            <summary>Represents the custom validation error messages.</summary>
            <remarks>             Custom validation error messages apply to a specific         validation criterion and, therefore, to specific input         components. When an error message has a null string as its         value, the default message in DefaultValidationMessages is         used instead.     </remarks>
        </member>
        <member name="M:Xceed.Validation.CustomValidationMessages.#ctor">
            <summary>Initializes a new instance of the CustomValidationMessages class.</summary>
        </member>
        <member name="M:Xceed.Validation.CustomValidationMessages.#ctor">
            <summary>Initializes a new instance of the CustomValidationMessages class.</summary>
        </member>
        <member name="M:Xceed.Validation.CustomValidationMessages.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the CustomValidationMessages class using the specified messages.</summary>
            <remarks>    Passing a null string in one of the message parameters     will cause the default for that message in     DefaultValidationMessages to be used.     Custom validation error messages apply to a specific     validation criterion and, therefore, to specific input     components.</remarks>
            <param name="between">A string representing the criterion's custom message for a "Between Min and Max" operator error.</param>
            <param name="dataType">A string representing the criterion's base custom message for a "Data Type" error.</param>
            <param name="date">A string representing the criterion's custom message for a "Date" data type error.</param>
            <param name="equalTo">A string representing the criterion's custom message for a "Equal To" operator error.</param>
            <param name="greaterThan">A string representing the criterion's custom message for a "Greater Than" operator error.</param>
            <param name="greaterThanOrEqual">A string representing the criterion's custom message for a "Greater Than or Equal To" operator error.</param>
            <param name="inSet">A string representing the criterion's custom message for a "In Set of Values" operator error.</param>
            <param name="lessThan">A string representing the criterion's custom message for a "Less Than" operator error.</param>
            <param name="lessThanOrEqual">A string representing the criterion's custom message for a "Less Than or Equal To" operator error.</param>
            <param name="notEqual">A string representing the criterion's custom message for a "Not Equal To" operator error.</param>
            <param name="notInSet">A string representing the criterion's custom message for a "Not in Set of Values" operator error.</param>
            <param name="number">A string representing the criterion's custom message for a "Number" data type error.</param>
            <param name="regularExpression">A string representing the criterion's custom message for a "Regular Expression" error.</param>
            <param name="requiredField">A string representing the criterion's custom message for a "Required Field" error.</param>
            <param name="value">A string representing the criterion's base custom message for any invalid input value.</param>
        </member>
        <member name="M:Xceed.Validation.CustomValidationMessages.Clone">
            <summary>Creates a copy of this CustomValidationMessages object.</summary>
            <returns>The CustomValidationMessages object this method creates, cast as an object.</returns>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultBetween">
            <summary>Gets the default value for the custom "Between" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultDataType">
            <summary>Gets the default value for the base custom "Data Type" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultDate">
            <summary>Gets the default value for the custom "Date" data type message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultEqual">
            <summary>Gets the default value for the custom "Equal To" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultGreaterThan">
            <summary>Gets the default value for the custom "Greater Than" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultGreaterThanOrEqual">
            <summary>Gets the default value for the custom "Greater Than or Equal To" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultInSet">
            <summary>Gets the default value for the custom "In Set of Values" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultLessThan">
            <summary>Gets the default value for the custom "Less Than" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultLessThanOrEqual">
            <summary>Gets the default value for the custom "Less Than or Equal To" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultNotEqual">
            <summary>Gets the default value for the custom "Not Equal To" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultNotInSet">
            <summary>Gets the default value for the custom "Not in Set of Values" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultNumber">
            <summary>Gets the default value for the custom "Number" data type message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultRegularExpression">
            <summary>Gets the default value for the custom "Regular Expression" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultRequiredField">
            <summary>Gets the default value for the custom "Required Field" message.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="P:Xceed.Validation.CustomValidationMessages.DefaultValue">
            <summary>Gets the default value for the base custom message used for any invalid input value.</summary>
            <remarks>    The null value indicates that the corresponding message     in DefaultValidationMessages should be used.</remarks>
        </member>
        <member name="T:Xceed.Validation.DataTypeCriterion">
            <summary>Specialization of the ValidationCriterion class that validates a value using a data type.</summary>
            <remarks>    The DataTypeCriterion class is the type used for all     comparisons. The classes ConstantListCriterion,     ConstantValueCriterion, InputValueCriterion,     InputCellValueCriterion and RangeCriterion all derive from     DataTypeCriterion. Therefore, for criteria based on these     types, a data type is specified (and required).     ValidationDataType.String will be compared using string     comparison.     For the validation of a date, the IFormatProvider is the     current thread's date format.</remarks>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.#ctor">
            <summary>Initializes a new instance of the DataTypeCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.#ctor">
            <summary>Initializes a new instance of the DataTypeCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the DataTypeCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="dataType">An ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Component; false otherwise.</returns>
            <param name="componentToValidate">The input component to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.Clone">
            <summary>Creates a copy of this DataTypeCriterion object.</summary>
            <returns>The DataTypeCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.DataTypeCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the input component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">A string representing the text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.DataTypeCriterion.DataType">
            <summary>Gets or sets the ValidationDataType that used to parse the value during validation.</summary>
        </member>
        <member name="P:Xceed.Validation.DataTypeCriterion.RequiredField">
            <summary>Gets or sets a boolean value indicating whether the field must contain a value.</summary>
        </member>
        <member name="T:Xceed.Validation.InputCellValueCriterion">
            <summary>Specialization of the DataTypeCriterion class that compares the values of two cells.</summary>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.#ctor">
            <summary>Initializes a new instance of the InputCellValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.#ctor">
            <summary>Initializes a new instance of the InputCellValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,Xceed.Validation.CompareValueOperator,System.String,Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the InputCellValueCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">A ValidationLevel value representing the point at which validation will be performed for the criterion.</param>
            <param name="compareOperator">A CompareValueOperator value representing the operator used to compare two values.</param>
            <param name="fieldName">The field name of the other cell with which the input component is compared.</param>
            <param name="dataType">A ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the comparison method is case sensitive; false otherwise.</param>
            <param name="trim">true if white spaces should be trimmed from the input component's value before testing the criterion; false otherwise.</param>
            <param name="customMessages">A reference to a CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating if the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>Returns true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed input Component, false otherwise.</returns>
            <param name="componentToValidate">The object to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.Clone">
            <summary>Creates a copy of this InputCellValueCriterion object.</summary>
            <returns>The InputCellValueCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.InputCellValueCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on this input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the input component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the value to be used for the validation.</param>
            <param name="valueToValidate">The value to be used for the validation.</param>
            <param name="validationMessage">Provides the last error message of the validation failure if any.</param>
        </member>
        <member name="P:Xceed.Validation.InputCellValueCriterion.FieldName">
            <summary>Gets or sets the field name of the Xceed.Grid.Cell being compared.</summary>
        </member>
        <member name="P:Xceed.Validation.InputCellValueCriterion.Operator">
            <summary>Gets or sets the CompareValueOperator used to compare an input value with another input value.</summary>
        </member>
        <member name="T:Xceed.Validation.InputValueCriterion">
            <summary>Specialization of the DataTypeCriterion class that compares the values of two input components.</summary>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.#ctor">
            <summary>Initializes a new instance of the InputValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.#ctor">
            <summary>Initializes a new instance of the InputValueCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,Xceed.Validation.CompareValueOperator,System.Windows.Forms.Control,Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the InputValueCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="compareOperator">An CompareValueOperator value representing the operator used to compare the input component's value with the passed component's value (inputControl).</param>
            <param name="inputControl">The passed input component whose value will be used in the comparison using the criterion.</param>
            <param name="dataType">An ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Component; false otherwise.</returns>
            <param name="componentToValidate">The input component to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.Clone">
            <summary>Creates a copy of this InputValueCriterion object.</summary>
            <returns>The InputValueCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.InputValueCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the input component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">A string representing the text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.InputValueCriterion.InputControl">
            <summary>Gets or sets the Control compared with the input component associated with this criterion.</summary>
        </member>
        <member name="P:Xceed.Validation.InputValueCriterion.Operator">
            <summary>Gets or sets the CompareValueOperator used to compare an input component with the input component associated with this criterion.</summary>
        </member>
        <member name="T:Xceed.Validation.Licenser">
            <summary>Class which is used to register Xceed Input Validator for .NET.</summary>
            <remarks>    We recommend you set the LicenseKey property in the main     entry point of the application. For example, the LicenseKey     property can be set, for C# users, in the static main function.     For VB.NET users, it can be set in the constructor of the main     form or in the "Sub Main" procedure. If no entry point is     available, it is recommended that the LicenseKey property be     set in a static constructor of a class that will be accessed     systematically before any of the library's classes are     instantiated or, you can simply set the LicenseKey property     immediately BEFORE you instantiate a class.</remarks>
        </member>
        <member name="M:Xceed.Validation.Licenser.Unlock">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Validation.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license this product.</summary>
        </member>
        <member name="T:Xceed.Validation.RangeCriterion">
            <summary>Specialization of the DataTypeCriterion class that compares the input value to a range defined by a minumum and a maximum value.</summary>
            <remarks>    The range is inclusive, meaning that the minimum and     maximum values are also valid values.</remarks>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.#ctor">
            <summary>Initializes a new instance of the RangeCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.#ctor">
            <summary>Initializes a new instance of the RangeCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,System.Object,System.Object,Xceed.Validation.ValidationDataType,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the RangeCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="min">The minimum value of the range used for the criterion. Min should be of type specified by /"dataType/" property.</param>
            <param name="max">The maximum value of the range used for the criterion. Max should be of type specified by /"dataType/" property.</param>
            <param name="dataType">An ValidationDataType value representing the expected data type for the criterion.</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Component; false otherwise.</returns>
            <param name="componentToValidate">The input component to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.Clone">
            <summary>Creates a copy of this RangeCriterion object.</summary>
            <returns>The RangeCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.RangeCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the input component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the input component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">A string representing the text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.RangeCriterion.Max">
            <summary>Gets or sets the maximum value of the range. It should be of type specified by DataType property.</summary>
        </member>
        <member name="P:Xceed.Validation.RangeCriterion.Min">
            <summary>Gets or sets the minimum value of the range. It should be of type specified by DataType property.</summary>
        </member>
        <member name="T:Xceed.Validation.RegularExpressionCriterion">
            <summary>Represents the validation of a value using a regular expression string.</summary>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.#ctor">
            <summary>Initializes a new instance of the RegularExpressionCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.#ctor">
            <summary>Initializes a new instance of the RegularExpressionCriterion class.</summary>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.#ctor(System.String,Xceed.Validation.ValidationLevel,System.String,System.Boolean,System.Boolean,System.Boolean,Xceed.Validation.CustomValidationMessages)">
            <summary>Initializes a new instance of the RegularExpressionCriterion class using the specified values.</summary>
            <param name="criterionName">A string that substitutes name variable in error messages to define the criterion.</param>
            <param name="level">An ValidationLevel value representing the moment at which validation will be performed for the criterion.</param>
            <param name="regularExpression">A string representing the regular expression used to validate the input component's value</param>
            <param name="requiredField">true if the input component must contain a value; false otherwise.</param>
            <param name="caseSensitive">true if the criterion is case sensitive; false otherwise.</param>
            <param name="trim">true if whitespace characters should be trimmed from the input component's value before testing with the criterion; false otherwise.</param>
            <param name="customMessages">A CustomValidationMessages object representing the custom messages for this validation criterion. $$NULL$$ is accepted and states that the DefaultValidationMessages will be used when validating.</param>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Component; false otherwise.</returns>
            <param name="componentToValidate">The input component to perform the evaluation on.</param>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.Clone">
            <summary>Creates a copy of this RegularExpressionCriterion object.</summary>
            <returns>The RegularExpressionCriterion object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.RegularExpressionCriterion.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the component.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be validated first.</remarks>
            <returns>true if the component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">Text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="P:Xceed.Validation.RegularExpressionCriterion.RegularExpression">
            <summary>Gets or sets the regular expression string used to verify whether the input component's value matches.</summary>
        </member>
        <member name="P:Xceed.Validation.RegularExpressionCriterion.RequiredField">
            <summary>Gets or sets a boolean value indicating whether the field must contain a value.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationCriterion">
            <summary>Abstract base class of a validation expression containing a single criterion.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationCriterion.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <remarks>When overriding this method in a derived class, be sure to call the base class's method before your own code so that the base class's criteria can be evaluated first.</remarks>
            <returns>Returns true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed input Component; false otherwise.</returns>
            <param name="componentToValidate">The object to perform the evaluation on.</param>
        </member>
        <member name="P:Xceed.Validation.ValidationCriterion.CaseSensitive">
            <summary>Gets or sets a boolean value indicating whether the criterion is case sensitive.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationCriterion.CriterionName">
            <summary>Gets or sets a string that substitutes name variable in error messages to define the criterion.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationCriterion.CustomValidationMessages">
            <summary>Gets or sets the custom message text used in error messages for this criterion.</summary>
            <remarks>Custom validation error messages override the default messages in DefaultValidationMessages.</remarks>
        </member>
        <member name="P:Xceed.Validation.ValidationCriterion.Trim">
            <summary>Gets or sets a boolean value indicating whether whitepace characters should be trimmed from the control's value before testing with the criterion.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationExpression">
            <summary>Represents expressions that determine whether the evaluation succeeds or fails. Upon failure, a validation message explaining why the evaluation failed can be provided, which can then be displayed.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.CanEvaluate(System.Object)">
            <summary>Returns a boolean value indicating whether the validation expression can be evaluated.</summary>
            <returns>true if the validation expression is well formatted and has all required operands and operators to be evaluated on the passed Control; false otherwise.</returns>
            <param name="componentToValidate">The input component on which the evaluation is performed.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.Clone">
            <summary>Creates a copy of this ValidationExpression object.</summary>
            <returns>The ValidationExpression object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.Evaluate(Xceed.Validation.ValidationProvider,System.Object,System.String,System.String@)">
            <summary>Launches the validation on the component.</summary>
            <returns>true if the component contains valid information based on this validation expression; false otherwise.</returns>
            <param name="validationProvider">The validation provider used for the validation.</param>
            <param name="componentToValidate">The input component containing the text value to be used for the validation.</param>
            <param name="valueToValidate">Text value to be validated.</param>
            <param name="validationMessage">A reference to a string representing the last error message of the validation failure, if any.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating whether the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationExpression.ToString">
            <summary>Returns the string representation of the validation expression.</summary>
            <returns>A string representing the name of the validation expression.</returns>
        </member>
        <member name="P:Xceed.Validation.ValidationExpression.Name">
            <summary>Gets or sets a string representing the reference ID of the criterion.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationExpression.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationExpression.ValidationLevel">
            <summary>Gets or sets an ValidationLevel value representing the moment at which validation will be performed.</summary>
        </member>
        <member name="E:Xceed.Validation.ValidationExpression.Disposed">
            <summary>Raised when an expression has been disposed.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationMessages">
            <summary>Represents the validation error messages.</summary>
            <remarks>    The ValidationMessages class represents error messages     that apply to all criteria.</remarks>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.#ctor">
            <summary>Initializes a new instance of the ValidationMessages class.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.#ctor">
            <summary>Initializes a new instance of the ValidationMessages class.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the ValidationMessages class using the specified messages.</summary>
            <param name="between">A string representing the default message for "Between Min and Max" operator errors.</param>
            <param name="dataType">A string representing the base default message for "Data Type" errors.</param>
            <param name="date">A string representing the default message for "Date" data type errors.</param>
            <param name="equalTo">A string representing the default message for "Equal To" operator errors.</param>
            <param name="greaterThan">A string representing the default message for "Greater Than" operator errors.</param>
            <param name="greaterThanOrEqual">A string representing the default message for "Greater Than or Equal To" operator errors.</param>
            <param name="inSet">A string representing the default message for the "In Set of Values" operator errors.</param>
            <param name="lessThan">A string representing the default message for "Less Than" operator errors.</param>
            <param name="lessThanOrEqual">A string representing the default message for "Less Than or Equal To" operator errors.</param>
            <param name="notEqual">A string representing the default message for "Not Equal To" operator errors.</param>
            <param name="notInSet">A string representing the default message for "Not in Set of Values" operator errors.</param>
            <param name="number">A string representing the default message for "Number" data type errors.</param>
            <param name="regularExpression">A string representing the default message for "Regular Expression" errors.</param>
            <param name="requiredField">A string representing the default message for "Required Field" errors.</param>
            <param name="value">A string representing the base default message for any invalid value.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.Clone">
            <summary>Creates a copy of this ValidationMessages object.</summary>
            <returns>The ValidationMessages object this method creates, cast as an object.</returns>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating whether the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetBetween">
            <summary>Resets the Between property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetDataType">
            <summary>Resets the DataType property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetDate">
            <summary>Resets the Date property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetEqual">
            <summary>Resets the Equal property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetGreaterThan">
            <summary>Resets the GreaterThan property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetGreaterThanOrEqual">
            <summary>Resets the GreaterThanOrEqual property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetInSet">
            <summary>Resets the InSet property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetLessThan">
            <summary>Resets the LessThan property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetLessThanOrEqual">
            <summary>Resets the LessThanOrEqual property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetNotEqual">
            <summary>Resets the NotEqual property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetNotInSet">
            <summary>Resets the NotInSet property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetNumber">
            <summary>Resets the Number property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetRegularExpression">
            <summary>Resets the RegularExpression property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetRequiredField">
            <summary>Resets the RequiredField property to its original value.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationMessages.ResetValue">
            <summary>Resets the Value property to its original value.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Between">
            <summary>Gets or sets the text for default "Between" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DataType">
            <summary>Gets or sets the text for default "Data Type" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Date">
            <summary>Gets or sets the text for default validation error messages of the "Date" data type.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultBetween">
            <summary>Gets the original value for default "Between" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultDataType">
            <summary>Gets the original value for default "Data Type" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultDate">
            <summary>Gets the original value for default validation error messages of the "Date" data type.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultEqual">
            <summary>Gets the original value for default "Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultGreaterThan">
            <summary>Gets the original value for default "Greater Than" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultGreaterThanOrEqual">
            <summary>Gets the original value for default "Greater Than or Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultInSet">
            <summary>Gets the original value for default "In Set of Values" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultLessThan">
            <summary>Gets the original value for default "Less Than" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultLessThanOrEqual">
            <summary>Gets the original value for default "Less Than or Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultNotEqual">
            <summary>Gets the original value for default "Not Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultNotInSet">
            <summary>Gets the original value for default "Not in Set of Values" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultNumber">
            <summary>Gets the original value for default validation error messages of the "Number" data type.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultRegularExpression">
            <summary>Gets the original value for default "Regular Expression" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultRequiredField">
            <summary>Gets the original value for default "Required Field" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.DefaultValue">
            <summary>Gets the original value for default base validation error messages for any invalid value.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Equal">
            <summary>Gets or sets the text for default "Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.GreaterThan">
            <summary>Gets or sets the text for default "Greater Than" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.GreaterThanOrEqual">
            <summary>Gets or sets the text for default "Greater Than or Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.InSet">
            <summary>Gets or sets the text for default "In Set of Values" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.LessThan">
            <summary>Gets or sets the text for default "Less Than" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.LessThanOrEqual">
            <summary>Gets or sets the text for default "Less Than or Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.NotEqual">
            <summary>Gets or sets the text for default "Not Equal To" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.NotInSet">
            <summary>Gets or sets the text for default "Not in Set of Valudes" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Number">
            <summary>Gets or sets the text for default validation error messages of the "Number" data type.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.RegularExpression">
            <summary>Gets or sets the text for "Regular Expression" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.RequiredField">
            <summary>Gets or sets the text for default "Required Field"" validation error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationMessages.Value">
            <summary>Gets or sets the text for default base validation error messages for any invalid value.</summary>
        </member>
        <member name="T:Xceed.Validation.ValidationProvider">
            <summary>Adds customizable text validation for compatible input components.</summary>
            <remarks>    ValidationProvider is the main class of the Input     Validator control. It implements IExtenderProvider and     ISupportInitialize to add the ValidationExpression property to     compatible components at design and runtime.</remarks>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.#ctor">
            <summary>Initializes a new instance of the ValidationProvider class.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.ContainsExpression(Xceed.Validation.ValidationExpression)">
            <summary>Determines if the provider contains the expression passed as parameter.</summary>
            <returns>Returns true if the validation provider contains the expression; false otherwise.</returns>
            <param name="expression">The expression to look for.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.Dispose">
            <summary>Clean up any resources being used.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.Dispose(System.Boolean)">
            <summary>Clean up any resources being used.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.GetIconAlignment(System.Windows.Forms.Control)">
            <summary>Gets a value indicating where the error icon should be placed in relation to the control.</summary>
            <returns>One of the ErrorIconAlignment values. The default icon alignment is MiddleRight.</returns>
            <param name="inputControl">The control to get the location for.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.GetIconPadding(System.Windows.Forms.Control)">
            <summary>Returns the amount of extra space to leave next to the error icon.</summary>
            <returns>The number of pixels to leave between the icon and the control. Many icons normally have extra space around their central images, so the padding value is only necessary if additional space is necessary. Padding values can be positive or negative. Negative values cause the icon to overlap the edge of the control. The default icon padding is 0.</returns>
            <param name="inputControl">The control to get the padding for.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.GetPropertyValue(System.Object)">
            <summary>Retrieves the value of the specified property in the Properties collection.</summary>
            <returns>An object representing the value of the property.</returns>
            <param name="key">The property whose value to retrieve.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.GetValidationError(System.Object)">
            <summary>Gets the validation error that is displayed next to the input component passed as a parameter.</summary>
            <returns>Returns the error if it exists; $$NULL$$ otherwise.</returns>
            <remarks>Use this method to extract error messages associated with compatible input components. For Xceed.Grid.Cell components, the ErrorDescription property can also be used to access the validation error.</remarks>
            <param name="component">The input component whose validation error you wish to retrieve.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.GetValidationExpression(System.Object)">
            <summary>Retrieves the validation expression associated with the component.</summary>
            <returns>The ValidationExpression associated with the input component.</returns>
            <param name="inputComponent">The input component whose associated ValidationExpression will be returned.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.IsPropertyDefined(System.Object)">
            <summary>Retrieves a boolean value indicating whether the specified property has been explicitly set.</summary>
            <returns>true if the property has been explicitly set; false otherwise.</returns>
            <param name="key">The property to evaluate.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.RemovePropertyValue(System.Object)">
            <summary>Removes the specified property from the Properties collection.</summary>
            <param name="key">The property to remove.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.SetIconAlignment(System.Windows.Forms.Control,System.Windows.Forms.ErrorIconAlignment)">
            <summary>Sets the location where the error icon should be placed in relation to the control.</summary>
            <param name="inputControl">The control to set the location for.</param>
            <param name="value">One of the ErrorIconAlignment value.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.SetIconPadding(System.Windows.Forms.Control,System.Int32)">
            <summary>Sets the amount of extra space to leave between the specified control and the error icon.</summary>
            <param name="inputControl">The control to set the padding for.</param>
            <param name="value">The number of pixels to add between control and the icon.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.SetValidationError(System.Object,System.String)">
            <summary>Sets a validation error to be displayed next to an input component, overriding all validation messages previously set by the validation provider.</summary>
            <remarks>The validation provider sets errors automatically using its validation expressions and validation message settings. Using this method to change error messages will only change the validation message and will not affect the automatic validation behavior. For Xceed.Grid.Cell components, the error description property can also be used to access the validation errors. Using this method is recommended for exceptional cases.</remarks>
            <param name="component">The input component to associate with the error.</param>
            <param name="error">The error message to be associated to the passed input component.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.SetValidationExpression(System.Object,Xceed.Validation.ValidationExpression)">
            <summary>Associates a validation expression with an input component.</summary>
            <param name="inputComponent">The input component with which the validation expression passed in expression will be associated.</param>
            <param name="expression">The ValidationExpression object to be associated with the input component passed in inputComponent.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.Validate">
            <summary>Validates the component and all of its child components, but excludes specified types of components.</summary>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.Validate(System.Object,System.Boolean,System.Object[])">
            <summary>Validates the component and all of its child components, but excludes specified types of components.</summary>
            <returns>Returns true if components are valid; false otherwise.</returns>
            <param name="component">The component to validate.</param>
            <param name="validateHidden">true if validation includes hidden components. false will validate only visible components. Components are considered to be visible even if they are not currently within the client area of their container. Hidden components are components that are collapsed or whose Visible property is set to false.</param>
            <param name="ignoredComponents">An array containing types of components and/or specific component instances to be ignored, along with their children components. When a $$NULL$$ is passed, validation will occur on all component types.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.Validate(System.Object,System.Boolean,System.Boolean)">
            <summary>Validates the component, specifying whether child components and visible components should be validated.</summary>
            <returns>Returns true if components are valid; false otherwise.</returns>
            <param name="component">The component to validate.</param>
            <param name="validateChildren">true if validation is also performed by traversing all children components. false will validate only the passed component.</param>
            <param name="validateHidden">true if validation includes hidden components. false will validate only visible components. Components are considered to be visible even if they are not currently within the client area of their container. Hidden components are components that are collapsed or whose Visible property is set to false.</param>
        </member>
        <member name="M:Xceed.Validation.ValidationProvider.ValidateCell(System.Object,System.Object,System.Object,System.Object[])">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns/>
        </member>
        <member name="P:Xceed.Validation.ValidationProvider.DefaultValidationMessages">
            <summary>Gets or sets the default message text used in error messages.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationProvider.Icon">
            <summary>Gets or sets the icon that will be displayed when a validation error occured.</summary>
        </member>
        <member name="P:Xceed.Validation.ValidationProvider.Properties">
            <summary>Gets a collection of property names whose values have been explicitly set as well as the corresponding values.</summary>
        </member>
    </members>
</doc>
